<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4" kind="class" language="C++" prot="public">
    <compoundname>tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;</compoundname>
    <includes refid="functor_8h" local="no">functor.h</includes>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1a762b18418d4174d51337cbf2fff8fbdb" prot="private" static="no">
        <type>R(*</type>
        <definition>typedef R(* tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;::FPointer) (const ObjectRef &amp;n, Args...)</definition>
        <argsstring>)(const ObjectRef &amp;n, Args...)</argsstring>
        <name>FPointer</name>
        <briefdescription>
<para>internal function pointer type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/functor.h" line="70" column="1" bodyfile="include/tvm/node/functor.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1a5ec7abb8b84f7afe385d9a97bd5fcf8e" prot="private" static="no">
        <type><ref refid="classtvm_1_1NodeFunctor" kindref="compound">NodeFunctor</ref>&lt; R(const ObjectRef &amp;n, Args...)&gt;</type>
        <definition>using tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;::TSelf =  NodeFunctor&lt;R (const ObjectRef&amp; n, Args...)&gt;</definition>
        <argsstring></argsstring>
        <name>TSelf</name>
        <briefdescription>
<para>refer to itself. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/functor.h" line="72" column="1" bodyfile="include/tvm/node/functor.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1ac7f687cb7dda02407b578a6683fa708a" prot="public" static="no">
        <type>R</type>
        <definition>using tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;::result_type =  R</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <briefdescription>
<para>the result type of this functor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/functor.h" line="78" column="1" bodyfile="include/tvm/node/functor.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1ae22042c93f71ab978e0a7ccf0ae87d1d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; FPointer &gt;</type>
        <definition>std::vector&lt;FPointer&gt; tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;::func_</definition>
        <argsstring></argsstring>
        <name>func_</name>
        <briefdescription>
<para>internal function table </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/functor.h" line="74" column="1" bodyfile="include/tvm/node/functor.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1a3233a0b1e9898fc719e72db783881c71" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;::can_dispatch</definition>
        <argsstring>(const ObjectRef &amp;n) const </argsstring>
        <name>can_dispatch</name>
        <param>
          <type>const ObjectRef &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Whether the functor can dispatch the corresponding Node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to be dispatched </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether dispatching function is registered for n&apos;s type. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/functor.h" line="84" column="1" bodyfile="include/tvm/node/functor.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1a0b4aaedd0c2bb1f4c20b78221d30ef54" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>R</type>
        <definition>R tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;::operator()</definition>
        <argsstring>(const ObjectRef &amp;n, Args...args) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const ObjectRef &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>invoke the functor, dispatch on type of n </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The Node argument </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The additional arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/functor.h" line="94" column="1" bodyfile="include/tvm/node/functor.h" bodystart="94" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1a2fcc19e5151e9b9e56cafc76231b29fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TNode</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4" kindref="compound">TSelf</ref> &amp;</type>
        <definition>TSelf&amp; tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;::set_dispatch</definition>
        <argsstring>(FPointer f)</argsstring>
        <name>set_dispatch</name>
        <param>
          <type>FPointer</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>set the dispacher for type TNode </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to be set. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TNode</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of Node to be dispatched. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/functor.h" line="107" column="1" bodyfile="include/tvm/node/functor.h" bodystart="107" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1a7c6f675b3c24ea09365a646b2ca7c77e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TNode</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4" kindref="compound">TSelf</ref> &amp;</type>
        <definition>TSelf&amp; tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;::clear_dispatch</definition>
        <argsstring>()</argsstring>
        <name>clear_dispatch</name>
        <briefdescription>
<para>unset the dispacher for type TNode </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TNode</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of Node to be dispatched. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/functor.h" line="125" column="1" bodyfile="include/tvm/node/functor.h" bodystart="125" bodyend="131"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="5853">
        <label>tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;</label>
        <link refid="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4"/>
      </node>
    </collaborationgraph>
    <location file="include/tvm/node/functor.h" line="67" column="1" bodyfile="include/tvm/node/functor.h" bodystart="67" bodyend="132"/>
    <listofallmembers>
      <member refid="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1a3233a0b1e9898fc719e72db783881c71" prot="public" virt="non-virtual"><scope>tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;</scope><name>can_dispatch</name></member>
      <member refid="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1a7c6f675b3c24ea09365a646b2ca7c77e" prot="public" virt="non-virtual"><scope>tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;</scope><name>clear_dispatch</name></member>
      <member refid="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1a762b18418d4174d51337cbf2fff8fbdb" prot="private" virt="non-virtual"><scope>tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;</scope><name>FPointer</name></member>
      <member refid="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1ae22042c93f71ab978e0a7ccf0ae87d1d" prot="private" virt="non-virtual"><scope>tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;</scope><name>func_</name></member>
      <member refid="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1a0b4aaedd0c2bb1f4c20b78221d30ef54" prot="public" virt="non-virtual"><scope>tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;</scope><name>operator()</name></member>
      <member refid="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1ac7f687cb7dda02407b578a6683fa708a" prot="public" virt="non-virtual"><scope>tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;</scope><name>result_type</name></member>
      <member refid="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1a2fcc19e5151e9b9e56cafc76231b29fd" prot="public" virt="non-virtual"><scope>tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;</scope><name>set_dispatch</name></member>
      <member refid="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4_1a5ec7abb8b84f7afe385d9a97bd5fcf8e" prot="private" virt="non-virtual"><scope>tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;</scope><name>TSelf</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
