<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespacetopi_1_1cuda" kind="namespace" language="C++">
    <compoundname>topi::cuda</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacetopi_1_1cuda_1adf9851df7c1a1e8e847d2e13b2946d4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::cuda::dense_cuda</definition>
        <argsstring>(const Target &amp;target, const tvm::te::Tensor &amp;data, const tvm::te::Tensor &amp;weight, const tvm::te::Tensor &amp;bias, const DataType &amp;out_dtype)</argsstring>
        <name>dense_cuda</name>
        <param>
          <type>const <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>bias</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref> &amp;</type>
          <declname>out_dtype</declname>
        </param>
        <briefdescription>
<para>Implementation of dense for CUDA backend. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor with shape [batch, in_dim] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor with shape [out_dim, in_dim] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bias</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor with shape [out_dim]. Optional; to omit bias, pass Tensor() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>Output data type. Used for mixed precision.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tensor with shape [batch, out_dim] </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/cuda/dense.h" line="52" column="1" bodyfile="topi/include/topi/cuda/dense.h" bodystart="52" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1_1cuda_1ac4a8c5cd447bc5d71956173b247b3237" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Schedule" kindref="compound">Schedule</ref></type>
        <definition>Schedule topi::cuda::schedule_dense</definition>
        <argsstring>(const Target &amp;target, const Array&lt; Tensor &gt; &amp;outs)</argsstring>
        <name>schedule_dense</name>
        <param>
          <type>const <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>outs</declname>
        </param>
        <briefdescription>
<para>Create a CUDA schedule for dense. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target to generate a schedule for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outs</parametername>
</parameternamelist>
<parameterdescription>
<para>The output tensors.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A schedule for the given ops. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/cuda/dense.h" line="91" column="1" bodyfile="topi/include/topi/cuda/dense.h" bodystart="91" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1_1cuda_1aeb133c69956d801df6f9ff349d26ed83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Schedule" kindref="compound">Schedule</ref></type>
        <definition>Schedule topi::cuda::schedule_injective_from_existing</definition>
        <argsstring>(Schedule sch, const Tensor &amp;out)</argsstring>
        <name>schedule_injective_from_existing</name>
        <param>
          <type><ref refid="classtvm_1_1te_1_1Schedule" kindref="compound">Schedule</ref></type>
          <declname>sch</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Updates an existing schedule for the given injective ops. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sch</parametername>
</parameternamelist>
<parameterdescription>
<para>The schedule to update. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The tensor representing the injective op.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The updated schedule. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/cuda/injective.h" line="47" column="1" bodyfile="topi/include/topi/cuda/injective.h" bodystart="47" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1_1cuda_1a2bf9bfe82cdc71f0c74ec59e67fdeafd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Schedule" kindref="compound">Schedule</ref></type>
        <definition>Schedule topi::cuda::schedule_injective</definition>
        <argsstring>(const Target &amp;target, const Array&lt; Tensor &gt; &amp;outs)</argsstring>
        <name>schedule_injective</name>
        <param>
          <type>const <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>outs</declname>
        </param>
        <briefdescription>
<para>Create a CUDA schedule for the given output tensors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target to generate a schedule for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outs</parametername>
</parameternamelist>
<parameterdescription>
<para>The output tensors.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A schedule for the given ops. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/cuda/injective.h" line="66" column="1" bodyfile="topi/include/topi/cuda/injective.h" bodystart="66" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1_1cuda_1ac33d664c4579676ce9ac5773acc67c19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Schedule" kindref="compound">Schedule</ref></type>
        <definition>Schedule topi::cuda::schedule_lrn</definition>
        <argsstring>(const Array&lt; Tensor &gt; &amp;outs)</argsstring>
        <name>schedule_lrn</name>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>outs</declname>
        </param>
        <briefdescription>
<para>Create a CUDA schedule for LRN. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outs</parametername>
</parameternamelist>
<parameterdescription>
<para>The output tensors. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A schedule for the given ops. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/cuda/normalization.h" line="41" column="1" bodyfile="topi/include/topi/cuda/normalization.h" bodystart="41" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1_1cuda_1a8f3ae83160a8d6a96b5ddfaca7e1c21b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Schedule" kindref="compound">Schedule</ref></type>
        <definition>Schedule topi::cuda::schedule_pool</definition>
        <argsstring>(const Target &amp;target, const Array&lt; Tensor &gt; &amp;outs)</argsstring>
        <name>schedule_pool</name>
        <param>
          <type>const <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>outs</declname>
        </param>
        <briefdescription>
<para>Create a CUDA schedule for pool. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target to generate a schedule for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outs</parametername>
</parameternamelist>
<parameterdescription>
<para>The output tensors.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A schedule for the given ops. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/cuda/pooling.h" line="48" column="1" bodyfile="topi/include/topi/cuda/pooling.h" bodystart="48" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1_1cuda_1ad62dabb52c17a9edcfbeb34cf66b4c4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Schedule" kindref="compound">Schedule</ref></type>
        <definition>Schedule topi::cuda::schedule_global_pool</definition>
        <argsstring>(const Target &amp;target, const Array&lt; Tensor &gt; &amp;outs)</argsstring>
        <name>schedule_global_pool</name>
        <param>
          <type>const <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>outs</declname>
        </param>
        <briefdescription>
<para>Create a CUDA schedule for global_pool. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target to generate a schedule for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outs</parametername>
</parameternamelist>
<parameterdescription>
<para>The output tensors.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A schedule for the given ops. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/cuda/pooling.h" line="115" column="1" bodyfile="topi/include/topi/cuda/pooling.h" bodystart="115" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1_1cuda_1a308601fa6af41c20a2864501fd0cda80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Schedule" kindref="compound">Schedule</ref></type>
        <definition>Schedule topi::cuda::ScheduleReduce</definition>
        <argsstring>(const Target &amp;target, Operation op, Schedule sch, bool is_idx_reduce=false)</argsstring>
        <name>ScheduleReduce</name>
        <param>
          <type>const <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref></type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1te_1_1Schedule" kindref="compound">Schedule</ref></type>
          <declname>sch</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_idx_reduce</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Schedule a given reduce operation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target to generate a schedule for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation representing the injective operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sch</parametername>
</parameternamelist>
<parameterdescription>
<para>The schedule to apply this scheduling to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_idx_reduce</parametername>
</parameternamelist>
<parameterdescription>
<para>Pass true to schedule a reduce op that returns an index, such as argmax or argmin.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The schedule given by sch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/cuda/reduction.h" line="49" column="1" bodyfile="topi/include/topi/cuda/reduction.h" bodystart="49" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1_1cuda_1a07255e046847302abd54dd2e02a84354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void topi::cuda::TraverseBeforeReduce</definition>
        <argsstring>(Schedule s, Operation op)</argsstring>
        <name>TraverseBeforeReduce</name>
        <param>
          <type><ref refid="classtvm_1_1te_1_1Schedule" kindref="compound">Schedule</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Recursively traverse operator inputs, setting injective inputs to be computed inline. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The schedule we are building </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The current op in the traversal </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/cuda/reduction.h" line="141" column="1" bodyfile="topi/include/topi/cuda/reduction.h" bodystart="141" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1_1cuda_1a3420d2910f604087789ab4c96850f816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void topi::cuda::TraverseAfterReduce</definition>
        <argsstring>(const Target &amp;target, Schedule s, Operation op)</argsstring>
        <name>TraverseAfterReduce</name>
        <param>
          <type>const <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1te_1_1Schedule" kindref="compound">Schedule</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Schedule a reduce op, then invoke TraverseBeforeReduce on each of the op&apos;s inputs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target to generate a schedule for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The schedule we are building </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The reduce op </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/cuda/reduction.h" line="162" column="1" bodyfile="topi/include/topi/cuda/reduction.h" bodystart="162" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1_1cuda_1aad0c9654034582022e8e81e82ff08349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Schedule" kindref="compound">Schedule</ref></type>
        <definition>Schedule topi::cuda::schedule_reduce</definition>
        <argsstring>(const Target &amp;target, Array&lt; Tensor &gt; outs)</argsstring>
        <name>schedule_reduce</name>
        <param>
          <type>const <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt;</type>
          <declname>outs</declname>
        </param>
        <briefdescription>
<para>Create a CUDA schedule for a reduce operation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target to generate a schedule for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outs</parametername>
</parameternamelist>
<parameterdescription>
<para>The output tensors.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A schedule for the given ops. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/cuda/reduction.h" line="188" column="1" bodyfile="topi/include/topi/cuda/reduction.h" bodystart="188" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1_1cuda_1a068a59d0860e73f880133e87f352629d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Schedule" kindref="compound">Schedule</ref></type>
        <definition>Schedule topi::cuda::schedule_softmax</definition>
        <argsstring>(const Target &amp;target, const Array&lt; Tensor &gt; &amp;outs)</argsstring>
        <name>schedule_softmax</name>
        <param>
          <type>const <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>outs</declname>
        </param>
        <briefdescription>
<para>Create a CUDA schedule for the given softmax output tensors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target to generate a schedule for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outs</parametername>
</parameternamelist>
<parameterdescription>
<para>The output tensors.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A schedule for the given ops. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/cuda/softmax.h" line="47" column="1" bodyfile="topi/include/topi/cuda/softmax.h" bodystart="47" bodyend="97"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="topi/include/topi/cuda/dense.h" line="40" column="1"/>
  </compounddef>
</doxygen>
