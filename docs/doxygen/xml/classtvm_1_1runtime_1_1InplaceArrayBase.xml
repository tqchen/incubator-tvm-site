<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1runtime_1_1InplaceArrayBase" kind="class" language="C++" prot="public">
    <compoundname>tvm::runtime::InplaceArrayBase</compoundname>
    <includes refid="runtime_2container_8h" local="no">container.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>ArrayType</declname>
        <defname>ArrayType</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>ElemType</declname>
        <defname>ElemType</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1InplaceArrayBase_1a68c9bdbfd3a02ade0965972a0cd508cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ElemType &amp;</type>
        <definition>const ElemType&amp; tvm::runtime::InplaceArrayBase&lt; ArrayType, ElemType &gt;::operator[]</definition>
        <argsstring>(size_t idx) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Access element at index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Const reference to ElemType at the index. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="116" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1InplaceArrayBase_1a4b37b5fcd2285b818e8f623da8b326b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ElemType &amp;</type>
        <definition>ElemType&amp; tvm::runtime::InplaceArrayBase&lt; ArrayType, ElemType &gt;::operator[]</definition>
        <argsstring>(size_t idx)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Access element at index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to ElemType at the index. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="127" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="127" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1InplaceArrayBase_1ad1cf3446de62c7aba99235f2843f839f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::runtime::InplaceArrayBase&lt; ArrayType, ElemType &gt;::~InplaceArrayBase</definition>
        <argsstring>()</argsstring>
        <name>~InplaceArrayBase</name>
        <briefdescription>
<para>Destroy the Inplace <ref refid="classtvm_1_1Array" kindref="compound">Array</ref> Base object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="136" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="136" bodyend="145"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1InplaceArrayBase_1a7900079ae38be41d93b522239d3ba4f2" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tvm::runtime::InplaceArrayBase&lt; ArrayType, ElemType &gt;::EmplaceInit</definition>
        <argsstring>(size_t idx, Args &amp;&amp;...args)</argsstring>
        <name>EmplaceInit</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Construct a value in place with the arguments. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classtvm_1_1Type" kindref="compound">Type</ref> parameters of the arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the element. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments to construct the new value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Please make sure ArrayType::GetSize returns 0 before first call of EmplaceInit, and increment GetSize by 1 each time EmplaceInit succeeds. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="159" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="159" bodyend="162"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1InplaceArrayBase_1ab0de5686c0afa81ae64569e426f0d70d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ArrayType *</type>
        <definition>ArrayType* tvm::runtime::InplaceArrayBase&lt; ArrayType, ElemType &gt;::Self</definition>
        <argsstring>() const </argsstring>
        <name>Self</name>
        <briefdescription>
<para>Return the self object for the array. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to ArrayType. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="170" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1InplaceArrayBase_1ae4f845e2695ce301c6c3916a6e280c49" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* tvm::runtime::InplaceArrayBase&lt; ArrayType, ElemType &gt;::AddressOf</definition>
        <argsstring>(size_t idx) const </argsstring>
        <name>AddressOf</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Return the raw pointer to the element at idx. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Raw pointer to the element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="180" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="180" bodyend="190"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base template for classes with array like memory layout. </para>    </briefdescription>
    <detaileddescription>
<para>It provides general methods to access the memory. The memory layout is ArrayType + [ElemType]. The alignment of ArrayType and ElemType is handled by the memory allocator.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ArrayType</parametername>
</parameternamelist>
<parameterdescription>
<para>The array header type, contains object specific metadata. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ElemType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of objects stored in the array right after ArrayType.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">//<sp/>Example<sp/>usage<sp/>of<sp/>the<sp/>template<sp/>to<sp/>define<sp/>a<sp/>simple<sp/>array<sp/>wrapper</highlight></codeline>
<codeline><highlight class="normal">class<sp/>ArrayObj<sp/>:<sp/>public<sp/>InplaceArrayBase&lt;ArrayObj,<sp/>Elem&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Wrap<sp/>EmplaceInit<sp/>to<sp/>initialize<sp/>the<sp/>elements</highlight></codeline>
<codeline><highlight class="normal"><sp/>template<sp/>&lt;typename<sp/>Iterator&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/>void<sp/>Init(Iterator<sp/>begin,<sp/>Iterator<sp/>end)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>num_elems<sp/>=<sp/>std::distance(begin,<sp/>end);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>auto<sp/>it<sp/>=<sp/>begin;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>this-&gt;size<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_elems;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>InplaceArrayBase::EmplaceInit(i,<sp/>*it++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;size++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>test_function()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vector&lt;Elem&gt;<sp/>fields;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>auto<sp/>ptr<sp/>=<sp/>make_inplace_array_object&lt;ArrayObj,<sp/>Elem&gt;(fields.size());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ptr-&gt;Init(fields.begin(),<sp/>fields.end());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Access<sp/>the<sp/>0th<sp/>element<sp/>in<sp/>the<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(ptr-&gt;operator[](0)<sp/>==<sp/>fields[0]);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <collaborationgraph>
      <node id="5366">
        <label>tvm::runtime::InplaceArrayBase&lt; ArrayType, ElemType &gt;</label>
        <link refid="classtvm_1_1runtime_1_1InplaceArrayBase"/>
      </node>
    </collaborationgraph>
    <location file="include/tvm/runtime/container.h" line="109" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="109" bodyend="191"/>
    <listofallmembers>
      <member refid="classtvm_1_1runtime_1_1InplaceArrayBase_1ae4f845e2695ce301c6c3916a6e280c49" prot="private" virt="non-virtual"><scope>tvm::runtime::InplaceArrayBase</scope><name>AddressOf</name></member>
      <member refid="classtvm_1_1runtime_1_1InplaceArrayBase_1a7900079ae38be41d93b522239d3ba4f2" prot="protected" virt="non-virtual"><scope>tvm::runtime::InplaceArrayBase</scope><name>EmplaceInit</name></member>
      <member refid="classtvm_1_1runtime_1_1InplaceArrayBase_1a68c9bdbfd3a02ade0965972a0cd508cc" prot="public" virt="non-virtual"><scope>tvm::runtime::InplaceArrayBase</scope><name>operator[]</name></member>
      <member refid="classtvm_1_1runtime_1_1InplaceArrayBase_1a4b37b5fcd2285b818e8f623da8b326b2" prot="public" virt="non-virtual"><scope>tvm::runtime::InplaceArrayBase</scope><name>operator[]</name></member>
      <member refid="classtvm_1_1runtime_1_1InplaceArrayBase_1ab0de5686c0afa81ae64569e426f0d70d" prot="private" virt="non-virtual"><scope>tvm::runtime::InplaceArrayBase</scope><name>Self</name></member>
      <member refid="classtvm_1_1runtime_1_1InplaceArrayBase_1ad1cf3446de62c7aba99235f2843f839f" prot="public" virt="non-virtual"><scope>tvm::runtime::InplaceArrayBase</scope><name>~InplaceArrayBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
