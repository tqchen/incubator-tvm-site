<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="structtvm_1_1runtime_1_1vm_1_1VMFrame" kind="struct" language="C++" prot="public">
    <compoundname>tvm::runtime::vm::VMFrame</compoundname>
    <includes refid="vm_8h" local="no">vm.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structtvm_1_1runtime_1_1vm_1_1VMFrame_1af798dec5a7e9049d6673093d2f3e7dea" prot="public" static="no" mutable="no">
        <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref></type>
        <definition>Index tvm::runtime::vm::VMFrame::pc</definition>
        <argsstring></argsstring>
        <name>pc</name>
        <briefdescription>
<para>The return program counter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="431" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtvm_1_1runtime_1_1vm_1_1VMFrame_1a96a641c01ca63e6b146ef321319ec1f4" prot="public" static="no" mutable="no">
        <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref></type>
        <definition>Index tvm::runtime::vm::VMFrame::func_index</definition>
        <argsstring></argsstring>
        <name>func_index</name>
        <briefdescription>
<para>The index into the function table, points to the caller. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="433" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtvm_1_1runtime_1_1vm_1_1VMFrame_1a189d59efcb86fa14dc486c2852a5f01b" prot="public" static="no" mutable="no">
        <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref></type>
        <definition>Index tvm::runtime::vm::VMFrame::args</definition>
        <argsstring></argsstring>
        <name>args</name>
        <briefdescription>
<para>The number of arguments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="435" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtvm_1_1runtime_1_1vm_1_1VMFrame_1a6b1467a43cd8cb5123b08bbb4b39f428" prot="public" static="no" mutable="no">
        <type>const <ref refid="structtvm_1_1runtime_1_1vm_1_1Instruction" kindref="compound">Instruction</ref> *</type>
        <definition>const Instruction* tvm::runtime::vm::VMFrame::code</definition>
        <argsstring></argsstring>
        <name>code</name>
        <briefdescription>
<para>A pointer into the caller function&apos;s instructions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="437" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtvm_1_1runtime_1_1vm_1_1VMFrame_1a583dcf6c0ed3f3d2916679382c7a0775" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">ObjectRef</ref> &gt;</type>
        <definition>std::vector&lt;ObjectRef&gt; tvm::runtime::vm::VMFrame::register_file</definition>
        <argsstring></argsstring>
        <name>register_file</name>
        <briefdescription>
<para>Statically allocated space for objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="440" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtvm_1_1runtime_1_1vm_1_1VMFrame_1a2f6c425a89ee6872ead9bc71ab87fdd1" prot="public" static="no" mutable="no">
        <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3bbbf700719e9dc3dda2bc25210c18ae" kindref="member">RegName</ref></type>
        <definition>RegName tvm::runtime::vm::VMFrame::caller_return_register</definition>
        <argsstring></argsstring>
        <name>caller_return_register</name>
        <briefdescription>
<para>Register in caller&apos;s frame to put return value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="443" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="443" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structtvm_1_1runtime_1_1vm_1_1VMFrame_1a8f8c990ee4fa7cb7472f5440f2ca3bde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::runtime::vm::VMFrame::VMFrame</definition>
        <argsstring>(Index pc, Index func_index, Index args, const Instruction *code, Index register_file_size)</argsstring>
        <name>VMFrame</name>
        <param>
          <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref></type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref></type>
          <declname>func_index</declname>
        </param>
        <param>
          <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref></type>
          <declname>args</declname>
        </param>
        <param>
          <type>const <ref refid="structtvm_1_1runtime_1_1vm_1_1Instruction" kindref="compound">Instruction</ref> *</type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref></type>
          <declname>register_file_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="445" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="445" bodyend="451"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A representation of a stack frame. </para>    </briefdescription>
    <detaileddescription>
<para>A stack frame is a record containing the information needed to restore the caller&apos;s virtual machine state after returning from a function call. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="7593">
        <label>tvm::runtime::vm::VMFrame</label>
        <link refid="structtvm_1_1runtime_1_1vm_1_1VMFrame"/>
        <childnode refid="7594" relation="usage">
          <edgelabel>+code</edgelabel>
        </childnode>
      </node>
      <node id="7594">
        <label>tvm::runtime::vm::Instruction</label>
        <link refid="structtvm_1_1runtime_1_1vm_1_1Instruction"/>
      </node>
    </collaborationgraph>
    <location file="include/tvm/runtime/vm.h" line="429" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="429" bodyend="452"/>
    <listofallmembers>
      <member refid="structtvm_1_1runtime_1_1vm_1_1VMFrame_1a189d59efcb86fa14dc486c2852a5f01b" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VMFrame</scope><name>args</name></member>
      <member refid="structtvm_1_1runtime_1_1vm_1_1VMFrame_1a2f6c425a89ee6872ead9bc71ab87fdd1" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VMFrame</scope><name>caller_return_register</name></member>
      <member refid="structtvm_1_1runtime_1_1vm_1_1VMFrame_1a6b1467a43cd8cb5123b08bbb4b39f428" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VMFrame</scope><name>code</name></member>
      <member refid="structtvm_1_1runtime_1_1vm_1_1VMFrame_1a96a641c01ca63e6b146ef321319ec1f4" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VMFrame</scope><name>func_index</name></member>
      <member refid="structtvm_1_1runtime_1_1vm_1_1VMFrame_1af798dec5a7e9049d6673093d2f3e7dea" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VMFrame</scope><name>pc</name></member>
      <member refid="structtvm_1_1runtime_1_1vm_1_1VMFrame_1a583dcf6c0ed3f3d2916679382c7a0775" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VMFrame</scope><name>register_file</name></member>
      <member refid="structtvm_1_1runtime_1_1vm_1_1VMFrame_1a8f8c990ee4fa7cb7472f5440f2ca3bde" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VMFrame</scope><name>VMFrame</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
