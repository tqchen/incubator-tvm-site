<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1arith_1_1IntSet" kind="class" language="C++" prot="public">
    <compoundname>tvm::arith::IntSet</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ObjectRef</basecompoundref>
    <includes refid="int__set_8h" local="no">int_set.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1a94870e317c0fe710b6aab013df335fb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::arith::IntSet::IntSet</definition>
        <argsstring>()</argsstring>
        <name>IntSet</name>
        <briefdescription>
<para>constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="73" column="1" bodyfile="include/tvm/arith/int_set.h" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1a0d9b20e40ac72352647969cc1430b881" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::arith::IntSet::IntSet</definition>
        <argsstring>(ObjectPtr&lt; Object &gt; n)</argsstring>
        <name>IntSet</name>
        <param>
          <type>ObjectPtr&lt; Object &gt;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="75" column="1" bodyfile="include/tvm/arith/int_set.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1aaea2d5a2e766abae102bf56f3ee5ec35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtvm_1_1arith_1_1IntSetNode" kindref="compound">IntSetNode</ref> *</type>
        <definition>const IntSetNode* tvm::arith::IntSet::operator-&gt;</definition>
        <argsstring>() const </argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>access the internal node container </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the pointer to the internal node container </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="80" column="1" bodyfile="include/tvm/arith/int_set.h" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1a87331de8815851fcd10bf5e3b878062e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1Range" kindref="compound">Range</ref></type>
        <definition>Range tvm::arith::IntSet::cover_range</definition>
        <argsstring>(Range max_range) const </argsstring>
        <name>cover_range</name>
        <param>
          <type><ref refid="classtvm_1_1Range" kindref="compound">Range</ref></type>
          <declname>max_range</declname>
        </param>
        <briefdescription>
<para>Find a range that covers the region. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range to be covered. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The covering range. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1ab4b94806a72afc801f392b6c1e09b2bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::arith::IntSet::min</definition>
        <argsstring>() const </argsstring>
        <name>min</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Lower bound of the set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1afc04d6fd5d46def5dff8f69d344df107" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::arith::IntSet::max</definition>
        <argsstring>() const </argsstring>
        <name>max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>upper bound of the set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1a360733fbb5026aa3b451c948447cf868" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::arith::IntSet::is_nothing</definition>
        <argsstring>() const </argsstring>
        <name>is_nothing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the set represent nothing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1a76915ad1257dba46982dca412164193a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::arith::IntSet::is_everything</definition>
        <argsstring>() const </argsstring>
        <name>is_everything</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the set represent everything </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1a2a8851c9c9d80dc4fef43919f069e828" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::arith::IntSet::is_single_point</definition>
        <argsstring>() const </argsstring>
        <name>is_single_point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the set is a single point </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1a217b7d0c997ecd1752b590778f4ea8fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::arith::IntSet::can_prove_positive</definition>
        <argsstring>() const </argsstring>
        <name>can_prove_positive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the set is proved to be bigger than 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1a407b23e6a7ab7af70aba0ba77eaec218" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::arith::IntSet::can_prove_negative</definition>
        <argsstring>() const </argsstring>
        <name>can_prove_negative</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the set is proved to be smaller than 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1a4d56a12f7d192e5b739f83999ab4ccc3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::arith::IntSet::can_prove_non_positive</definition>
        <argsstring>() const </argsstring>
        <name>can_prove_non_positive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the set is proved to be smaller than or equal to 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1a70785e828279d810ec4d34137cd588cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::arith::IntSet::can_prove_non_negative</definition>
        <argsstring>() const </argsstring>
        <name>can_prove_non_negative</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the set is proved to be larger than or equal to 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1a36d9ef554088056be1ce517f1ceea3f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1arith_1aca8806e355ad3dd5f1df9c1eca9aac9d" kindref="member">SignType</ref></type>
        <definition>SignType tvm::arith::IntSet::sign_type</definition>
        <argsstring>() const </argsstring>
        <name>sign_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The sign of the elements in the integer set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1a0c8ce073360823084109d976721174b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::arith::IntSet::point_value</definition>
        <argsstring>() const </argsstring>
        <name>point_value</name>
        <briefdescription>
<para>The single point value, call only if is_single_point is true. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The point value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1af6b303660c7d2bf53f48716c9c8f9abe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::arith::IntSet::match_range</definition>
        <argsstring>(const Range &amp;r) const </argsstring>
        <name>match_range</name>
        <param>
          <type>const <ref refid="classtvm_1_1Range" kindref="compound">Range</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Try to match <ref refid="classtvm_1_1arith_1_1IntSet" kindref="compound">IntSet</ref> with range r. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>It is guanrateed that IntSet::range(r).match_range(r) == true </para></simplesect>
<simplesect kind="return"><para>true if we can prove they are the same. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="120" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1a5c4cd4c999b14280a237c0afd3360aca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1arith_1_1IntSet" kindref="compound">IntSet</ref></type>
        <definition>static IntSet tvm::arith::IntSet::nothing</definition>
        <argsstring>()</argsstring>
        <name>nothing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The set contains nothing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1aaeffa7a1eb404803a88c5be3ca705090" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1arith_1_1IntSet" kindref="compound">IntSet</ref></type>
        <definition>static IntSet tvm::arith::IntSet::everything</definition>
        <argsstring>()</argsstring>
        <name>everything</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The set contains everything </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1aa6c7870804e1603736ae6c76d7179c6a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1arith_1_1IntSet" kindref="compound">IntSet</ref></type>
        <definition>static IntSet tvm::arith::IntSet::single_point</definition>
        <argsstring>(PrimExpr point)</argsstring>
        <name>single_point</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>construct a point set. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>The point in the set. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>construct a single point set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1a3f8837f5cbe28739550a528214eb91c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1arith_1_1IntSet" kindref="compound">IntSet</ref></type>
        <definition>static IntSet tvm::arith::IntSet::vector</definition>
        <argsstring>(PrimExpr vec)</argsstring>
        <name>vector</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>construct a integer set from vector expression. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector expression, can also be single point. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result set containing the indices in the vector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1afad6e9a1b54e9aa2b35c56cc9ebef168" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1arith_1_1IntSet" kindref="compound">IntSet</ref></type>
        <definition>static IntSet tvm::arith::IntSet::range</definition>
        <argsstring>(Range r)</argsstring>
        <name>range</name>
        <param>
          <type><ref refid="classtvm_1_1Range" kindref="compound">Range</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Construct a set representing a range. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The range </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constructed set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1IntSet_1a56454f692fb041e6b51544c4f84f1420" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1arith_1_1IntSet" kindref="compound">IntSet</ref></type>
        <definition>static IntSet tvm::arith::IntSet::interval</definition>
        <argsstring>(PrimExpr min, PrimExpr max)</argsstring>
        <name>interval</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>min</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Construct a set representing a interval. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum value of the interval. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum value of the interval. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constructed set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/int_set.h" line="149" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Managed reference to <ref refid="classtvm_1_1arith_1_1IntSetNode" kindref="compound">IntSetNode</ref>. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classtvm_1_1arith_1_1IntSetNode" kindref="compound">IntSetNode</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="5425">
        <label>ObjectRef</label>
      </node>
      <node id="5424">
        <label>tvm::arith::IntSet</label>
        <link refid="classtvm_1_1arith_1_1IntSet"/>
        <childnode refid="5425" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5427">
        <label>ObjectRef</label>
      </node>
      <node id="5426">
        <label>tvm::arith::IntSet</label>
        <link refid="classtvm_1_1arith_1_1IntSet"/>
        <childnode refid="5427" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tvm/arith/int_set.h" line="70" column="1" bodyfile="include/tvm/arith/int_set.h" bodystart="70" bodyend="150"/>
    <listofallmembers>
      <member refid="classtvm_1_1arith_1_1IntSet_1a407b23e6a7ab7af70aba0ba77eaec218" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>can_prove_negative</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1a70785e828279d810ec4d34137cd588cf" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>can_prove_non_negative</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1a4d56a12f7d192e5b739f83999ab4ccc3" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>can_prove_non_positive</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1a217b7d0c997ecd1752b590778f4ea8fb" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>can_prove_positive</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1a87331de8815851fcd10bf5e3b878062e" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>cover_range</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1aaeffa7a1eb404803a88c5be3ca705090" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>everything</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1a56454f692fb041e6b51544c4f84f1420" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>interval</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1a94870e317c0fe710b6aab013df335fb4" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>IntSet</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1a0d9b20e40ac72352647969cc1430b881" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>IntSet</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1a76915ad1257dba46982dca412164193a" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>is_everything</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1a360733fbb5026aa3b451c948447cf868" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>is_nothing</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1a2a8851c9c9d80dc4fef43919f069e828" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>is_single_point</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1af6b303660c7d2bf53f48716c9c8f9abe" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>match_range</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1afc04d6fd5d46def5dff8f69d344df107" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>max</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1ab4b94806a72afc801f392b6c1e09b2bd" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>min</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1a5c4cd4c999b14280a237c0afd3360aca" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>nothing</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1aaea2d5a2e766abae102bf56f3ee5ec35" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>operator-&gt;</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1a0c8ce073360823084109d976721174b5" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>point_value</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1afad6e9a1b54e9aa2b35c56cc9ebef168" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>range</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1a36d9ef554088056be1ce517f1ceea3f1" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>sign_type</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1aa6c7870804e1603736ae6c76d7179c6a" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>single_point</name></member>
      <member refid="classtvm_1_1arith_1_1IntSet_1a3f8837f5cbe28739550a528214eb91c6" prot="public" virt="non-virtual"><scope>tvm::arith::IntSet</scope><name>vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
