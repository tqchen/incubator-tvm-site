<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespacetvm_1_1tir_1_1intrinsic" kind="namespace" language="C++">
    <compoundname>tvm::tir::intrinsic</compoundname>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9" prot="public" static="no">
        <name>TVMStructFieldKind</name>
        <enumvalue id="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9a4db7d8a5cd05d94fe63484b1a6a5f41e" prot="public">
          <name>kArrAddr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9ac4fd2e6f182e390a5f12bc0b86a7bdde" prot="public">
          <name>kArrData</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9abd1c578a1b9382f7641e57d47cc0fef5" prot="public">
          <name>kArrShape</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9a316dc2fac47b891f4a7cd4f6f1e2ea9c" prot="public">
          <name>kArrStrides</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9a6848c5265a37e6d8ff900962cffd24f9" prot="public">
          <name>kArrNDim</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9a754ca8d37cdfbcbc5969782b86ca9e62" prot="public">
          <name>kArrTypeCode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9a794b84c54e74f7eb76c55c8b757cb07a" prot="public">
          <name>kArrTypeBits</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9a5d44e05899072b51faf77feef33a17e4" prot="public">
          <name>kArrTypeLanes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9aace077df8be29cbf09dffeccb9c87361" prot="public">
          <name>kArrByteOffset</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9a7010568a29d2c4672120433c51af8867" prot="public">
          <name>kArrDeviceId</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9a34a8c297dd601e3a693d8b4ad1268a12" prot="public">
          <name>kArrDeviceType</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9ad68bd1fb79d2f15de845fa682fea01c0" prot="public">
          <name>kArrKindBound_</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9ac6ce092b04c704569325ff038a18eaf7" prot="public">
          <name>kTVMValueContent</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9ac87458c0fb42f635a949331c07da6b58" prot="public">
          <name>kTVMValueKindBound_</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The kind of structure field info used in intrinsic. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1562" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1562" bodyend="1579"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1abdf19f5eab40c9dbc4952e76a29bd49c" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_large_uint_imm</definition>
        <argsstring></argsstring>
        <name>tvm_large_uint_imm</name>
        <initializer>= &quot;tvm_large_uint_imm&quot;</initializer>
        <briefdescription>
<para>See pesudo code. </para>        </briefdescription>
        <detaileddescription>
<para>Construct a big uint that may not be representable by int64</para><para>Expr tvm_large_uint_imm(uint32_t v0, uin32_t v1) { return (v1 &lt;&lt; 32) | v0; } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1270" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a58cdd60cdf71a2b97109804ae5c9c78a" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_address_of</definition>
        <argsstring></argsstring>
        <name>tvm_address_of</name>
        <initializer>= &quot;tvm_address_of&quot;</initializer>
        <briefdescription>
<para>See pesudo code. </para>        </briefdescription>
        <detaileddescription>
<para>Handle tvm_address_of(Load *op) { return &amp;op-&gt;buffer_var[index]; } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1278" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1acbd194e010059c3229f6db9809e77e5a" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_if_then_else</definition>
        <argsstring></argsstring>
        <name>tvm_if_then_else</name>
        <initializer>= &quot;tvm_if_then_else&quot;</initializer>
        <briefdescription>
<para>Same as select, used for unsafe memory access. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classtvm_1_1Type" kindref="compound">Type</ref> tvm_if_then_else(cond, a, b) { return cond ? a : b; } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1286" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a9606b4e3a5d65a1ef787969074340be1" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_access_ptr</definition>
        <argsstring></argsstring>
        <name>tvm_access_ptr</name>
        <initializer>= &quot;tvm_access_ptr&quot;</initializer>
        <briefdescription>
<para>Get head access address with memory access pattern info. </para>        </briefdescription>
        <detaileddescription>
<para>This operator also marks range of the memory access The offset and extent are in unit of the DType(including vectorization factor). rw_mask is a bit_mask setting whether the access is a read(1) or write(2). The access is assume to happen in the current expression.</para><para>PtrType tvm_access_ptr(Expr dtype, DType* data, int offset, int extent, int rw_mask) { // DType == dtype.type(); return &amp;data[offset]; } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1302" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a075f340d77d7e0b8b60616fe5e64d2cc" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_static_handle</definition>
        <argsstring></argsstring>
        <name>tvm_static_handle</name>
        <initializer>= &quot;tvm_static_handle&quot;</initializer>
        <briefdescription>
<para>Create a function local static handle that iniitalizes to nullptr. can be used to cache function local static resources. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1307" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1af3a86e8446b1f2b078597cb7cdadfbff" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_context_id</definition>
        <argsstring></argsstring>
        <name>tvm_context_id</name>
        <initializer>= &quot;tvm_context_id&quot;</initializer>
        <briefdescription>
<para>Return a unique context id, used for hint of workspace separation. Different context id ganrantees not having overlapping workspace. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1312" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a19fa5d609f7ae416ede0eb14f1b4b165" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_tuple</definition>
        <argsstring></argsstring>
        <name>tvm_tuple</name>
        <initializer>= &quot;tvm_tuple&quot;</initializer>
        <briefdescription>
<para>tvm_tuple is not an actual function and cannot codegen. It is used to represent tuple structure in value field of AttrStmt, for the sake of giving hint to optimization. </para>        </briefdescription>
        <detaileddescription>
<para>Handle tvm_tuple(value0, value1, ..., value_n); </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1320" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1aba1b46cdb01d149f49d6676b889142b5" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_struct_get</definition>
        <argsstring></argsstring>
        <name>tvm_struct_get</name>
        <initializer>= &quot;tvm_struct_get&quot;</initializer>
        <briefdescription>
<para>See pesudo code. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classtvm_1_1Type" kindref="compound">Type</ref> tvm_struct_get(StructType* arr, int index, int field_id) { return arr[index]-&gt;field; } <simplesect kind="see"><para><ref refid="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9" kindref="member">TVMStructFieldKind</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1329" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a2857ab6a0557554feee6e21dbd37eab9" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_struct_set</definition>
        <argsstring></argsstring>
        <name>tvm_struct_set</name>
        <initializer>= &quot;tvm_struct_set&quot;</initializer>
        <briefdescription>
<para>See pesudo code. </para>        </briefdescription>
        <detaileddescription>
<para>Handle tvm_struct_set(StructType* arr, int index, int field_id, value) { arr[index]-&gt;field = value; } <simplesect kind="see"><para><ref refid="namespacetvm_1_1tir_1_1intrinsic_1a7aee573af86b33b88d123fc26a40cdd9" kindref="member">TVMStructFieldKind</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1338" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1ab5761917c5bd5b727203ddbc84763423" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_handle_is_null</definition>
        <argsstring></argsstring>
        <name>tvm_handle_is_null</name>
        <initializer>= &quot;tvm_handle_is_null&quot;</initializer>
        <briefdescription>
<para>See pesudo code. </para>        </briefdescription>
        <detaileddescription>
<para>bool tvm_handle_is_null(void* handle) { return handle == nullptr } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1346" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1ad86e388d33768f6641d60a2e1d142cbb" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_throw_last_error</definition>
        <argsstring></argsstring>
        <name>tvm_throw_last_error</name>
        <initializer>= &quot;tvm_throw_last_error&quot;</initializer>
        <briefdescription>
<para>See pesudo code. </para>        </briefdescription>
        <detaileddescription>
<para>void <ref refid="namespacetvm_1_1tir_1_1intrinsic_1ad86e388d33768f6641d60a2e1d142cbb" kindref="member">tvm_throw_last_error()</ref> { throw <ref refid="c__runtime__api_8h_1a775383bcd8c0237e36bdf0c9654d62c3" kindref="member">TVMGetLastError()</ref>; } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1354" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a204b4be973bdf3e0c82f56a1273752bb" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_stack_alloca</definition>
        <argsstring></argsstring>
        <name>tvm_stack_alloca</name>
        <initializer>= &quot;tvm_stack_alloca&quot;</initializer>
        <briefdescription>
<para>See pesudo code. </para>        </briefdescription>
        <detaileddescription>
<para>dtype in {shape, array, arg_value, arg_tcode}</para><para>Handle tvm_stack_alloca(string dtype, int num) { return new on stack dtype[num]; } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1364" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1aab2d9941d781b4b5bb399cffb9488fd6" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_stack_make_shape</definition>
        <argsstring></argsstring>
        <name>tvm_stack_make_shape</name>
        <initializer>= &quot;tvm_stack_make_shape&quot;</initializer>
        <briefdescription>
<para>Allocate a shape tuple on stack, return the handle. </para>        </briefdescription>
        <detaileddescription>
<para>Handle tvm_stack_make_shape(list args) { ret = alloca stack int64_t[len(args)]; for i in range(len(args)): ret[i] = args[i] return &amp;ret[0]; } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1375" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1ab210d3708ad9206af139d76f29727ab4" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_stack_make_array</definition>
        <argsstring></argsstring>
        <name>tvm_stack_make_array</name>
        <initializer>= &quot;tvm_stack_make_array&quot;</initializer>
        <briefdescription>
<para>Allocate a NDArray(DLTensor) on stack, return the handle. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classtvm_1_1Type" kindref="compound">Type</ref> tvm_stack_make_array(Expr data, Expr shape, Expr strides, Expr ndim, Expr dtype, Expr elem_offset) { ret = alloca stack DLTensor(); ret-&gt;data = data; ret-&gt;shape = shape; ret-&gt;strides = strides != 0 ? strides : nullptr; ret-&gt;ndim = ndim; ret-&gt;dtype = dtype.type(); ret-&gt;byte_offset = elem_offset * sizeof(dtype); return ret; } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1395" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1ac49ed1daf574a2544c8d3cbe3110d6c9" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_call_packed</definition>
        <argsstring></argsstring>
        <name>tvm_call_packed</name>
        <initializer>= &quot;tvm_call_packed&quot;</initializer>
        <briefdescription>
<para>See pesudo code. </para>        </briefdescription>
        <detaileddescription>
<para>int tvm_call_packed(name, TVMValue* args) { ModuleNode* env = GetCurrentEnv(); const PackedFunc* f = env-&gt;GetFuncFromEnv(name); (*f)(args, type_code_of(args), len(args)); return 0; } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1406" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a7127f9ff70e7e124403e6a22de1a82f3" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_call_trace_packed</definition>
        <argsstring></argsstring>
        <name>tvm_call_trace_packed</name>
        <initializer>= &quot;tvm_call_trace_packed&quot;</initializer>
        <briefdescription>
<para>See pesudo code. </para>        </briefdescription>
        <detaileddescription>
<para>int tvm_call_trace_packed(name, TVMValue* args) { ModuleNode* env = GetCurrentEnv(); const PackedFunc* f = env-&gt;GetFuncFromEnv(name); (*f)(args, type_code_of(args), len(args)); return 0; } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1417" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a3480cec5a6cf03c2cc894d6f889d1f39" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_thread_context</definition>
        <argsstring></argsstring>
        <name>tvm_thread_context</name>
        <initializer>= &quot;tvm_thread_context&quot;</initializer>
        <briefdescription>
<para>See pesudo code Mark the content as thread local context, can get optimized by only call the call once at thread start. </para>        </briefdescription>
        <detaileddescription>
<para>Do not allow nesting(getting a thread context from another).</para><para>Handle tvm_thread_context(Expr call) { return call; } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1429" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1ad1044b04b108f8d72d8468c7df8a426f" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_call_packed_lowered</definition>
        <argsstring></argsstring>
        <name>tvm_call_packed_lowered</name>
        <initializer>= &quot;tvm_call_packed_lowered&quot;</initializer>
        <briefdescription>
<para>Lowered version of call packed, the space of value and type codes are explicitly allocated. </para>        </briefdescription>
        <detaileddescription>
<para>int tvm_call_packed_lowered(name, TVMValue* value_stack, int* tcode_stack, int begin, int end) { ModuleNode* env = GetCurrentEnv(); const PackedFunc* f = env-&gt;GetFuncFromEnv(name); f-&gt;CallPacked(TVMArgs(value_stack[begin:end], tcode_stack[begin:end]), TVMRetValue(value_stack + end, tcode_stack + end)); } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1446" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1ad906c61d3e4610e103d5fee028e6147f" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_call_trace_packed_lowered</definition>
        <argsstring></argsstring>
        <name>tvm_call_trace_packed_lowered</name>
        <initializer>=
    &quot;tvm_call_trace_packed_lowered&quot;</initializer>
        <briefdescription>
<para>Lowered version of trace intrinsic, the space of value and type codes are explicitly allocated. The return value is the (end - 1) value on the stack. </para>        </briefdescription>
        <detaileddescription>
<para>int tvm_call_trace_packed_lowered(name, TVMValue* value_stack, int* tcode_stack, int begin, int end) { ModuleNode* env = GetCurrentEnv(); const PackedFunc* f = env-&gt;GetFuncFromEnv(name); f-&gt;CallPacked(TVMArgs(value_stack[begin:end], tcode_stack[begin:end]), TVMRetValue(value_stack + end, tcode_stack + end)); } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1464" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a327df78182d6687b72a93c468a3cd962" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_storage_sync</definition>
        <argsstring></argsstring>
        <name>tvm_storage_sync</name>
        <initializer>= &quot;tvm_storage_sync&quot;</initializer>
        <briefdescription>
<para>See pseudo code. </para>        </briefdescription>
        <detaileddescription>
<para>int tvm_storage_sync(std::string storage_scope) { __sync(storage_scope); return 0; } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1474" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a1c5047acaa6e7e500840f9a1984f4e58" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_warp_shuffle</definition>
        <argsstring></argsstring>
        <name>tvm_warp_shuffle</name>
        <initializer>= &quot;tvm_warp_shuffle&quot;</initializer>
        <briefdescription>
<para>See pseudo code. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classtvm_1_1Type" kindref="compound">Type</ref> tvm_warp_shuffle(Type value, warp_id) { return (value passed in by warp indicated by warp_id); } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1482" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1482" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a7ccada41188e0161827169ce24a6db16" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_global_barrier_kinit</definition>
        <argsstring></argsstring>
        <name>tvm_global_barrier_kinit</name>
        <initializer>= &quot;tvm_global_barrier_kinit&quot;</initializer>
        <briefdescription>
<para>Initialize the global barrier. Call this at beginning of kernel that need global barrier. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1487" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a374a98c3ef9da28a660825a0457ae997" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_thread_allreduce</definition>
        <argsstring></argsstring>
        <name>tvm_thread_allreduce</name>
        <initializer>= &quot;tvm_thread_allreduce&quot;</initializer>
        <briefdescription>
<para>See pesudo code. </para>        </briefdescription>
        <detaileddescription>
<para>void tvm_thread_allreduce(UIntImm size, Expr source0, ..., Expr cond, <ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> reduce_temp0, .., <ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> thread_idx1, ...) { // constraint by the other thread_idx remain the same. // reduce_temp is used to save intermediate result. reduce_temp0, ... = reduce(combiner, source0, ..., cond over [thread_idx1, thread_idx2] passed by any caller) } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1499" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a8ec923ea4f1dad1fbbd4962684bd9b51" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_load_matrix_sync</definition>
        <argsstring></argsstring>
        <name>tvm_load_matrix_sync</name>
        <initializer>= &quot;tvm_load_matrix_sync&quot;</initializer>
        <briefdescription>
<para>tvm intrinsic for tensor core load operators. </para>        </briefdescription>
        <detaileddescription>
<para>void tvm_load_matrix_sync(<ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> fragment, UIntImm m, UIntImm, n, UIntImm k, Expr index, Expr buffer_ptr, Expr stride, <ref refid="classtvm_1_1tir_1_1StringImm" kindref="compound">StringImm</ref> layout) { // m, n, k are the shape of wmma fragment. // Determine fragment layout(column-major or row major) by layout. // fragments must be in &apos;wmma.matrix_a&apos; or &apos;wmma.matrix_b&apos; scope. nvcuda::wmma::load_matrix_sync(fragment[index], buffer_ptr, stride); } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1512" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1aa78302097030bd1c144b826db84defdc" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_mma_sync</definition>
        <argsstring></argsstring>
        <name>tvm_mma_sync</name>
        <initializer>= &quot;tvm_mma_sync&quot;</initializer>
        <briefdescription>
<para>tvm intrinsic for tensor core mma_sync operators. </para>        </briefdescription>
        <detaileddescription>
<para>void tvm_mma_sync(<ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> fragment_d, Expr index_d, <ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> fragment_a, Expr index_a, <ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> fragment_b, Expr index_b, <ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> fragment_c, Expr index_c) { nvcuda::wmma::mma_sync(fragment_d[index_d], fragment_a[index_a], fragment_b[index_b], fragment_c[index_c]); } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1524" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a4d1287729e05d683af059be0faaf9014" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_bmma_sync</definition>
        <argsstring></argsstring>
        <name>tvm_bmma_sync</name>
        <initializer>= &quot;tvm_bmma_sync&quot;</initializer>
        <briefdescription>
<para>tvm intrinsic for tensor core bmma_sync operators. </para>        </briefdescription>
        <detaileddescription>
<para>void tvm_bmma_sync(<ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> fragment_d, Expr index_d, <ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> fragment_a, Expr index_a, <ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> fragment_b, Expr index_b, <ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> fragment_c, Expr index_c) { nvcuda::wmma::bmma_sync(fragment_d[index_d], fragment_a[index_a], fragment_b[index_b], fragment_c[index_c]); } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1536" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a6c0862848e3eb5b6972c76f0b27585f9" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_fill_fragment</definition>
        <argsstring></argsstring>
        <name>tvm_fill_fragment</name>
        <initializer>= &quot;tvm_fill_fragment&quot;</initializer>
        <briefdescription>
<para>tvm intrinsic for tensor core fill_fragment operators. </para>        </briefdescription>
        <detaileddescription>
<para>void tvm_fill_fragment(<ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> fragment, UIntImm m, UIntImm, n, UIntImm k, Expr index, Expr value) { // m, n, k are the shape of wmma fragment // fragments must be in &apos;wmma.accumulator&apos; scope. nvcuda::wmma::fill_fragment(fragment[index], value); } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1547" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1547" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetvm_1_1tir_1_1intrinsic_1a3127cfee7b97ef7182019e69b7a3eb78" prot="public" static="no" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::intrinsic::tvm_store_matrix_sync</definition>
        <argsstring></argsstring>
        <name>tvm_store_matrix_sync</name>
        <initializer>= &quot;tvm_store_matrix_sync&quot;</initializer>
        <briefdescription>
<para>tvm intrinsic for tensor core store operators. </para>        </briefdescription>
        <detaileddescription>
<para>void tvm_store_matrix_sync(<ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> fragment, UIntImm m, UIntImm, n, UIntImm k, Expr index, Expr buffer_ptr, Expr stride, <ref refid="classtvm_1_1tir_1_1StringImm" kindref="compound">StringImm</ref> layout) { // m, n, k are the shape of wmma fragment // fragments must be in &apos;wmma.accumulator&apos; scope. nvcuda::wmma::store_matrix_sync(fragment[index], buffer_ptr, stride, layout); } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1559" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1559" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>namespace of TVM Intrinsic functions </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/tvm/tir/expr.h" line="1260" column="1"/>
  </compounddef>
</doxygen>
