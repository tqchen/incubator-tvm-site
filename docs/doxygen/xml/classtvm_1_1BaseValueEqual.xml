<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1BaseValueEqual" kind="class" language="C++" prot="public">
    <compoundname>tvm::BaseValueEqual</compoundname>
    <derivedcompoundref refid="classtvm_1_1SEqualReducer" prot="public" virt="non-virtual">tvm::SEqualReducer</derivedcompoundref>
    <derivedcompoundref refid="classtvm_1_1StructuralEqual" prot="public" virt="non-virtual">tvm::StructuralEqual</derivedcompoundref>
    <includes refid="structural__equal_8h" local="no">structural_equal.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1BaseValueEqual_1a5bcd390efea36f5ea22ea88c2b49d0e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::BaseValueEqual::operator()</definition>
        <argsstring>(const double &amp;lhs, const double &amp;rhs) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const double &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="38" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="38" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1BaseValueEqual_1a64a27662996232361171c0b83ef64efc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::BaseValueEqual::operator()</definition>
        <argsstring>(const int64_t &amp;lhs, const int64_t &amp;rhs) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const int64_t &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const int64_t &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="46" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1BaseValueEqual_1aa073e7b407abe9736f3dfc82b1d17dfe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::BaseValueEqual::operator()</definition>
        <argsstring>(const uint64_t &amp;lhs, const uint64_t &amp;rhs) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const uint64_t &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const uint64_t &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="49" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1BaseValueEqual_1a2d2542641197aa4f5d6e00dd826c41fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::BaseValueEqual::operator()</definition>
        <argsstring>(const int &amp;lhs, const int &amp;rhs) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const int &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="52" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1BaseValueEqual_1ad3272aa40535658ca5dd8658e392ba91" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::BaseValueEqual::operator()</definition>
        <argsstring>(const bool &amp;lhs, const bool &amp;rhs) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const bool &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="55" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1BaseValueEqual_1a70b32b6f7a8c60f754ed8dd945030bbb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::BaseValueEqual::operator()</definition>
        <argsstring>(const std::string &amp;lhs, const std::string &amp;rhs) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="58" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1BaseValueEqual_1a76b682e3ea647fae4e0da9651674417a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::BaseValueEqual::operator()</definition>
        <argsstring>(const DataType &amp;lhs, const DataType &amp;rhs) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="61" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1BaseValueEqual_1a384fdf8cfd26188b4ec6febae8e698df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ENum</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_enum&lt;ENum&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tvm::BaseValueEqual::operator()</definition>
        <argsstring>(const ENum &amp;lhs, const ENum &amp;rhs) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const ENum &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const ENum &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="66" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="66" bodyend="68"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Equality definition of base value class. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4378">
        <label>tvm::SEqualReducer</label>
        <link refid="classtvm_1_1SEqualReducer"/>
        <childnode refid="4377" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4377">
        <label>tvm::BaseValueEqual</label>
        <link refid="classtvm_1_1BaseValueEqual"/>
      </node>
      <node id="4379">
        <label>tvm::StructuralEqual</label>
        <link refid="classtvm_1_1StructuralEqual"/>
        <childnode refid="4377" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4380">
        <label>tvm::BaseValueEqual</label>
        <link refid="classtvm_1_1BaseValueEqual"/>
      </node>
    </collaborationgraph>
    <location file="include/tvm/node/structural_equal.h" line="36" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="36" bodyend="69"/>
    <listofallmembers>
      <member refid="classtvm_1_1BaseValueEqual_1a5bcd390efea36f5ea22ea88c2b49d0e4" prot="public" virt="non-virtual"><scope>tvm::BaseValueEqual</scope><name>operator()</name></member>
      <member refid="classtvm_1_1BaseValueEqual_1a64a27662996232361171c0b83ef64efc" prot="public" virt="non-virtual"><scope>tvm::BaseValueEqual</scope><name>operator()</name></member>
      <member refid="classtvm_1_1BaseValueEqual_1aa073e7b407abe9736f3dfc82b1d17dfe" prot="public" virt="non-virtual"><scope>tvm::BaseValueEqual</scope><name>operator()</name></member>
      <member refid="classtvm_1_1BaseValueEqual_1a2d2542641197aa4f5d6e00dd826c41fa" prot="public" virt="non-virtual"><scope>tvm::BaseValueEqual</scope><name>operator()</name></member>
      <member refid="classtvm_1_1BaseValueEqual_1ad3272aa40535658ca5dd8658e392ba91" prot="public" virt="non-virtual"><scope>tvm::BaseValueEqual</scope><name>operator()</name></member>
      <member refid="classtvm_1_1BaseValueEqual_1a70b32b6f7a8c60f754ed8dd945030bbb" prot="public" virt="non-virtual"><scope>tvm::BaseValueEqual</scope><name>operator()</name></member>
      <member refid="classtvm_1_1BaseValueEqual_1a76b682e3ea647fae4e0da9651674417a" prot="public" virt="non-virtual"><scope>tvm::BaseValueEqual</scope><name>operator()</name></member>
      <member refid="classtvm_1_1BaseValueEqual_1a384fdf8cfd26188b4ec6febae8e698df" prot="public" virt="non-virtual"><scope>tvm::BaseValueEqual</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
