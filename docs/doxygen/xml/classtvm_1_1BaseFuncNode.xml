<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1BaseFuncNode" kind="class" language="C++" prot="public">
    <compoundname>tvm::BaseFuncNode</compoundname>
    <basecompoundref refid="classtvm_1_1RelayExprNode" prot="public" virt="non-virtual">tvm::RelayExprNode</basecompoundref>
    <derivedcompoundref refid="classtvm_1_1relay_1_1FunctionNode" prot="public" virt="non-virtual">tvm::relay::FunctionNode</derivedcompoundref>
    <derivedcompoundref refid="classtvm_1_1tir_1_1PrimFuncNode" prot="public" virt="non-virtual">tvm::tir::PrimFuncNode</derivedcompoundref>
    <includes refid="ir_2function_8h" local="no">function.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classtvm_1_1BaseFuncNode_1a4fd1a615179d1eb5748990e5de46d668" prot="public" static="no" mutable="no">
        <type><ref refid="classtvm_1_1DictAttrs" kindref="compound">DictAttrs</ref></type>
        <definition>DictAttrs tvm::BaseFuncNode::attrs</definition>
        <argsstring></argsstring>
        <name>attrs</name>
        <briefdescription>
<para>Additional attributes storing the meta-data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/function.h" line="77" column="1" bodyfile="include/tvm/ir/function.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classtvm_1_1BaseFuncNode_1af656e6ccc286ca59e8932f2a2b2f14c1" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::BaseFuncNode::_type_key</definition>
        <argsstring></argsstring>
        <name>_type_key</name>
        <initializer>= &quot;BaseFunc&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/function.h" line="135" column="1" bodyfile="include/tvm/ir/function.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1BaseFuncNode_1a6f177158609cf9da9a4e0a9d3187e3d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TObjectRef</type>
          </param>
        </templateparamlist>
        <type>TObjectRef</type>
        <definition>TObjectRef tvm::BaseFuncNode::GetAttr</definition>
        <argsstring>(const std::string &amp;attr_key, TObjectRef default_value=NullValue&lt; TObjectRef &gt;()) const </argsstring>
        <name>GetAttr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>attr_key</declname>
        </param>
        <param>
          <type>TObjectRef</type>
          <declname>default_value</declname>
          <defval><ref refid="namespacetvm_1ab6c242e8ac09beb463fba306948b7f15" kindref="member">NullValue</ref>&lt; TObjectRef &gt;()</defval>
        </param>
        <briefdescription>
<para>Get a function attribute. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The default value if the key does not exist, defaults to nullptr.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TOBjectRef</parametername>
</parameternamelist>
<parameterdescription>
<para>the expected object type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classtvm_1_1Error" kindref="compound">Error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the key exists but the value does not match TObjectRef</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">void<sp/>GetAttrExample(const<sp/>BaseFunc&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Integer<sp/>value<sp/>=<sp/>f-&gt;GetAttr&lt;Integer&gt;(&quot;AttrKey&quot;,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/function.h" line="99" column="1" bodyfile="include/tvm/ir/function.h" bodystart="99" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1BaseFuncNode_1a11694119d77e8d04a9fffd5e9a8b0766" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::BaseFuncNode::HasNonzeroAttr</definition>
        <argsstring>(const std::string &amp;attr_key) const </argsstring>
        <name>HasNonzeroAttr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>attr_key</declname>
        </param>
        <briefdescription>
<para>Check whether the function has an non-zero integer attr. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be used to check whether an optional attribute mark(e.g. inline) exists.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key to the attribute. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The check result.</para></simplesect>
<programlisting><codeline><highlight class="normal">void<sp/>HasNonzeroAttrExample(const<sp/>BaseFunc&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(f-&gt;HasNonzeroAttr(attr::kInline))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>inline<sp/>the<sp/>function.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/function.h" line="131" column="1" bodyfile="include/tvm/ir/function.h" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1BaseFuncNode_1a577e46c2eda9aec1f8a8e48444d00fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tvm::BaseFuncNode::TVM_DECLARE_BASE_OBJECT_INFO</definition>
        <argsstring>(BaseFuncNode, RelayExprNode)</argsstring>
        <name>TVM_DECLARE_BASE_OBJECT_INFO</name>
        <param>
          <type><ref refid="classtvm_1_1BaseFuncNode" kindref="compound">BaseFuncNode</ref></type>
        </param>
        <param>
          <type><ref refid="classtvm_1_1RelayExprNode" kindref="compound">RelayExprNode</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/function.h" line="136" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base node of all functions. </para>    </briefdescription>
    <detaileddescription>
<para>We support several variants of functions throughout the stack. All of the functions share the same type system(via checked_type) to support cross variant calls.</para><para><simplesect kind="see"><para><ref refid="classtvm_1_1BaseFunc" kindref="compound">BaseFunc</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="4348">
        <label>tvm::RelayExprNode</label>
        <link refid="classtvm_1_1RelayExprNode"/>
        <childnode refid="4349" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4349">
        <label>tvm::BaseExprNode</label>
        <link refid="classtvm_1_1BaseExprNode"/>
        <childnode refid="4350" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4351">
        <label>tvm::relay::FunctionNode</label>
        <link refid="classtvm_1_1relay_1_1FunctionNode"/>
        <childnode refid="4347" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4350">
        <label>Object</label>
      </node>
      <node id="4347">
        <label>tvm::BaseFuncNode</label>
        <link refid="classtvm_1_1BaseFuncNode"/>
        <childnode refid="4348" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4352">
        <label>tvm::tir::PrimFuncNode</label>
        <link refid="classtvm_1_1tir_1_1PrimFuncNode"/>
        <childnode refid="4347" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4358">
        <label>ObjectRef</label>
      </node>
      <node id="4354">
        <label>tvm::RelayExprNode</label>
        <link refid="classtvm_1_1RelayExprNode"/>
        <childnode refid="4355" relation="public-inheritance">
        </childnode>
        <childnode refid="4357" relation="usage">
          <edgelabel>+span</edgelabel>
        </childnode>
        <childnode refid="4359" relation="usage">
          <edgelabel>+checked_type_</edgelabel>
        </childnode>
      </node>
      <node id="4355">
        <label>tvm::BaseExprNode</label>
        <link refid="classtvm_1_1BaseExprNode"/>
        <childnode refid="4356" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4357">
        <label>tvm::Span</label>
        <link refid="classtvm_1_1Span"/>
        <childnode refid="4358" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4361">
        <label>tvm::Attrs</label>
        <link refid="classtvm_1_1Attrs"/>
        <childnode refid="4358" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4356">
        <label>Object</label>
      </node>
      <node id="4360">
        <label>tvm::DictAttrs</label>
        <link refid="classtvm_1_1DictAttrs"/>
        <childnode refid="4361" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4353">
        <label>tvm::BaseFuncNode</label>
        <link refid="classtvm_1_1BaseFuncNode"/>
        <childnode refid="4354" relation="public-inheritance">
        </childnode>
        <childnode refid="4360" relation="usage">
          <edgelabel>+attrs</edgelabel>
        </childnode>
      </node>
      <node id="4359">
        <label>tvm::Type</label>
        <link refid="classtvm_1_1Type"/>
        <childnode refid="4358" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tvm/ir/function.h" line="74" column="1" bodyfile="include/tvm/ir/function.h" bodystart="74" bodyend="137"/>
    <listofallmembers>
      <member refid="classtvm_1_1BaseExprNode_1a905dcf65204e877b6ccb977cf375f2a0" prot="public" virt="non-virtual"><scope>tvm::BaseFuncNode</scope><name>_type_has_method_sequal_reduce</name></member>
      <member refid="classtvm_1_1BaseExprNode_1a13d7d1f1e6f790951caf200cd59c3620" prot="public" virt="non-virtual"><scope>tvm::BaseFuncNode</scope><name>_type_has_method_shash_reduce</name></member>
      <member refid="classtvm_1_1BaseFuncNode_1af656e6ccc286ca59e8932f2a2b2f14c1" prot="public" virt="non-virtual"><scope>tvm::BaseFuncNode</scope><name>_type_key</name></member>
      <member refid="classtvm_1_1BaseFuncNode_1a4fd1a615179d1eb5748990e5de46d668" prot="public" virt="non-virtual"><scope>tvm::BaseFuncNode</scope><name>attrs</name></member>
      <member refid="classtvm_1_1RelayExprNode_1a89bfd23e109a842d18240277ffaaa130" prot="public" virt="non-virtual"><scope>tvm::BaseFuncNode</scope><name>checked_type</name></member>
      <member refid="classtvm_1_1RelayExprNode_1ae30ca49a8b84288fbc21d5f312f02929" prot="public" virt="non-virtual"><scope>tvm::BaseFuncNode</scope><name>checked_type_</name></member>
      <member refid="classtvm_1_1BaseFuncNode_1a6f177158609cf9da9a4e0a9d3187e3d2" prot="public" virt="non-virtual"><scope>tvm::BaseFuncNode</scope><name>GetAttr</name></member>
      <member refid="classtvm_1_1BaseFuncNode_1a11694119d77e8d04a9fffd5e9a8b0766" prot="public" virt="non-virtual"><scope>tvm::BaseFuncNode</scope><name>HasNonzeroAttr</name></member>
      <member refid="classtvm_1_1RelayExprNode_1a904ae50be0b72eab079bed93829c9563" prot="public" virt="non-virtual"><scope>tvm::BaseFuncNode</scope><name>span</name></member>
      <member refid="classtvm_1_1BaseFuncNode_1a577e46c2eda9aec1f8a8e48444d00fd2" prot="public" virt="non-virtual"><scope>tvm::BaseFuncNode</scope><name>TVM_DECLARE_BASE_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1RelayExprNode_1a89eb638258551ea1ae2d0e578335474a" prot="public" virt="non-virtual" ambiguityscope="tvm::RelayExprNode::"><scope>tvm::BaseFuncNode</scope><name>TVM_DECLARE_BASE_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1BaseExprNode_1a831794c879d47c30cdd9cefd4f05d533" prot="public" virt="non-virtual" ambiguityscope="tvm::BaseExprNode::"><scope>tvm::BaseFuncNode</scope><name>TVM_DECLARE_BASE_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1RelayExprNode_1a60c73bac632a728a2a669bb34a1c3008" prot="public" virt="non-virtual"><scope>tvm::BaseFuncNode</scope><name>type_as</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
