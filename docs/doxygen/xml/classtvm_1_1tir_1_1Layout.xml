<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1tir_1_1Layout" kind="class" language="C++" prot="public">
    <compoundname>tvm::tir::Layout</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ObjectRef</basecompoundref>
    <includes refid="data__layout_8h" local="no">data_layout.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtvm_1_1tir_1_1Layout_1a34e09318237c606d8e3dfd6267ae72b8" prot="public" static="no">
        <type><ref refid="classtvm_1_1tir_1_1LayoutNode" kindref="compound">LayoutNode</ref></type>
        <definition>using tvm::tir::Layout::ContainerType =  LayoutNode</definition>
        <argsstring></argsstring>
        <name>ContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="310" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1abf3ba7ad67d43133c8f4f9beb21edf32" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::tir::Layout::Layout</definition>
        <argsstring>(ObjectPtr&lt; Object &gt; n)</argsstring>
        <name>Layout</name>
        <param>
          <type>ObjectPtr&lt; Object &gt;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="131" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1a585c5a7813852d9741a7a739c4e2cbad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tvm::tir::Layout::Layout</definition>
        <argsstring>()=default</argsstring>
        <name>Layout</name>
        <briefdescription>
<para>default constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1ace4d6c608f7148bb2c6aefe33b4e4ab5" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>tvm::tir::Layout::Layout</definition>
        <argsstring>(const Array&lt; tir::IterVar &gt; &amp;axes)</argsstring>
        <name>Layout</name>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">tir::IterVar</ref> &gt; &amp;</type>
          <declname>axes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1a11a8465c3cc562e408a48a7f0fd324fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::tir::Layout::Layout</definition>
        <argsstring>(const char *name)</argsstring>
        <name>Layout</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>construct from a string </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="139" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1a7cece4c969caab17658f4e70fa6a69e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tvm::tir::Layout::Layout</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>Layout</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>construct from a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>input in layout convention: upper case indicates a dimension and the corresponding lower case with factor size indicates the split dimension. return undefined layout if &quot;__undef__&quot; is passed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1aef6a0989eb7c1a0b9a0707a465cbaa9b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtvm_1_1tir_1_1LayoutNode" kindref="compound">LayoutNode</ref> *</type>
        <definition>const LayoutNode* tvm::tir::Layout::operator-&gt;</definition>
        <argsstring>() const </argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>access the internal node container </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the pointer to the internal node container </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="155" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1a24d1414e53ab3bd153942bf5de5402e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1tir_1_1LayoutNode" kindref="compound">LayoutNode</ref> *</type>
        <definition>LayoutNode* tvm::tir::Layout::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>access the internal node container </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the pointer to the internal node container </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="163" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1a506777d73f3b9e5ce24e4f4dfa4122b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1tir_1_1Layout" kindref="compound">Layout</ref></type>
        <definition>Layout tvm::tir::Layout::SubLayout</definition>
        <argsstring>(size_t pos, size_t len) const </argsstring>
        <name>SubLayout</name>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Returns a sub-layout which is the portion of the object that starts at dimension <computeroutput>pos</computeroutput> and spans <computeroutput>len</computeroutput> dimensions (or until the end of the layout, whichever comes first). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The start position. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the sub-layout. if 0, return layout of scalar </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly constructed <ref refid="classtvm_1_1tir_1_1Layout" kindref="compound">Layout</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1aba8612236310488f3a385bd8b139b914" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1tir_1_1Layout" kindref="compound">Layout</ref></type>
        <definition>Layout tvm::tir::Layout::Split</definition>
        <argsstring>(const LayoutAxis &amp;axis, size_t target_pos, int32_t factor) const </argsstring>
        <name>Split</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1LayoutAxis" kindref="compound">LayoutAxis</ref> &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>target_pos</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
<para>Split <computeroutput>axis</computeroutput> by <computeroutput>size</computeroutput> and put the sub-axis to position <computeroutput>target_pos</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The source axis to be split. It must be a primal-axis; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The target position of the newly split subordinate-axis. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the sub-dimension. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly constructed <ref refid="classtvm_1_1tir_1_1Layout" kindref="compound">Layout</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1a4bca97ce52386c053a442ff960581f92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tvm::tir::Layout::ndim</definition>
        <argsstring>() const </argsstring>
        <name>ndim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of dimensions </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="197" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="197" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1a2f983c2de370c89a9f0b12ebcf9fec0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tvm::tir::Layout::ndim_primal</definition>
        <argsstring>() const </argsstring>
        <name>ndim_primal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of super dimensions </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="203" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="203" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1a88c306ea4682d28b85032277fa29df63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1tir_1_1Layout" kindref="compound">Layout</ref></type>
        <definition>Layout tvm::tir::Layout::ExpandPrimal</definition>
        <argsstring>(const Layout &amp;dst_layout)</argsstring>
        <name>ExpandPrimal</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1Layout" kindref="compound">Layout</ref> &amp;</type>
          <declname>dst_layout</declname>
        </param>
        <briefdescription>
<para>Returns a new layout where the dims have been expanded to match the primal dimensions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst_layout</parametername>
</parameternamelist>
<parameterdescription>
<para>The dst layout to which current layout has to be expanded. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The expanded <ref refid="classtvm_1_1tir_1_1Layout" kindref="compound">Layout</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="219" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="219" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1a0fa224417a05bc774c6e4fc8093ca75a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t tvm::tir::Layout::IndexOf</definition>
        <argsstring>(const LayoutAxis &amp;axis) const </argsstring>
        <name>IndexOf</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1LayoutAxis" kindref="compound">LayoutAxis</ref> &amp;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>return the index of the input axis. If it is not found in the layout or the layout is undefined, return -1. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>the input axis. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the index or -1 if not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="243" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="243" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1ad1e29ab749a79562fb2f746ccc42adf1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t tvm::tir::Layout::FactorOf</definition>
        <argsstring>(const LayoutAxis &amp;axis) const </argsstring>
        <name>FactorOf</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1LayoutAxis" kindref="compound">LayoutAxis</ref> &amp;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>Get the factor size of the subordinate axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>the input primal-axis or subordinate-axis. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size of the subordinate-axis of <computeroutput>axis</computeroutput> (if <computeroutput>axis</computeroutput> is a primal-axis), or the size of <computeroutput>axis</computeroutput> itself (if <computeroutput>axis</computeroutput> is a subordinate-axis). Return -1 if <computeroutput>axis</computeroutput> is not in the layout the layout is undefined. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1a57a19f7b1c1f3d05d333f6c10272006e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::tir::Layout::Contains</definition>
        <argsstring>(const LayoutAxis &amp;axis) const </argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1LayoutAxis" kindref="compound">LayoutAxis</ref> &amp;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>Whether the layout contains an axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>axis to be checked. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether the layout contains the axis. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="266" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="266" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1afa5744d258322fb0d9c50c52374bcd9f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtvm_1_1tir_1_1LayoutAxis" kindref="compound">LayoutAxis</ref> &amp;</type>
        <definition>const LayoutAxis&amp; tvm::tir::Layout::operator[]</definition>
        <argsstring>(int32_t i) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>int32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="276" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="276" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1a9c22206c841f0f09e20d56b9c96b321d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tvm::tir::Layout::name</definition>
        <argsstring>() const </argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the string description of the layout </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="285" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1a2edd48a0abe23330747e815e9598b62e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::tir::Layout::Equals</definition>
        <argsstring>(const Layout &amp;rhs) const </argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1Layout" kindref="compound">Layout</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Whether the two layouts are equal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Another layout. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the two layouts are equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="295" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="295" bodyend="297"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtvm_1_1tir_1_1Layout_1a1c7bdf466d341ad61aba104db318ee0e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtvm_1_1tir_1_1Layout" kindref="compound">Layout</ref> &amp;</type>
        <definition>static const Layout&amp; tvm::tir::Layout::Undef</definition>
        <argsstring>()</argsstring>
        <name>Undef</name>
        <briefdescription>
<para>Return an undefined layout. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a (global) undefined layout. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="171" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="171" bodyend="174"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtvm_1_1tir_1_1Layout_1a4d0f3b738af6b70040980e1287282377" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Layout &amp;l)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1Layout" kindref="compound">Layout</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>allow output string of layout to ostream </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>the layout </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the ostream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/data_layout.h" line="305" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="305" bodyend="308"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classtvm_1_1tir_1_1Layout" kindref="compound">Layout</ref> is to describe how data is organized within an N-dimention tensor. It is composed of upper cases, lower cases and numbers, where upper case indicates a primal axis and the corresponding lower case with factor size indicates the subordinate axis. For example, NCHW16c can describe a 5-D tensor of [batch_size, channel, height, width, channel_block]. Here subordinate axis channel_block=16 is the factor size of the primal axis C (channel). <ref refid="classtvm_1_1tir_1_1Layout" kindref="compound">Layout</ref> for scalar is defined, while both its name and axes have size 0. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5504">
        <label>ObjectRef</label>
      </node>
      <node id="5503">
        <label>tvm::tir::Layout</label>
        <link refid="classtvm_1_1tir_1_1Layout"/>
        <childnode refid="5504" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5506">
        <label>ObjectRef</label>
      </node>
      <node id="5505">
        <label>tvm::tir::Layout</label>
        <link refid="classtvm_1_1tir_1_1Layout"/>
        <childnode refid="5506" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tvm/tir/data_layout.h" line="129" column="1" bodyfile="include/tvm/tir/data_layout.h" bodystart="129" bodyend="311"/>
    <listofallmembers>
      <member refid="classtvm_1_1tir_1_1Layout_1a34e09318237c606d8e3dfd6267ae72b8" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>ContainerType</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1a57a19f7b1c1f3d05d333f6c10272006e" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>Contains</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1a2edd48a0abe23330747e815e9598b62e" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>Equals</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1a88c306ea4682d28b85032277fa29df63" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>ExpandPrimal</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1ad1e29ab749a79562fb2f746ccc42adf1" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>FactorOf</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1a0fa224417a05bc774c6e4fc8093ca75a" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>IndexOf</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1abf3ba7ad67d43133c8f4f9beb21edf32" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>Layout</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1a585c5a7813852d9741a7a739c4e2cbad" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>Layout</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1ace4d6c608f7148bb2c6aefe33b4e4ab5" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>Layout</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1a11a8465c3cc562e408a48a7f0fd324fd" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>Layout</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1a7cece4c969caab17658f4e70fa6a69e5" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>Layout</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1a9c22206c841f0f09e20d56b9c96b321d" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>name</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1a4bca97ce52386c053a442ff960581f92" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>ndim</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1a2f983c2de370c89a9f0b12ebcf9fec0c" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>ndim_primal</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1aef6a0989eb7c1a0b9a0707a465cbaa9b" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>operator-&gt;</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1a24d1414e53ab3bd153942bf5de5402e2" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>operator-&gt;</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1a4d0f3b738af6b70040980e1287282377" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>operator&lt;&lt;</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1afa5744d258322fb0d9c50c52374bcd9f" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>operator[]</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1aba8612236310488f3a385bd8b139b914" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>Split</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1a506777d73f3b9e5ce24e4f4dfa4122b0" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>SubLayout</name></member>
      <member refid="classtvm_1_1tir_1_1Layout_1a1c7bdf466d341ad61aba104db318ee0e" prot="public" virt="non-virtual"><scope>tvm::tir::Layout</scope><name>Undef</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
