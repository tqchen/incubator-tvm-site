<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1tir_1_1StmtVisitor" kind="class" language="C++" prot="public">
    <compoundname>tvm::tir::StmtVisitor</compoundname>
    <basecompoundref refid="classtvm_1_1tir_1_1StmtFunctor" prot="protected" virt="non-virtual">tvm::tir::StmtFunctor&lt; void(const Stmt &amp;)&gt;</basecompoundref>
    <derivedcompoundref refid="classtvm_1_1tir_1_1StmtExprVisitor" prot="public" virt="non-virtual">tvm::tir::StmtExprVisitor</derivedcompoundref>
    <includes refid="stmt__functor_8h" local="no">stmt_functor.h</includes>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classtvm_1_1tir_1_1StmtVisitor_1a6d35a6081ee7dbc440e5a980f70795c6" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void tvm::tir::StmtVisitor::VisitExpr</definition>
        <argsstring>(const PrimExpr &amp;e)</argsstring>
        <name>VisitExpr</name>
        <reimplementedby refid="classtvm_1_1tir_1_1StmtExprVisitor_1a21d7f30350a7aa02cdc0c1b5ee3ffa23">VisitExpr</reimplementedby>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Visitor to Exprs, can be overriden to do recursive changes to Exprs. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>A common pattern is to call <ref refid="classtvm_1_1tir_1_1ExprVisitor" kindref="compound">ExprVisitor</ref> here, or have a class sub-class both <ref refid="classtvm_1_1tir_1_1StmtVisitor" kindref="compound">StmtVisitor</ref> and <ref refid="classtvm_1_1tir_1_1ExprVisitor" kindref="compound">ExprVisitor</ref> and redirect Visit to ExprMutator::VisitExpr(Expr) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/stmt_functor.h" line="149" column="1" bodyfile="include/tvm/tir/stmt_functor.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1StmtVisitor_1a0e6ca99ff599eea59b322df49b1c3449" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::StmtVisitor::VisitStmt_</definition>
        <argsstring>(const AttrStmtNode *op) override</argsstring>
        <name>VisitStmt_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1AttrStmtNode" kindref="compound">AttrStmtNode</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/stmt_functor.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1StmtVisitor_1a38488c0f8137e12bc195fa2e0a0524c9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::StmtVisitor::VisitStmt_</definition>
        <argsstring>(const IfThenElseNode *op) override</argsstring>
        <name>VisitStmt_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1IfThenElseNode" kindref="compound">IfThenElseNode</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/stmt_functor.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1StmtVisitor_1ad3334020eaa0a0fa20bb131020a1e09d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::StmtVisitor::VisitStmt_</definition>
        <argsstring>(const LetStmtNode *op) override</argsstring>
        <name>VisitStmt_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1LetStmtNode" kindref="compound">LetStmtNode</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/stmt_functor.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1StmtVisitor_1a973300325d22158d8d7096ddc862b13e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::StmtVisitor::VisitStmt_</definition>
        <argsstring>(const ForNode *op) override</argsstring>
        <name>VisitStmt_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1ForNode" kindref="compound">ForNode</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/stmt_functor.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1StmtVisitor_1a8e8cdf15d6e250ae57ae1777048e99f8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::StmtVisitor::VisitStmt_</definition>
        <argsstring>(const AllocateNode *op) override</argsstring>
        <name>VisitStmt_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1AllocateNode" kindref="compound">AllocateNode</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/stmt_functor.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1StmtVisitor_1afcb1a0ec03b7a7da4304c5b790b27210" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::StmtVisitor::VisitStmt_</definition>
        <argsstring>(const StoreNode *op) override</argsstring>
        <name>VisitStmt_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1StoreNode" kindref="compound">StoreNode</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/stmt_functor.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1StmtVisitor_1ac1fc9bc715f6b1dcba2bf3dd19619f3f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::StmtVisitor::VisitStmt_</definition>
        <argsstring>(const FreeNode *op) override</argsstring>
        <name>VisitStmt_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1FreeNode" kindref="compound">FreeNode</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/stmt_functor.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1StmtVisitor_1a6cca1dd5ab6329207cecb8b94c63f8c2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::StmtVisitor::VisitStmt_</definition>
        <argsstring>(const AssertStmtNode *op) override</argsstring>
        <name>VisitStmt_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1AssertStmtNode" kindref="compound">AssertStmtNode</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/stmt_functor.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1StmtVisitor_1a25592ee2a4e51be77a4dcc3d0ee603d8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::StmtVisitor::VisitStmt_</definition>
        <argsstring>(const ProducerConsumerNode *op) override</argsstring>
        <name>VisitStmt_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1ProducerConsumerNode" kindref="compound">ProducerConsumerNode</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/stmt_functor.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1StmtVisitor_1a8bbcc390c33669fb563c5afe6a04bb0e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::StmtVisitor::VisitStmt_</definition>
        <argsstring>(const ProvideNode *op) override</argsstring>
        <name>VisitStmt_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1ProvideNode" kindref="compound">ProvideNode</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/stmt_functor.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1StmtVisitor_1a08147762a34288aad3a394f8cf556d72" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::StmtVisitor::VisitStmt_</definition>
        <argsstring>(const RealizeNode *op) override</argsstring>
        <name>VisitStmt_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1RealizeNode" kindref="compound">RealizeNode</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/stmt_functor.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1StmtVisitor_1a7ba134d441fad67448a9a073cb8b6e09" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::StmtVisitor::VisitStmt_</definition>
        <argsstring>(const PrefetchNode *op) override</argsstring>
        <name>VisitStmt_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1PrefetchNode" kindref="compound">PrefetchNode</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/stmt_functor.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1StmtVisitor_1a9f7515a82ddc4a41247a1622563feed6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::StmtVisitor::VisitStmt_</definition>
        <argsstring>(const SeqStmtNode *op) override</argsstring>
        <name>VisitStmt_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1SeqStmtNode" kindref="compound">SeqStmtNode</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/stmt_functor.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1StmtVisitor_1ab5e45d72c09d603c8aa7960262278ab0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::StmtVisitor::VisitStmt_</definition>
        <argsstring>(const EvaluateNode *op) override</argsstring>
        <name>VisitStmt_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1EvaluateNode" kindref="compound">EvaluateNode</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/stmt_functor.h" line="164" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classtvm_1_1tir_1_1StmtVisitor" kindref="compound">StmtVisitor</ref>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="7012">
        <label>tvm::tir::StmtVisitor</label>
        <link refid="classtvm_1_1tir_1_1StmtVisitor"/>
        <childnode refid="7013" relation="protected-inheritance">
        </childnode>
      </node>
      <node id="7013">
        <label>tvm::tir::StmtFunctor&lt; void(const Stmt &amp;)&gt;</label>
        <link refid="classtvm_1_1tir_1_1StmtFunctor"/>
      </node>
      <node id="7014">
        <label>tvm::tir::StmtExprVisitor</label>
        <link refid="classtvm_1_1tir_1_1StmtExprVisitor"/>
        <childnode refid="7012" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7015">
        <label>tvm::tir::StmtVisitor</label>
        <link refid="classtvm_1_1tir_1_1StmtVisitor"/>
        <childnode refid="7016" relation="protected-inheritance">
        </childnode>
      </node>
      <node id="7016">
        <label>tvm::tir::StmtFunctor&lt; void(const Stmt &amp;)&gt;</label>
        <link refid="classtvm_1_1tir_1_1StmtFunctor"/>
      </node>
    </collaborationgraph>
    <location file="include/tvm/tir/stmt_functor.h" line="136" column="1" bodyfile="include/tvm/tir/stmt_functor.h" bodystart="135" bodyend="165"/>
    <listofallmembers>
      <member refid="classtvm_1_1tir_1_1StmtVisitor_1a6d35a6081ee7dbc440e5a980f70795c6" prot="protected" virt="virtual"><scope>tvm::tir::StmtVisitor</scope><name>VisitExpr</name></member>
      <member refid="classtvm_1_1tir_1_1StmtVisitor_1a0e6ca99ff599eea59b322df49b1c3449" prot="protected" virt="non-virtual"><scope>tvm::tir::StmtVisitor</scope><name>VisitStmt_</name></member>
      <member refid="classtvm_1_1tir_1_1StmtVisitor_1a38488c0f8137e12bc195fa2e0a0524c9" prot="protected" virt="non-virtual"><scope>tvm::tir::StmtVisitor</scope><name>VisitStmt_</name></member>
      <member refid="classtvm_1_1tir_1_1StmtVisitor_1ad3334020eaa0a0fa20bb131020a1e09d" prot="protected" virt="non-virtual"><scope>tvm::tir::StmtVisitor</scope><name>VisitStmt_</name></member>
      <member refid="classtvm_1_1tir_1_1StmtVisitor_1a973300325d22158d8d7096ddc862b13e" prot="protected" virt="non-virtual"><scope>tvm::tir::StmtVisitor</scope><name>VisitStmt_</name></member>
      <member refid="classtvm_1_1tir_1_1StmtVisitor_1a8e8cdf15d6e250ae57ae1777048e99f8" prot="protected" virt="non-virtual"><scope>tvm::tir::StmtVisitor</scope><name>VisitStmt_</name></member>
      <member refid="classtvm_1_1tir_1_1StmtVisitor_1afcb1a0ec03b7a7da4304c5b790b27210" prot="protected" virt="non-virtual"><scope>tvm::tir::StmtVisitor</scope><name>VisitStmt_</name></member>
      <member refid="classtvm_1_1tir_1_1StmtVisitor_1ac1fc9bc715f6b1dcba2bf3dd19619f3f" prot="protected" virt="non-virtual"><scope>tvm::tir::StmtVisitor</scope><name>VisitStmt_</name></member>
      <member refid="classtvm_1_1tir_1_1StmtVisitor_1a6cca1dd5ab6329207cecb8b94c63f8c2" prot="protected" virt="non-virtual"><scope>tvm::tir::StmtVisitor</scope><name>VisitStmt_</name></member>
      <member refid="classtvm_1_1tir_1_1StmtVisitor_1a25592ee2a4e51be77a4dcc3d0ee603d8" prot="protected" virt="non-virtual"><scope>tvm::tir::StmtVisitor</scope><name>VisitStmt_</name></member>
      <member refid="classtvm_1_1tir_1_1StmtVisitor_1a8bbcc390c33669fb563c5afe6a04bb0e" prot="protected" virt="non-virtual"><scope>tvm::tir::StmtVisitor</scope><name>VisitStmt_</name></member>
      <member refid="classtvm_1_1tir_1_1StmtVisitor_1a08147762a34288aad3a394f8cf556d72" prot="protected" virt="non-virtual"><scope>tvm::tir::StmtVisitor</scope><name>VisitStmt_</name></member>
      <member refid="classtvm_1_1tir_1_1StmtVisitor_1a7ba134d441fad67448a9a073cb8b6e09" prot="protected" virt="non-virtual"><scope>tvm::tir::StmtVisitor</scope><name>VisitStmt_</name></member>
      <member refid="classtvm_1_1tir_1_1StmtVisitor_1a9f7515a82ddc4a41247a1622563feed6" prot="protected" virt="non-virtual"><scope>tvm::tir::StmtVisitor</scope><name>VisitStmt_</name></member>
      <member refid="classtvm_1_1tir_1_1StmtVisitor_1ab5e45d72c09d603c8aa7960262278ab0" prot="protected" virt="non-virtual"><scope>tvm::tir::StmtVisitor</scope><name>VisitStmt_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
