<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4" kind="class" language="C++" prot="public">
    <compoundname>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</compoundname>
    <includes refid="tir_2expr__functor_8h" local="no">expr_functor.h</includes>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a700748bf083a291cc0d7dba133564dd1" prot="private" static="no">
        <type><ref refid="classtvm_1_1tir_1_1ExprFunctor" kindref="compound">ExprFunctor</ref>&lt; R(const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;n, Args...)&gt;</type>
        <definition>using tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::TSelf =  ExprFunctor&lt;R(const PrimExpr&amp; n, Args...)&gt;</definition>
        <argsstring></argsstring>
        <name>TSelf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="92" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1afd8b15de8dfcdb3c60d03285c58f1fba" prot="private" static="no">
        <type><ref refid="classtvm_1_1NodeFunctor" kindref="compound">NodeFunctor</ref>&lt; R(const ObjectRef &amp;n, <ref refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4" kindref="compound">TSelf</ref> *self, Args...)&gt;</type>
        <definition>using tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::FType =  NodeFunctor&lt;R(const ObjectRef&amp; n, TSelf* self, Args...)&gt;</definition>
        <argsstring></argsstring>
        <name>FType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="93" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1aa334dfc7ba5e0e7b434da07bed12dde4" prot="public" static="no">
        <type>R</type>
        <definition>using tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::result_type =  R</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <briefdescription>
<para>the result type of this functor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="97" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a463951999eb3aa125880d5b6aa1f9191" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::~ExprFunctor</definition>
        <argsstring>()</argsstring>
        <name>~ExprFunctor</name>
        <briefdescription>
<para>virtual destructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="99" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1aac076394dd79bf1b270b3ac66049ce6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>R</type>
        <definition>R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::operator()</definition>
        <argsstring>(const PrimExpr &amp;n, Args...args)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Same as call. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The expression node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the call </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="106" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1ae8fabc4d8506e5f8482b6bead499826c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr</definition>
        <argsstring>(const PrimExpr &amp;n, Args...args)</argsstring>
        <name>VisitExpr</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>The functor call. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The expression node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the call </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="115" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1ad3aaa39ac98e4c0dd0992db2fba817bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const VarNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1VarNode" kindref="compound">VarNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="120" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a2f91deba0c87b4e472518e9dfeb1e3a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const SizeVarNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1SizeVarNode" kindref="compound">SizeVarNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="121" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a8eb9beccd3fe39bc7b174ab523e3d65b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const LoadNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1LoadNode" kindref="compound">LoadNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="124" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a05a38114dfddfd40fea45cdbff6a57d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const LetNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1LetNode" kindref="compound">LetNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="125" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a13857fc6f437b9de1568a2350aa793ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const CallNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1CallNode" kindref="compound">CallNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="126" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1af7907e3fad79cd66e1de242cd4a93a6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const AddNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1AddNode" kindref="compound">AddNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="127" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a233096cf5a0c8406fc388f02cefdec87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const SubNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1SubNode" kindref="compound">SubNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="128" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a560ee745377087a4541bde1fc8411da9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const MulNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1MulNode" kindref="compound">MulNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="129" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a77990d92efd6962b27e8b5cf8c5611c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const DivNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1DivNode" kindref="compound">DivNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="130" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a97bcf0ff5e20fb4374b76184a8698684" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const ModNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1ModNode" kindref="compound">ModNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="131" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a7702819f9b60f981fca12d86c39bce6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const FloorDivNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1FloorDivNode" kindref="compound">FloorDivNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="132" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a15457cbdb3e931d04079d5a97f8efb8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const FloorModNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1FloorModNode" kindref="compound">FloorModNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="133" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a61deef988487dff4afe32841d5460c73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const MinNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1MinNode" kindref="compound">MinNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="134" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1aae2d6fc5206bff7ab8c189609db3cba4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const MaxNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1MaxNode" kindref="compound">MaxNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="135" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a8ad4124205613eb540576667f0a81bb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const EQNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1EQNode" kindref="compound">EQNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="136" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a693d38e15309a9b6ccb67c0a23e07afc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const NENode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1NENode" kindref="compound">NENode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="137" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1addd96730b3207f1ae830a0a20498dd1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const LTNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1LTNode" kindref="compound">LTNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="138" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1aa49e7010181965ae1413127839be4f69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const LENode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="structtvm_1_1tir_1_1LENode" kindref="compound">LENode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="139" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a893ec32aedb7513341a31b06fd850c76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const GTNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1GTNode" kindref="compound">GTNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="140" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a2900dda40ccd8c9365374e9d83e1da34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const GENode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1GENode" kindref="compound">GENode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="141" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a72b7e96b4ccd521331341d11f7cc5a00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const AndNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1AndNode" kindref="compound">AndNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="142" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a493e7b9060501ab327460218b51c5a83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const OrNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1OrNode" kindref="compound">OrNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="143" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1ae374b3e2caed5acf6929ad355fe95750" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const ReduceNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1ReduceNode" kindref="compound">ReduceNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="144" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1ae48ad7065ba759d2f174ae18b8b32125" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const CastNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1CastNode" kindref="compound">CastNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="145" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1af02b3d9e956cc00e87f2c62094441dc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const NotNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1NotNode" kindref="compound">NotNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="146" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1ac3216a343b01c700daff7f78385adc93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const SelectNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1SelectNode" kindref="compound">SelectNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="147" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a01bca11f7768ec4d52aa38ca4550a047" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const RampNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1RampNode" kindref="compound">RampNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="148" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1aa2ebfb05296f458ccdf74d22f6c5029b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const BroadcastNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1BroadcastNode" kindref="compound">BroadcastNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="149" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1aa469a9ce9483a2d0c66377486d43b101" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const ShuffleNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1ShuffleNode" kindref="compound">ShuffleNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="150" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a5e6b1012aaef749646823af1ff4946c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const IntImmNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="namespacetvm_1_1tir_1ae8c7db788e840dc1c2ed1f365d5ea829" kindref="member">IntImmNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="151" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1ac04267908614379aab07b7ecfc47ee4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const FloatImmNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="namespacetvm_1_1tir_1adb123be81447d2871f4c716ce2d1dc00" kindref="member">FloatImmNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="152" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a0a6a6f3bbbb7dcdc9afb4e9a38344df0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const StringImmNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1StringImmNode" kindref="compound">StringImmNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="153" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1abd446c1ab885af47986b4b8c73a1d881" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::VisitExprDefault_</definition>
        <argsstring>(const Object *op, Args...)</argsstring>
        <name>VisitExprDefault_</name>
        <param>
          <type>const Object *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="154" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="154" bodyend="157"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a687e6c725fda61ceac38faccbe28a971" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1NodeFunctor" kindref="compound">FType</ref></type>
        <definition>static FType tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;::InitVTable</definition>
        <argsstring>()</argsstring>
        <name>InitVTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr_functor.h" line="161" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="161" bodyend="197"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4988">
        <label>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</label>
        <link refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4"/>
      </node>
    </collaborationgraph>
    <location file="include/tvm/tir/expr_functor.h" line="90" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="90" bodyend="198"/>
    <listofallmembers>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1afd8b15de8dfcdb3c60d03285c58f1fba" prot="private" virt="non-virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>FType</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a687e6c725fda61ceac38faccbe28a971" prot="private" virt="non-virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>InitVTable</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1aac076394dd79bf1b270b3ac66049ce6a" prot="public" virt="non-virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>operator()</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1aa334dfc7ba5e0e7b434da07bed12dde4" prot="public" virt="non-virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>result_type</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a700748bf083a291cc0d7dba133564dd1" prot="private" virt="non-virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>TSelf</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1ae8fabc4d8506e5f8482b6bead499826c" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1ad3aaa39ac98e4c0dd0992db2fba817bb" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a2f91deba0c87b4e472518e9dfeb1e3a4" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a8eb9beccd3fe39bc7b174ab523e3d65b" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a05a38114dfddfd40fea45cdbff6a57d7" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a13857fc6f437b9de1568a2350aa793ca" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1af7907e3fad79cd66e1de242cd4a93a6d" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a233096cf5a0c8406fc388f02cefdec87" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a560ee745377087a4541bde1fc8411da9" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a77990d92efd6962b27e8b5cf8c5611c7" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a97bcf0ff5e20fb4374b76184a8698684" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a7702819f9b60f981fca12d86c39bce6e" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a15457cbdb3e931d04079d5a97f8efb8d" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a61deef988487dff4afe32841d5460c73" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1aae2d6fc5206bff7ab8c189609db3cba4" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a8ad4124205613eb540576667f0a81bb3" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a693d38e15309a9b6ccb67c0a23e07afc" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1addd96730b3207f1ae830a0a20498dd1c" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1aa49e7010181965ae1413127839be4f69" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a893ec32aedb7513341a31b06fd850c76" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a2900dda40ccd8c9365374e9d83e1da34" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a72b7e96b4ccd521331341d11f7cc5a00" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a493e7b9060501ab327460218b51c5a83" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1ae374b3e2caed5acf6929ad355fe95750" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1ae48ad7065ba759d2f174ae18b8b32125" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1af02b3d9e956cc00e87f2c62094441dc0" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1ac3216a343b01c700daff7f78385adc93" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a01bca11f7768ec4d52aa38ca4550a047" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1aa2ebfb05296f458ccdf74d22f6c5029b" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1aa469a9ce9483a2d0c66377486d43b101" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a5e6b1012aaef749646823af1ff4946c7" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1ac04267908614379aab07b7ecfc47ee4f" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a0a6a6f3bbbb7dcdc9afb4e9a38344df0" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1abd446c1ab885af47986b4b8c73a1d881" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>VisitExprDefault_</name></member>
      <member refid="classtvm_1_1tir_1_1ExprFunctor_3_01R_07const_01PrimExpr_01_6n_00_01Args_8_8_8_08_4_1a463951999eb3aa125880d5b6aa1f9191" prot="public" virt="virtual"><scope>tvm::tir::ExprFunctor&lt; R(const PrimExpr &amp;n, Args...)&gt;</scope><name>~ExprFunctor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
