<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="c__backend__api_8h" kind="file" language="C++">
    <compoundname>c_backend_api.h</compoundname>
    <includes refid="c__runtime__api_8h" local="no">tvm/runtime/c_runtime_api.h</includes>
    <incdepgraph>
      <node id="14345">
        <label>stdint.h</label>
      </node>
      <node id="14346">
        <label>stddef.h</label>
      </node>
      <node id="14342">
        <label>include/tvm/runtime/c_backend_api.h</label>
        <link refid="c_backend_api.h"/>
        <childnode refid="14343" relation="include">
        </childnode>
      </node>
      <node id="14343">
        <label>tvm/runtime/c_runtime_api.h</label>
        <link refid="c__runtime__api_8h"/>
        <childnode refid="14344" relation="include">
        </childnode>
        <childnode refid="14345" relation="include">
        </childnode>
        <childnode refid="14346" relation="include">
        </childnode>
      </node>
      <node id="14344">
        <label>dlpack/dlpack.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structTVMParallelGroupEnv" prot="public">TVMParallelGroupEnv</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="c__backend__api_8h_1a79a43e3f37e8f77316e8dd16d0ee9b47" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* TVMBackendPackedCFunc) (TVMValue *args, int *type_codes, int num_args, TVMValue *out_ret_value, int *out_ret_tcode)</definition>
        <argsstring>)(TVMValue *args, int *type_codes, int num_args, TVMValue *out_ret_value, int *out_ret_tcode)</argsstring>
        <name>TVMBackendPackedCFunc</name>
        <briefdescription>
<para>Signature for backend functions exported as DLL. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_codes</parametername>
</parameternamelist>
<parameterdescription>
<para>The type codes of the arguments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_args</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of arguments. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_ret_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The output value of the the return value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_ret_tcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The output type code of the return value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success, -1 if failure happens, set error via TVMAPISetLastError. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/c_backend_api.h" line="48" column="1" bodyfile="include/tvm/runtime/c_backend_api.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="c__backend__api_8h_1ac1b48128210969500e27aad08a7fe51b" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* FTVMParallelLambda) (int task_id, TVMParallelGroupEnv *penv, void *cdata)</definition>
        <argsstring>)(int task_id, TVMParallelGroupEnv *penv, void *cdata)</argsstring>
        <name>FTVMParallelLambda</name>
        <briefdescription>
<para>The callback function to execute a parallel lambda. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the task id of the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>penv</parametername>
</parameternamelist>
<parameterdescription>
<para>The parallel environment backs the execution. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cdata</parametername>
</parameternamelist>
<parameterdescription>
<para>The supporting closure data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/c_backend_api.h" line="128" column="1" bodyfile="include/tvm/runtime/c_backend_api.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="c__backend__api_8h_1a56a654a9aeba2f1ccf3e10918dd88ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TVMBackendGetFuncFromEnv</definition>
        <argsstring>(void *mod_node, const char *func_name, TVMFunctionHandle *out)</argsstring>
        <name>TVMBackendGetFuncFromEnv</name>
        <param>
          <type>void *</type>
          <declname>mod_node</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>func_name</declname>
        </param>
        <param>
          <type><ref refid="c__runtime__api_8h_1acf57d257a6e0841d84ebbd2a339d183e" kindref="member">TVMFunctionHandle</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Backend function for modules to get function from its environment mod_node (its imports and global function). The user do should not call TVMFuncFree on func. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mod_node</parametername>
</parameternamelist>
<parameterdescription>
<para>The module handle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The result function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 when no error is thrown, -1 when failure happens </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/c_backend_api.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="c__backend__api_8h_1a0c57deb5acb9338ec778d91bd6e42191" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TVMBackendRegisterSystemLibSymbol</definition>
        <argsstring>(const char *name, void *ptr)</argsstring>
        <name>TVMBackendRegisterSystemLibSymbol</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Backend function to register system-wide library symbol. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the symbol </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The symbol address. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 when no error is thrown, -1 when failure happens </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/c_backend_api.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="c__backend__api_8h_1a07eaf7d1b748d99aa7715c7adbdea231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* TVMBackendAllocWorkspace</definition>
        <argsstring>(int device_type, int device_id, uint64_t nbytes, int dtype_code_hint, int dtype_bits_hint)</argsstring>
        <name>TVMBackendAllocWorkspace</name>
        <param>
          <type>int</type>
          <declname>device_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>device_id</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dtype_code_hint</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dtype_bits_hint</declname>
        </param>
        <briefdescription>
<para>Backend function to allocate temporal workspace. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The result allocate spaced is ensured to be aligned to kTempAllocaAlignment.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the space requested. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The device type which the space will be allocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The device id which the space will be allocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype_code_hint</parametername>
</parameternamelist>
<parameterdescription>
<para>The type code of the array elements. Only used in certain backends such as OpenGL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype_bits_hint</parametername>
</parameternamelist>
<parameterdescription>
<para>The type bits of the array elements. Only used in certain backends such as OpenGL. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nullptr when error is thrown, a valid ptr if success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/c_backend_api.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="c__backend__api_8h_1a4560d2cbefdae811371596672e455dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TVMBackendFreeWorkspace</definition>
        <argsstring>(int device_type, int device_id, void *ptr)</argsstring>
        <name>TVMBackendFreeWorkspace</name>
        <param>
          <type>int</type>
          <declname>device_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>device_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Backend function to free temporal workspace. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The result allocated space pointer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The device type which the space will be allocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The device id which the space will be allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 when no error is thrown, -1 when failure happens</para></simplesect>
<simplesect kind="see"><para><ref refid="c__backend__api_8h_1a07eaf7d1b748d99aa7715c7adbdea231" kindref="member">TVMBackendAllocWorkspace</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/c_backend_api.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="c__backend__api_8h_1a6ff8662943d0f003d55d9046cd24daf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TVMBackendParallelLaunch</definition>
        <argsstring>(FTVMParallelLambda flambda, void *cdata, int num_task)</argsstring>
        <name>TVMBackendParallelLaunch</name>
        <param>
          <type><ref refid="c__backend__api_8h_1ac1b48128210969500e27aad08a7fe51b" kindref="member">FTVMParallelLambda</ref></type>
          <declname>flambda</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cdata</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_task</declname>
        </param>
        <briefdescription>
<para>Backend function for running parallel jobs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flambda</parametername>
</parameternamelist>
<parameterdescription>
<para>The parallel function to be launched. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cdata</parametername>
</parameternamelist>
<parameterdescription>
<para>The closure data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_task</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of tasks to launch, can be 0, means launch with all available threads.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 when no error is thrown, -1 when failure happens </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/c_backend_api.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="c__backend__api_8h_1a2d54b04a58a58eb9ff43e33c320e60a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TVMBackendParallelBarrier</definition>
        <argsstring>(int task_id, TVMParallelGroupEnv *penv)</argsstring>
        <name>TVMBackendParallelBarrier</name>
        <param>
          <type>int</type>
          <declname>task_id</declname>
        </param>
        <param>
          <type><ref refid="structTVMParallelGroupEnv" kindref="compound">TVMParallelGroupEnv</ref> *</type>
          <declname>penv</declname>
        </param>
        <briefdescription>
<para>BSP barrrier between parallel threads. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the task id of the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>penv</parametername>
</parameternamelist>
<parameterdescription>
<para>The parallel environment backs the execution. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 when no error is thrown, -1 when failure happens </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/c_backend_api.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="c__backend__api_8h_1ae70bd3ee026eb55b438ada05b08f0ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TVMBackendRunOnce</definition>
        <argsstring>(void **handle, int(*f)(void *), void *cdata, int nbytes)</argsstring>
        <name>TVMBackendRunOnce</name>
        <param>
          <type>void **</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int(*)(void *)</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cdata</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Simple static initialization function. Run f once and set handle to be not null. This function is mainly used for test purpose. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An global address to indicate f </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to be ran </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cdata</parametername>
</parameternamelist>
<parameterdescription>
<para>The closure data to pass to the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes in the closure data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 when no error is thrown, -1 when failure happens </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/c_backend_api.h" line="165" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>TVM runtime backend API. </para>    </briefdescription>
    <detaileddescription>
<para>The functions defined in this header are intended to be used by compiled tvm operators, usually user do not need to use these function directly. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor">#ifndef<sp/>TVM_RUNTIME_C_BACKEND_API_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TVM_RUNTIME_C_BACKEND_API_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="c__runtime__api_8h" kindref="compound">tvm/runtime/c_runtime_api.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="c__backend__api_8h_1a79a43e3f37e8f77316e8dd16d0ee9b47" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="c__backend__api_8h_1a79a43e3f37e8f77316e8dd16d0ee9b47" kindref="member">TVMBackendPackedCFunc</ref>)(<ref refid="unionTVMValue" kindref="compound">TVMValue</ref>*<sp/>args,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>type_codes,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_args,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionTVMValue" kindref="compound">TVMValue</ref>*<sp/>out_ret_value,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>out_ret_tcode);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">TVM_DLL<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="c__backend__api_8h_1a56a654a9aeba2f1ccf3e10918dd88ec5" kindref="member">TVMBackendGetFuncFromEnv</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mod_node,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>func_name,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="c__runtime__api_8h_1acf57d257a6e0841d84ebbd2a339d183e" kindref="member">TVMFunctionHandle</ref><sp/>*out);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">TVM_DLL<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="c__backend__api_8h_1a0c57deb5acb9338ec778d91bd6e42191" kindref="member">TVMBackendRegisterSystemLibSymbol</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">TVM_DLL<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="c__backend__api_8h_1a07eaf7d1b748d99aa7715c7adbdea231" kindref="member">TVMBackendAllocWorkspace</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_type,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_id,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>nbytes,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dtype_code_hint,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dtype_bits_hint);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">TVM_DLL<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="c__backend__api_8h_1a4560d2cbefdae811371596672e455dfd" kindref="member">TVMBackendFreeWorkspace</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_type,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_id,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="structTVMParallelGroupEnv" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117" refid="structTVMParallelGroupEnv_1a0633fa0370c01f1ab38948a53801d90c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structTVMParallelGroupEnv_1a0633fa0370c01f1ab38948a53801d90c" kindref="member">sync_handle</ref>;</highlight></codeline>
<codeline lineno="119" refid="structTVMParallelGroupEnv_1a6ff807972a918ee61dfc158abce825f6" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="structTVMParallelGroupEnv_1a6ff807972a918ee61dfc158abce825f6" kindref="member">num_task</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}<sp/><ref refid="structTVMParallelGroupEnv" kindref="compound">TVMParallelGroupEnv</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="c__backend__api_8h_1ac1b48128210969500e27aad08a7fe51b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="c__backend__api_8h_1ac1b48128210969500e27aad08a7fe51b" kindref="member">FTVMParallelLambda</ref>)(</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>task_id,<sp/><ref refid="structTVMParallelGroupEnv" kindref="compound">TVMParallelGroupEnv</ref>*<sp/>penv,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cdata);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">TVM_DLL<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="c__backend__api_8h_1a6ff8662943d0f003d55d9046cd24daf8" kindref="member">TVMBackendParallelLaunch</ref>(<ref refid="c__backend__api_8h_1ac1b48128210969500e27aad08a7fe51b" kindref="member">FTVMParallelLambda</ref><sp/>flambda,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cdata,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_task);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">TVM_DLL<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="c__backend__api_8h_1a2d54b04a58a58eb9ff43e33c320e60a7" kindref="member">TVMBackendParallelBarrier</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>task_id,<sp/><ref refid="structTVMParallelGroupEnv" kindref="compound">TVMParallelGroupEnv</ref>*<sp/>penv);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">TVM_DLL<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="c__backend__api_8h_1ae70bd3ee026eb55b438ada05b08f0ce8" kindref="member">TVMBackendRunOnce</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>handle,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*f)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*),</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cdata,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbytes);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>TVM_EXTERN_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>TVM_RUNTIME_C_BACKEND_API_H_</highlight></codeline>
    </programlisting>
    <location file="include/tvm/runtime/c_backend_api.h"/>
  </compounddef>
</doxygen>
