<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1tir_1_1ExprFunctor" kind="class" language="C++" prot="public">
    <compoundname>tvm::tir::ExprFunctor</compoundname>
    <includes refid="tir_2expr__functor_8h" local="no">expr_functor.h</includes>
    <templateparamlist>
      <param>
        <type>typename FType</type>
      </param>
    </templateparamlist>
    <briefdescription>
<para>A dynamical functor that dispatches on in the first Expr argument. You can use this as a more powerful Visitor, since it allows you to define function signatures of Visit Function. </para>    </briefdescription>
    <detaileddescription>
<para>This helps you to avoid to book-keep return value of Visitor via state, which can cause bugs easily when state is incorrectly maintained.</para><para><programlisting><codeline><highlight class="normal">//<sp/>A<sp/>functor<sp/>that<sp/>set<sp/>variable<sp/>to<sp/>b.<sp/>and<sp/>calculate<sp/>results.</highlight></codeline>
<codeline><highlight class="normal">class<sp/>MyExprFunctor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>:<sp/>public<sp/>tir::ExprFunctor&lt;int(const<sp/>Expr&amp;,<sp/>int)&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>VisitExpr_(const<sp/>Variable*<sp/>op,<sp/>int<sp/>b)<sp/>final<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>return<sp/>b;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>VisitExpr_(const<sp/>IntImm*<sp/>op,<sp/>int<sp/>b)<sp/>final<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>op-&gt;value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>VisitExpr_(const<sp/>Add*<sp/>op,<sp/>int<sp/>b)<sp/>final<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>return<sp/>Visit(op-&gt;a,<sp/>b)<sp/>+<sp/>Visit(op-&gt;b,<sp/>b);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">MyExprFunctor<sp/>f;</highlight></codeline>
<codeline><highlight class="normal">Var<sp/>x(&quot;x&quot;);</highlight></codeline>
<codeline><highlight class="normal">CHECK_EQ(f(x<sp/>+<sp/>1,<sp/>2),<sp/>3);</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>Why do we need this more powerful Functor:</para></simplesect>
We often need to implement a transformer tasks. Say we want to take Expr and transform it to some analysis result, This easily be done incorrectly using plain Visitor. See IRVisitor&apos;s document for possible error cases.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FType</parametername>
</parameternamelist>
<parameterdescription>
<para>function signiture This type if only defined for FType with function signiture R(const Expr&amp;, Args...) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="4984">
        <label>tvm::tir::ExprFunctor&lt; FType &gt;</label>
        <link refid="classtvm_1_1tir_1_1ExprFunctor"/>
      </node>
    </collaborationgraph>
    <location file="include/tvm/tir/expr_functor.h" line="75" column="1" bodyfile="include/tvm/tir/expr_functor.h" bodystart="75" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
