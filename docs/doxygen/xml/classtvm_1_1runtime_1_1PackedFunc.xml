<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1runtime_1_1PackedFunc" kind="class" language="C++" prot="public">
    <compoundname>tvm::runtime::PackedFunc</compoundname>
    <includes refid="packed__func_8h" local="no">packed_func.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="classtvm_1_1runtime_1_1TVMArgs" kindref="compound">TVMArgs</ref> args, <ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref> *rv)&gt;</type>
        <definition>using tvm::runtime::PackedFunc::FType =  std::function&lt;void (TVMArgs args, TVMRetValue* rv)&gt;</definition>
        <argsstring></argsstring>
        <name>FType</name>
        <briefdescription>
<para>The internal std::function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rv</parametername>
</parameternamelist>
<parameterdescription>
<para>The return value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">//<sp/>Example<sp/>code<sp/>on<sp/>how<sp/>to<sp/>implemented<sp/>FType</highlight></codeline>
<codeline><highlight class="normal">void<sp/>MyPackedFunc(TVMArgs<sp/>args,<sp/>TVMRetValue*<sp/>rv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>automatically<sp/>convert<sp/>arguments<sp/>to<sp/>desired<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>a0<sp/>=<sp/>args[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>float<sp/>a1<sp/>=<sp/>args[1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>automatically<sp/>assign<sp/>values<sp/>to<sp/>rv</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::string<sp/>my_return_value<sp/>=<sp/>&quot;x&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*rv<sp/>=<sp/>my_return_value;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="111" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1PackedFunc_1a83a608602fbda4f6d4089adf8303510e" prot="private" static="no" mutable="no">
        <type><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" kindref="member">FType</ref></type>
        <definition>FType tvm::runtime::PackedFunc::body_</definition>
        <argsstring></argsstring>
        <name>body_</name>
        <briefdescription>
<para>internal container of packed function </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="156" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1PackedFunc_1ac04ed1678799ef2f0d22204edddcdb41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::runtime::PackedFunc::PackedFunc</definition>
        <argsstring>()</argsstring>
        <name>PackedFunc</name>
        <briefdescription>
<para>default constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="113" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1PackedFunc_1afde7eaa98f6cb12c7e80da16e859c210" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::runtime::PackedFunc::PackedFunc</definition>
        <argsstring>(std::nullptr_t null)</argsstring>
        <name>PackedFunc</name>
        <param>
          <type>std::nullptr_t</type>
          <declname>null</declname>
        </param>
        <briefdescription>
<para>constructor from null </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="115" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1PackedFunc_1a66c99486332437e0459429dd00db2710" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::runtime::PackedFunc::PackedFunc</definition>
        <argsstring>(FType body)</argsstring>
        <name>PackedFunc</name>
        <param>
          <type><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" kindref="member">FType</ref></type>
          <declname>body</declname>
        </param>
        <briefdescription>
<para>constructing a packed function from a std::function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>the internal container of packed function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="120" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1PackedFunc_1a4e0c70245a080d914946285ff3ebc0d7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref></type>
        <definition>TVMRetValue tvm::runtime::PackedFunc::operator()</definition>
        <argsstring>(Args &amp;&amp;...args) const </argsstring>
        <name>operator()</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Call packed function by directly passing in unpacked format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments to be passed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to be passed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">//<sp/>Example<sp/>code<sp/>on<sp/>how<sp/>to<sp/>call<sp/>packed<sp/>function</highlight></codeline>
<codeline><highlight class="normal">void<sp/>CallPacked(PackedFunc<sp/>f)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>call<sp/>like<sp/>normal<sp/>functions<sp/>by<sp/>pass<sp/>in<sp/>arguments</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>return<sp/>value<sp/>is<sp/>automatically<sp/>converted<sp/>back</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>rvalue<sp/>=<sp/>f(1,<sp/>2.0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="136" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="1264" bodyend="1274"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1PackedFunc_1aa90598e3e64b32de7ebfc5e09208afa4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::runtime::PackedFunc::CallPacked</definition>
        <argsstring>(TVMArgs args, TVMRetValue *rv) const </argsstring>
        <name>CallPacked</name>
        <param>
          <type><ref refid="classtvm_1_1runtime_1_1TVMArgs" kindref="compound">TVMArgs</ref></type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref> *</type>
          <declname>rv</declname>
        </param>
        <briefdescription>
<para>Call the function in packed format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rv</parametername>
</parameternamelist>
<parameterdescription>
<para>The return value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="142" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="1100" bodyend="1102"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1PackedFunc_1a14fb895cbdceecbe566588b7467dafc3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" kindref="member">FType</ref></type>
        <definition>PackedFunc::FType tvm::runtime::PackedFunc::body</definition>
        <argsstring>() const </argsstring>
        <name>body</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the internal body function </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="144" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="1104" bodyend="1106"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1PackedFunc_1acfc585ee6554c18706fcfe89d3c6df87" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::runtime::PackedFunc::operator==</definition>
        <argsstring>(std::nullptr_t null) const </argsstring>
        <name>operator==</name>
        <param>
          <type>std::nullptr_t</type>
          <declname>null</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the packed function is nullptr </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="146" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="146" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1PackedFunc_1ad70b44cf7f2719f1e91fe7c865790865" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::runtime::PackedFunc::operator!=</definition>
        <argsstring>(std::nullptr_t null) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>std::nullptr_t</type>
          <declname>null</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the packed function is not nullptr </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="150" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="150" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Packed function is a type-erased function. The arguments are passed by packed format. </para>    </briefdescription>
    <detaileddescription>
<para>This is an useful unified interface to call generated functions, It is the unified function function type of TVM. It corresponds to TVMFunctionHandle in C runtime API. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="6017">
        <label>tvm::runtime::PackedFunc</label>
        <link refid="classtvm_1_1runtime_1_1PackedFunc"/>
      </node>
    </collaborationgraph>
    <location file="include/tvm/runtime/packed_func.h" line="91" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="91" bodyend="157"/>
    <listofallmembers>
      <member refid="classtvm_1_1runtime_1_1PackedFunc_1a14fb895cbdceecbe566588b7467dafc3" prot="public" virt="non-virtual"><scope>tvm::runtime::PackedFunc</scope><name>body</name></member>
      <member refid="classtvm_1_1runtime_1_1PackedFunc_1a83a608602fbda4f6d4089adf8303510e" prot="private" virt="non-virtual"><scope>tvm::runtime::PackedFunc</scope><name>body_</name></member>
      <member refid="classtvm_1_1runtime_1_1PackedFunc_1aa90598e3e64b32de7ebfc5e09208afa4" prot="public" virt="non-virtual"><scope>tvm::runtime::PackedFunc</scope><name>CallPacked</name></member>
      <member refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" prot="public" virt="non-virtual"><scope>tvm::runtime::PackedFunc</scope><name>FType</name></member>
      <member refid="classtvm_1_1runtime_1_1PackedFunc_1ad70b44cf7f2719f1e91fe7c865790865" prot="public" virt="non-virtual"><scope>tvm::runtime::PackedFunc</scope><name>operator!=</name></member>
      <member refid="classtvm_1_1runtime_1_1PackedFunc_1a4e0c70245a080d914946285ff3ebc0d7" prot="public" virt="non-virtual"><scope>tvm::runtime::PackedFunc</scope><name>operator()</name></member>
      <member refid="classtvm_1_1runtime_1_1PackedFunc_1acfc585ee6554c18706fcfe89d3c6df87" prot="public" virt="non-virtual"><scope>tvm::runtime::PackedFunc</scope><name>operator==</name></member>
      <member refid="classtvm_1_1runtime_1_1PackedFunc_1ac04ed1678799ef2f0d22204edddcdb41" prot="public" virt="non-virtual"><scope>tvm::runtime::PackedFunc</scope><name>PackedFunc</name></member>
      <member refid="classtvm_1_1runtime_1_1PackedFunc_1afde7eaa98f6cb12c7e80da16e859c210" prot="public" virt="non-virtual"><scope>tvm::runtime::PackedFunc</scope><name>PackedFunc</name></member>
      <member refid="classtvm_1_1runtime_1_1PackedFunc_1a66c99486332437e0459429dd00db2710" prot="public" virt="non-virtual"><scope>tvm::runtime::PackedFunc</scope><name>PackedFunc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
