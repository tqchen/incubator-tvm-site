<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1arith_1_1ModularSetAnalyzer" kind="class" language="C++" prot="public">
    <compoundname>tvm::arith::ModularSetAnalyzer</compoundname>
    <includes refid="analyzer_8h" local="no">analyzer.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtvm_1_1arith_1_1ModularSetAnalyzer_1a88d594816df596eed10643082b0d0805" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Analyzer</definition>
        <argsstring></argsstring>
        <name>Analyzer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/analyzer.h" line="219" column="1" bodyfile="include/tvm/arith/analyzer.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtvm_1_1arith_1_1ModularSetAnalyzer_1ab8bf22547cf1df0a28fc4ee98841ab89" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ConstraintContext</definition>
        <argsstring></argsstring>
        <name>ConstraintContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/analyzer.h" line="220" column="1" bodyfile="include/tvm/arith/analyzer.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtvm_1_1arith_1_1ModularSetAnalyzer_1a3dbd2fc98040a6c06580f120579e5a88" prot="private" static="no" mutable="no">
        <type>Impl *</type>
        <definition>Impl* tvm::arith::ModularSetAnalyzer::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
<para>Internal impl. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/analyzer.h" line="233" column="1" bodyfile="include/tvm/arith/analyzer.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1arith_1_1ModularSetAnalyzer_1a57c3c62ebc821f5f01bc2b43f06488da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1arith_1_1ModularSet" kindref="compound">ModularSet</ref></type>
        <definition>ModularSet tvm::arith::ModularSetAnalyzer::operator()</definition>
        <argsstring>(const PrimExpr &amp;expr)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>analyze the expr </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>The expression of interest. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the result of the analysis. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/analyzer.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1ModularSetAnalyzer_1a798cd8c3a1c5cae3c84080373c6913e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::arith::ModularSetAnalyzer::Update</definition>
        <argsstring>(const Var &amp;var, const ModularSet &amp;info, bool override=false)</argsstring>
        <name>Update</name>
        <param>
          <type>const Var &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1arith_1_1ModularSet" kindref="compound">ModularSet</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>override</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Update constant int bound information of var. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable of interest. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>The bound information. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>override</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether do we allow override of existing information. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/analyzer.h" line="214" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtvm_1_1arith_1_1ModularSetAnalyzer_1aa8f45a8094ec87a5509e9982aba4c533" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>tvm::arith::ModularSetAnalyzer::ModularSetAnalyzer</definition>
        <argsstring>(Analyzer *parent)</argsstring>
        <name>ModularSetAnalyzer</name>
        <param>
          <type><ref refid="classtvm_1_1arith_1_1Analyzer" kindref="compound">Analyzer</ref> *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/analyzer.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1ModularSetAnalyzer_1aace74fd80e565112bdef5632427ac4f8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tvm::arith::ModularSetAnalyzer::~ModularSetAnalyzer</definition>
        <argsstring>()</argsstring>
        <name>~ModularSetAnalyzer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/analyzer.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1arith_1_1ModularSetAnalyzer_1a4bb3c0782984e91ebfca93832985a7ad" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; tvm::arith::ModularSetAnalyzer::EnterConstraint</definition>
        <argsstring>(const PrimExpr &amp;constraint)</argsstring>
        <name>EnterConstraint</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>constraint</declname>
        </param>
        <briefdescription>
<para>Update the internal state to enter constraint. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>constraint</parametername>
</parameternamelist>
<parameterdescription>
<para>A constraint expression.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an exit function that must be called to cleanup the constraint can be nullptr. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/arith/analyzer.h" line="229" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classtvm_1_1arith_1_1Analyzer" kindref="compound">Analyzer</ref> to get modular information over expression. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="5772">
        <label>tvm::arith::ModularSetAnalyzer</label>
        <link refid="classtvm_1_1arith_1_1ModularSetAnalyzer"/>
      </node>
    </collaborationgraph>
    <location file="include/tvm/arith/analyzer.h" line="199" column="1" bodyfile="include/tvm/arith/analyzer.h" bodystart="199" bodyend="234"/>
    <listofallmembers>
      <member refid="classtvm_1_1arith_1_1ModularSetAnalyzer_1a88d594816df596eed10643082b0d0805" prot="private" virt="non-virtual"><scope>tvm::arith::ModularSetAnalyzer</scope><name>Analyzer</name></member>
      <member refid="classtvm_1_1arith_1_1ModularSetAnalyzer_1ab8bf22547cf1df0a28fc4ee98841ab89" prot="private" virt="non-virtual"><scope>tvm::arith::ModularSetAnalyzer</scope><name>ConstraintContext</name></member>
      <member refid="classtvm_1_1arith_1_1ModularSetAnalyzer_1a4bb3c0782984e91ebfca93832985a7ad" prot="private" virt="non-virtual"><scope>tvm::arith::ModularSetAnalyzer</scope><name>EnterConstraint</name></member>
      <member refid="classtvm_1_1arith_1_1ModularSetAnalyzer_1a3dbd2fc98040a6c06580f120579e5a88" prot="private" virt="non-virtual"><scope>tvm::arith::ModularSetAnalyzer</scope><name>impl_</name></member>
      <member refid="classtvm_1_1arith_1_1ModularSetAnalyzer_1aa8f45a8094ec87a5509e9982aba4c533" prot="private" virt="non-virtual"><scope>tvm::arith::ModularSetAnalyzer</scope><name>ModularSetAnalyzer</name></member>
      <member refid="classtvm_1_1arith_1_1ModularSetAnalyzer_1a57c3c62ebc821f5f01bc2b43f06488da" prot="public" virt="non-virtual"><scope>tvm::arith::ModularSetAnalyzer</scope><name>operator()</name></member>
      <member refid="classtvm_1_1arith_1_1ModularSetAnalyzer_1a798cd8c3a1c5cae3c84080373c6913e9" prot="public" virt="non-virtual"><scope>tvm::arith::ModularSetAnalyzer</scope><name>Update</name></member>
      <member refid="classtvm_1_1arith_1_1ModularSetAnalyzer_1aace74fd80e565112bdef5632427ac4f8" prot="private" virt="non-virtual"><scope>tvm::arith::ModularSetAnalyzer</scope><name>~ModularSetAnalyzer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
