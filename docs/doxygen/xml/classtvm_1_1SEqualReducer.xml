<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1SEqualReducer" kind="class" language="C++" prot="public">
    <compoundname>tvm::SEqualReducer</compoundname>
    <basecompoundref refid="classtvm_1_1BaseValueEqual" prot="public" virt="non-virtual">tvm::BaseValueEqual</basecompoundref>
    <includes refid="structural__equal_8h" local="no">structural_equal.h</includes>
    <innerclass refid="classtvm_1_1SEqualReducer_1_1Handler" prot="public">tvm::SEqualReducer::Handler</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtvm_1_1SEqualReducer_1a8306f596ced5f6e14f5c04fe879ed06d" prot="private" static="no" mutable="no">
        <type><ref refid="classtvm_1_1SEqualReducer_1_1Handler" kindref="compound">Handler</ref> *</type>
        <definition>Handler* tvm::SEqualReducer::handler_</definition>
        <argsstring></argsstring>
        <name>handler_</name>
        <briefdescription>
<para>Internal class pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="219" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1SEqualReducer_1a71cb817e0913b0a521e52a06c2fabf2c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool tvm::SEqualReducer::map_free_vars_</definition>
        <argsstring></argsstring>
        <name>map_free_vars_</name>
        <briefdescription>
<para>Whether or not to map free vars. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="221" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1SEqualReducer_1abb85d3142af880fb96ae79423e5c382e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tvm::SEqualReducer::SEqualReducer</definition>
        <argsstring>()=default</argsstring>
        <name>SEqualReducer</name>
        <briefdescription>
<para>default constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1SEqualReducer_1a2562e028a0298c0e45d5ebbb98545fa4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::SEqualReducer::SEqualReducer</definition>
        <argsstring>(Handler *handler, bool map_free_vars)</argsstring>
        <name>SEqualReducer</name>
        <param>
          <type><ref refid="classtvm_1_1SEqualReducer_1_1Handler" kindref="compound">Handler</ref> *</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>map_free_vars</declname>
        </param>
        <briefdescription>
<para><ref refid="classtvm_1_1Constructor" kindref="compound">Constructor</ref> with a specific handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The equal handler for objects. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_free_vars</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to map free variables. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="157" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="157" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1SEqualReducer_1a530065b8aa051c777ccf5b4d71c2c66c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::SEqualReducer::operator()</definition>
        <argsstring>(const ObjectRef &amp;lhs, const ObjectRef &amp;rhs) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const ObjectRef &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const ObjectRef &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Reduce condition to comparison of two objects. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the immediate check result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="165" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1SEqualReducer_1a62ba4c55928d4886853f9c33f4147340" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::SEqualReducer::DefEqual</definition>
        <argsstring>(const ObjectRef &amp;lhs, const ObjectRef &amp;rhs)</argsstring>
        <name>DefEqual</name>
        <param>
          <type>const ObjectRef &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const ObjectRef &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Reduce condition to comparison of two definitions, where free vars can be mapped. </para>        </briefdescription>
        <detaileddescription>
<para>Call this function to compare definition points such as function params and var in a let-binding.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the immediate check result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="179" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1SEqualReducer_1a75b0feb43cf0a2b789170bbefb45ccf1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool tvm::SEqualReducer::operator()</definition>
        <argsstring>(const Array&lt; T &gt; &amp;lhs, const Array&lt; T &gt; &amp;rhs) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Reduce condition to comparison of two arrays. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the immediate check result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="189" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="189" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1SEqualReducer_1af49dfe588f340f8e44dc245f2cb9a030" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::SEqualReducer::FreeVarEqualImpl</definition>
        <argsstring>(const runtime::Object *lhs, const runtime::Object *rhs) const </argsstring>
        <name>FreeVarEqualImpl</name>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1Object" kindref="compound">runtime::Object</ref> *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1Object" kindref="compound">runtime::Object</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Implementation for equality rule of var type objects(e.g. <ref refid="classtvm_1_1TypeVar" kindref="compound">TypeVar</ref>, <ref refid="classtvm_1_1tir_1_1Var" kindref="compound">tir::Var</ref>). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="204" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="204" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1SEqualReducer_1ab910dfcb744d509bc7ac4854ab1a2abd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1SEqualReducer_1_1Handler" kindref="compound">Handler</ref> *</type>
        <definition>Handler* tvm::SEqualReducer::operator-&gt;</definition>
        <argsstring>() const </argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Get the internal handler. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/structural_equal.h" line="213" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="213" bodyend="215"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Reducer class to reduce the structural equality result of two objects. </para>    </briefdescription>
    <detaileddescription>
<para>The reducer will call the SEqualReduce function of each objects recursively. Importantly, the reducer may not directly use recursive calls to resolve the equality checking. Instead, it can store the necessary equality conditions and check later via an internally managed stack. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="6751">
        <label>tvm::SEqualReducer</label>
        <link refid="classtvm_1_1SEqualReducer"/>
        <childnode refid="6752" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6752">
        <label>tvm::BaseValueEqual</label>
        <link refid="classtvm_1_1BaseValueEqual"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6753">
        <label>tvm::SEqualReducer</label>
        <link refid="classtvm_1_1SEqualReducer"/>
        <childnode refid="6754" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6754">
        <label>tvm::BaseValueEqual</label>
        <link refid="classtvm_1_1BaseValueEqual"/>
      </node>
    </collaborationgraph>
    <location file="include/tvm/node/structural_equal.h" line="114" column="1" bodyfile="include/tvm/node/structural_equal.h" bodystart="114" bodyend="222"/>
    <listofallmembers>
      <member refid="classtvm_1_1SEqualReducer_1a62ba4c55928d4886853f9c33f4147340" prot="public" virt="non-virtual"><scope>tvm::SEqualReducer</scope><name>DefEqual</name></member>
      <member refid="classtvm_1_1SEqualReducer_1af49dfe588f340f8e44dc245f2cb9a030" prot="public" virt="non-virtual"><scope>tvm::SEqualReducer</scope><name>FreeVarEqualImpl</name></member>
      <member refid="classtvm_1_1SEqualReducer_1a8306f596ced5f6e14f5c04fe879ed06d" prot="private" virt="non-virtual"><scope>tvm::SEqualReducer</scope><name>handler_</name></member>
      <member refid="classtvm_1_1SEqualReducer_1a71cb817e0913b0a521e52a06c2fabf2c" prot="private" virt="non-virtual"><scope>tvm::SEqualReducer</scope><name>map_free_vars_</name></member>
      <member refid="classtvm_1_1SEqualReducer_1a530065b8aa051c777ccf5b4d71c2c66c" prot="public" virt="non-virtual"><scope>tvm::SEqualReducer</scope><name>operator()</name></member>
      <member refid="classtvm_1_1SEqualReducer_1a75b0feb43cf0a2b789170bbefb45ccf1" prot="public" virt="non-virtual"><scope>tvm::SEqualReducer</scope><name>operator()</name></member>
      <member refid="classtvm_1_1BaseValueEqual_1a5bcd390efea36f5ea22ea88c2b49d0e4" prot="public" virt="non-virtual" ambiguityscope="tvm::BaseValueEqual::"><scope>tvm::SEqualReducer</scope><name>operator()</name></member>
      <member refid="classtvm_1_1BaseValueEqual_1a64a27662996232361171c0b83ef64efc" prot="public" virt="non-virtual" ambiguityscope="tvm::BaseValueEqual::"><scope>tvm::SEqualReducer</scope><name>operator()</name></member>
      <member refid="classtvm_1_1BaseValueEqual_1aa073e7b407abe9736f3dfc82b1d17dfe" prot="public" virt="non-virtual" ambiguityscope="tvm::BaseValueEqual::"><scope>tvm::SEqualReducer</scope><name>operator()</name></member>
      <member refid="classtvm_1_1BaseValueEqual_1a2d2542641197aa4f5d6e00dd826c41fa" prot="public" virt="non-virtual" ambiguityscope="tvm::BaseValueEqual::"><scope>tvm::SEqualReducer</scope><name>operator()</name></member>
      <member refid="classtvm_1_1BaseValueEqual_1ad3272aa40535658ca5dd8658e392ba91" prot="public" virt="non-virtual" ambiguityscope="tvm::BaseValueEqual::"><scope>tvm::SEqualReducer</scope><name>operator()</name></member>
      <member refid="classtvm_1_1BaseValueEqual_1a70b32b6f7a8c60f754ed8dd945030bbb" prot="public" virt="non-virtual" ambiguityscope="tvm::BaseValueEqual::"><scope>tvm::SEqualReducer</scope><name>operator()</name></member>
      <member refid="classtvm_1_1BaseValueEqual_1a76b682e3ea647fae4e0da9651674417a" prot="public" virt="non-virtual" ambiguityscope="tvm::BaseValueEqual::"><scope>tvm::SEqualReducer</scope><name>operator()</name></member>
      <member refid="classtvm_1_1BaseValueEqual_1a384fdf8cfd26188b4ec6febae8e698df" prot="public" virt="non-virtual" ambiguityscope="tvm::BaseValueEqual::"><scope>tvm::SEqualReducer</scope><name>operator()</name></member>
      <member refid="classtvm_1_1SEqualReducer_1ab910dfcb744d509bc7ac4854ab1a2abd" prot="public" virt="non-virtual"><scope>tvm::SEqualReducer</scope><name>operator-&gt;</name></member>
      <member refid="classtvm_1_1SEqualReducer_1abb85d3142af880fb96ae79423e5c382e" prot="public" virt="non-virtual"><scope>tvm::SEqualReducer</scope><name>SEqualReducer</name></member>
      <member refid="classtvm_1_1SEqualReducer_1a2562e028a0298c0e45d5ebbb98545fa4" prot="public" virt="non-virtual"><scope>tvm::SEqualReducer</scope><name>SEqualReducer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
