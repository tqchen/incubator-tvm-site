<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespacetvm" kind="namespace" language="C++">
    <compoundname>tvm</compoundname>
    <innerclass refid="classtvm_1_1Array" prot="public">tvm::Array</innerclass>
    <innerclass refid="classtvm_1_1ArrayNode" prot="public">tvm::ArrayNode</innerclass>
    <innerclass refid="structtvm_1_1AttrError" prot="public">tvm::AttrError</innerclass>
    <innerclass refid="classtvm_1_1AttrFieldInfo" prot="public">tvm::AttrFieldInfo</innerclass>
    <innerclass refid="classtvm_1_1AttrFieldInfoNode" prot="public">tvm::AttrFieldInfoNode</innerclass>
    <innerclass refid="classtvm_1_1Attrs" prot="public">tvm::Attrs</innerclass>
    <innerclass refid="classtvm_1_1AttrsEqual" prot="public">tvm::AttrsEqual</innerclass>
    <innerclass refid="classtvm_1_1AttrsHash" prot="public">tvm::AttrsHash</innerclass>
    <innerclass refid="classtvm_1_1AttrsNode" prot="public">tvm::AttrsNode</innerclass>
    <innerclass refid="classtvm_1_1AttrVisitor" prot="public">tvm::AttrVisitor</innerclass>
    <innerclass refid="classtvm_1_1BaseAttrsNode" prot="public">tvm::BaseAttrsNode</innerclass>
    <innerclass refid="classtvm_1_1BaseExpr" prot="public">tvm::BaseExpr</innerclass>
    <innerclass refid="classtvm_1_1BaseExprNode" prot="public">tvm::BaseExprNode</innerclass>
    <innerclass refid="classtvm_1_1BaseFunc" prot="public">tvm::BaseFunc</innerclass>
    <innerclass refid="classtvm_1_1BaseFuncNode" prot="public">tvm::BaseFuncNode</innerclass>
    <innerclass refid="classtvm_1_1BaseTensorType" prot="public">tvm::BaseTensorType</innerclass>
    <innerclass refid="classtvm_1_1BaseTensorTypeNode" prot="public">tvm::BaseTensorTypeNode</innerclass>
    <innerclass refid="classtvm_1_1BaseValueEqual" prot="public">tvm::BaseValueEqual</innerclass>
    <innerclass refid="classtvm_1_1BaseValueHash" prot="public">tvm::BaseValueHash</innerclass>
    <innerclass refid="classtvm_1_1BuildConfig" prot="public">tvm::BuildConfig</innerclass>
    <innerclass refid="classtvm_1_1BuildConfigNode" prot="public">tvm::BuildConfigNode</innerclass>
    <innerclass refid="classtvm_1_1Constructor" prot="public">tvm::Constructor</innerclass>
    <innerclass refid="classtvm_1_1ConstructorNode" prot="public">tvm::ConstructorNode</innerclass>
    <innerclass refid="classtvm_1_1DictAttrs" prot="public">tvm::DictAttrs</innerclass>
    <innerclass refid="classtvm_1_1DictAttrsNode" prot="public">tvm::DictAttrsNode</innerclass>
    <innerclass refid="classtvm_1_1EnvFunc" prot="public">tvm::EnvFunc</innerclass>
    <innerclass refid="classtvm_1_1EnvFuncNode" prot="public">tvm::EnvFuncNode</innerclass>
    <innerclass refid="classtvm_1_1Error" prot="public">tvm::Error</innerclass>
    <innerclass refid="structtvm_1_1ErrorBuilder" prot="public">tvm::ErrorBuilder</innerclass>
    <innerclass refid="classtvm_1_1ErrorReporter" prot="public">tvm::ErrorReporter</innerclass>
    <innerclass refid="classtvm_1_1FloatImm" prot="public">tvm::FloatImm</innerclass>
    <innerclass refid="classtvm_1_1FloatImmNode" prot="public">tvm::FloatImmNode</innerclass>
    <innerclass refid="classtvm_1_1FuncType" prot="public">tvm::FuncType</innerclass>
    <innerclass refid="classtvm_1_1FuncTypeNode" prot="public">tvm::FuncTypeNode</innerclass>
    <innerclass refid="classtvm_1_1GenericFunc" prot="public">tvm::GenericFunc</innerclass>
    <innerclass refid="classtvm_1_1GenericFuncNode" prot="public">tvm::GenericFuncNode</innerclass>
    <innerclass refid="classtvm_1_1GenericOpMap" prot="public">tvm::GenericOpMap</innerclass>
    <innerclass refid="classtvm_1_1GlobalTypeVar" prot="public">tvm::GlobalTypeVar</innerclass>
    <innerclass refid="classtvm_1_1GlobalTypeVarNode" prot="public">tvm::GlobalTypeVarNode</innerclass>
    <innerclass refid="classtvm_1_1GlobalVar" prot="public">tvm::GlobalVar</innerclass>
    <innerclass refid="classtvm_1_1GlobalVarNode" prot="public">tvm::GlobalVarNode</innerclass>
    <innerclass refid="classtvm_1_1IncompleteType" prot="public">tvm::IncompleteType</innerclass>
    <innerclass refid="classtvm_1_1IncompleteTypeNode" prot="public">tvm::IncompleteTypeNode</innerclass>
    <innerclass refid="classtvm_1_1Integer" prot="public">tvm::Integer</innerclass>
    <innerclass refid="classtvm_1_1IntImm" prot="public">tvm::IntImm</innerclass>
    <innerclass refid="classtvm_1_1IntImmNode" prot="public">tvm::IntImmNode</innerclass>
    <innerclass refid="classtvm_1_1IRModule" prot="public">tvm::IRModule</innerclass>
    <innerclass refid="classtvm_1_1IRModuleNode" prot="public">tvm::IRModuleNode</innerclass>
    <innerclass refid="classtvm_1_1IterAdapter" prot="public">tvm::IterAdapter</innerclass>
    <innerclass refid="classtvm_1_1Map" prot="public">tvm::Map</innerclass>
    <innerclass refid="classtvm_1_1MapNode" prot="public">tvm::MapNode</innerclass>
    <innerclass refid="classtvm_1_1MemoryInfo" prot="public">tvm::MemoryInfo</innerclass>
    <innerclass refid="classtvm_1_1MemoryInfoNode" prot="public">tvm::MemoryInfoNode</innerclass>
    <innerclass refid="classtvm_1_1NodeFunctor" prot="public">tvm::NodeFunctor</innerclass>
    <innerclass refid="classtvm_1_1NodeFunctor_3_01R_07const_01ObjectRef_01_6n_00_01Args_8_8_8_08_4" prot="public">tvm::NodeFunctor&lt; R(const ObjectRef &amp;n, Args...)&gt;</innerclass>
    <innerclass refid="classtvm_1_1Op" prot="public">tvm::Op</innerclass>
    <innerclass refid="classtvm_1_1OpMap" prot="public">tvm::OpMap</innerclass>
    <innerclass refid="classtvm_1_1OpNode" prot="public">tvm::OpNode</innerclass>
    <innerclass refid="classtvm_1_1OpRegistry" prot="public">tvm::OpRegistry</innerclass>
    <innerclass refid="classtvm_1_1PointerType" prot="public">tvm::PointerType</innerclass>
    <innerclass refid="classtvm_1_1PointerTypeNode" prot="public">tvm::PointerTypeNode</innerclass>
    <innerclass refid="classtvm_1_1PrimExpr" prot="public">tvm::PrimExpr</innerclass>
    <innerclass refid="classtvm_1_1PrimExprNode" prot="public">tvm::PrimExprNode</innerclass>
    <innerclass refid="classtvm_1_1PrimType" prot="public">tvm::PrimType</innerclass>
    <innerclass refid="classtvm_1_1PrimTypeNode" prot="public">tvm::PrimTypeNode</innerclass>
    <innerclass refid="classtvm_1_1Range" prot="public">tvm::Range</innerclass>
    <innerclass refid="classtvm_1_1RangeNode" prot="public">tvm::RangeNode</innerclass>
    <innerclass refid="classtvm_1_1ReflectionVTable" prot="public">tvm::ReflectionVTable</innerclass>
    <innerclass refid="classtvm_1_1RelayExpr" prot="public">tvm::RelayExpr</innerclass>
    <innerclass refid="classtvm_1_1RelayExprNode" prot="public">tvm::RelayExprNode</innerclass>
    <innerclass refid="classtvm_1_1RelayRefType" prot="public">tvm::RelayRefType</innerclass>
    <innerclass refid="classtvm_1_1RelayRefTypeNode" prot="public">tvm::RelayRefTypeNode</innerclass>
    <innerclass refid="classtvm_1_1ReprPrinter" prot="public">tvm::ReprPrinter</innerclass>
    <innerclass refid="classtvm_1_1SEqualReducer" prot="public">tvm::SEqualReducer</innerclass>
    <innerclass refid="classtvm_1_1SHashReducer" prot="public">tvm::SHashReducer</innerclass>
    <innerclass refid="classtvm_1_1SourceName" prot="public">tvm::SourceName</innerclass>
    <innerclass refid="classtvm_1_1SourceNameNode" prot="public">tvm::SourceNameNode</innerclass>
    <innerclass refid="classtvm_1_1Span" prot="public">tvm::Span</innerclass>
    <innerclass refid="classtvm_1_1SpanNode" prot="public">tvm::SpanNode</innerclass>
    <innerclass refid="classtvm_1_1StrMapNode" prot="public">tvm::StrMapNode</innerclass>
    <innerclass refid="classtvm_1_1StructuralEqual" prot="public">tvm::StructuralEqual</innerclass>
    <innerclass refid="classtvm_1_1StructuralHash" prot="public">tvm::StructuralHash</innerclass>
    <innerclass refid="classtvm_1_1Target" prot="public">tvm::Target</innerclass>
    <innerclass refid="classtvm_1_1TargetNode" prot="public">tvm::TargetNode</innerclass>
    <innerclass refid="classtvm_1_1TensorType" prot="public">tvm::TensorType</innerclass>
    <innerclass refid="classtvm_1_1TensorTypeNode" prot="public">tvm::TensorTypeNode</innerclass>
    <innerclass refid="classtvm_1_1TupleType" prot="public">tvm::TupleType</innerclass>
    <innerclass refid="classtvm_1_1TupleTypeNode" prot="public">tvm::TupleTypeNode</innerclass>
    <innerclass refid="classtvm_1_1Type" prot="public">tvm::Type</innerclass>
    <innerclass refid="classtvm_1_1TypeCall" prot="public">tvm::TypeCall</innerclass>
    <innerclass refid="classtvm_1_1TypeCallNode" prot="public">tvm::TypeCallNode</innerclass>
    <innerclass refid="classtvm_1_1TypeConstraint" prot="public">tvm::TypeConstraint</innerclass>
    <innerclass refid="classtvm_1_1TypeConstraintNode" prot="public">tvm::TypeConstraintNode</innerclass>
    <innerclass refid="classtvm_1_1TypeData" prot="public">tvm::TypeData</innerclass>
    <innerclass refid="classtvm_1_1TypeDataNode" prot="public">tvm::TypeDataNode</innerclass>
    <innerclass refid="classtvm_1_1TypedEnvFunc" prot="public">tvm::TypedEnvFunc</innerclass>
    <innerclass refid="classtvm_1_1TypedEnvFunc_3_01R_07Args_8_8_8_08_4" prot="public">tvm::TypedEnvFunc&lt; R(Args...)&gt;</innerclass>
    <innerclass refid="classtvm_1_1TypeFunctor" prot="public">tvm::TypeFunctor</innerclass>
    <innerclass refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4" prot="public">tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</innerclass>
    <innerclass refid="classtvm_1_1TypeMutator" prot="public">tvm::TypeMutator</innerclass>
    <innerclass refid="classtvm_1_1TypeNode" prot="public">tvm::TypeNode</innerclass>
    <innerclass refid="classtvm_1_1TypeRelation" prot="public">tvm::TypeRelation</innerclass>
    <innerclass refid="classtvm_1_1TypeRelationNode" prot="public">tvm::TypeRelationNode</innerclass>
    <innerclass refid="classtvm_1_1TypeReporter" prot="public">tvm::TypeReporter</innerclass>
    <innerclass refid="classtvm_1_1TypeReporterNode" prot="public">tvm::TypeReporterNode</innerclass>
    <innerclass refid="classtvm_1_1TypeVar" prot="public">tvm::TypeVar</innerclass>
    <innerclass refid="classtvm_1_1TypeVarNode" prot="public">tvm::TypeVarNode</innerclass>
    <innerclass refid="classtvm_1_1TypeVisitor" prot="public">tvm::TypeVisitor</innerclass>
    <innerclass refid="classtvm_1_1With" prot="public">tvm::With</innerclass>
    <innernamespace refid="namespacetvm_1_1arith">tvm::arith</innernamespace>
    <innernamespace refid="namespacetvm_1_1attr">tvm::attr</innernamespace>
    <innernamespace refid="namespacetvm_1_1codegen">tvm::codegen</innernamespace>
    <innernamespace refid="namespacetvm_1_1detail">tvm::detail</innernamespace>
    <innernamespace refid="namespacetvm_1_1relay">tvm::relay</innernamespace>
    <innernamespace refid="namespacetvm_1_1runtime">tvm::runtime</innernamespace>
    <innernamespace refid="namespacetvm_1_1target">tvm::target</innernamespace>
    <innernamespace refid="namespacetvm_1_1te">tvm::te</innernamespace>
    <innernamespace refid="namespacetvm_1_1tir">tvm::tir</innernamespace>
    <innernamespace refid="namespacetvm_1_1transform">tvm::transform</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacetvm_1a85e4536ea4e1c8d3d48c61135f0a8ff0" prot="public" static="no">
        <name>CallingConv</name>
        <enumvalue id="namespacetvm_1a85e4536ea4e1c8d3d48c61135f0a8ff0a6867faeaa475fda467e48267db2bb8a8" prot="public">
          <name>kDefault</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Default calling convetion. </para>          </briefdescription>
          <detaileddescription>
<para><itemizedlist>
<listitem><para>Uses the native calling convention of the target.</para></listitem><listitem><para>Implementation: specified by the native target. </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1a85e4536ea4e1c8d3d48c61135f0a8ff0aea7c0ea92da6200bb14ea17a6094e2bc" prot="public">
          <name>kDeviceKernelLaunch</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Device kernel launch. </para>          </briefdescription>
          <detaileddescription>
<para><itemizedlist>
<listitem><para>Call by PackedFunc calling convention.</para></listitem><listitem><para>Implementation: defined by device runtime(e.g. runtime/cuda) </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1a85e4536ea4e1c8d3d48c61135f0a8ff0ae7694043e4825265becdb58550b4e443" prot="public">
          <name>kCPackedFunc</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>PackedFunc that exposes a CPackedFunc signature. </para>          </briefdescription>
          <detaileddescription>
<para><itemizedlist>
<listitem><para>Calling by PackedFunc calling convention.</para></listitem><listitem><para>Implementation: Expose a function with the CPackedFunc signature. </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible Calling conventions. </para>        </briefdescription>
        <detaileddescription>
<para>NOTE: The calling convention also implies the way we implement the function during lowering. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/function.h" line="41" column="1" bodyfile="include/tvm/ir/function.h" bodystart="41" bodyend="63"/>
      </memberdef>
      <memberdef kind="enum" id="namespacetvm_1acd267f8d7f55da6ac681239831963279" prot="public" static="no">
        <name>TypeKind</name>
        <enumvalue id="namespacetvm_1acd267f8d7f55da6ac681239831963279a46f081c7ea2307c83d3cdfd42e1583f7" prot="public">
          <name>kType</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1acd267f8d7f55da6ac681239831963279ad7d44c9f700aa20bcc455c6d9ee4ff18" prot="public">
          <name>kShapeVar</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Template variable in shape expression. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1acd267f8d7f55da6ac681239831963279a86ff765603911600b938cea9a65e984b" prot="public">
          <name>kBaseType</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1acd267f8d7f55da6ac681239831963279a9496d61badd19161ce92108f06903606" prot="public">
          <name>kConstraint</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1acd267f8d7f55da6ac681239831963279ab6bf8f8bef54e7ebbc8d9f804e94421e" prot="public">
          <name>kAdtHandle</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetvm_1acd267f8d7f55da6ac681239831963279a8b02b25ecd96ab7f18ace5aa18f832ba" prot="public">
          <name>kTypeData</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible kinds of TypeVars. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type.h" line="194" column="1" bodyfile="include/tvm/ir/type.h" bodystart="194" bodyend="202"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacetvm_1a72dcba4493adfcd8908663898ece3514" prot="public" static="no">
        <type><ref refid="classtvm_1_1TypedEnvFunc" kindref="compound">TypedEnvFunc</ref>&lt; bool(const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Type" kindref="compound">Type</ref> &gt; &amp;args, int num_inputs, const <ref refid="classtvm_1_1Attrs" kindref="compound">Attrs</ref> &amp;attrs, const <ref refid="classtvm_1_1TypeReporter" kindref="compound">TypeReporter</ref> &amp;reporter)&gt;</type>
        <definition>using tvm::TypeRelationFn = typedef TypedEnvFunc&lt;bool(const Array&lt;Type&gt;&amp; args, int num_inputs, const Attrs&amp; attrs, const TypeReporter&amp; reporter)&gt;</definition>
        <argsstring></argsstring>
        <name>TypeRelationFn</name>
        <briefdescription>
<para>User defined type constraint function. </para>        </briefdescription>
        <detaileddescription>
<para>If the input type information can be used to fully decide the IncompleteTypes, then the function should call reporter.Assign to report the new types, and return true. Otherwise, the function should return false.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to the relation. The types are stored in the form of [input_type_0, input_type_1, ... input_type_n, output_type_0, output_type_1, ... output_type_m]</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of input types in the args. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attrs</parametername>
</parameternamelist>
<parameterdescription>
<para>The additional attributes of the operator. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reporter</parametername>
</parameternamelist>
<parameterdescription>
<para>The reporter to report solution to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if This relation cannot be resolved. true if this relation has been resolved. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_relation.h" line="172" column="1" bodyfile="include/tvm/ir/type_relation.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" prot="public" static="no">
        <type><ref refid="classtvm_1_1runtime_1_1DataType" kindref="compound">runtime::DataType</ref></type>
        <definition>using tvm::DataType = typedef runtime::DataType</definition>
        <argsstring></argsstring>
        <name>DataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/data_type.h" line="268" column="1" bodyfile="include/tvm/runtime/data_type.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacetvm_1a9284f30c0e1daf1649838578fed1baa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1LoweredFunc" kindref="compound">tir::LoweredFunc</ref> &gt;</type>
        <definition>Array&lt;tir::LoweredFunc&gt; tvm::lower</definition>
        <argsstring>(te::Schedule sch, const Array&lt; te::Tensor &gt; &amp;args, const std::string &amp;name, const std::unordered_map&lt; te::Tensor, tir::Buffer &gt; &amp;binds, const BuildConfig &amp;config)</argsstring>
        <name>lower</name>
        <param>
          <type><ref refid="classtvm_1_1te_1_1Schedule" kindref="compound">te::Schedule</ref></type>
          <declname>sch</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">te::Tensor</ref> &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">te::Tensor</ref>, <ref refid="classtvm_1_1tir_1_1Buffer" kindref="compound">tir::Buffer</ref> &gt; &amp;</type>
          <declname>binds</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1BuildConfig" kindref="compound">BuildConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Build a LoweredFunc given a schedule, args and binds. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sch</parametername>
</parameternamelist>
<parameterdescription>
<para>The schedule to lower. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the lowered function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>binds</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer assignments. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>The build configuration. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The lowered function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/driver/driver_api.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a66b6a4702f9c98e4e4c6c385da231903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1LoweredFunc" kindref="compound">tir::LoweredFunc</ref> &gt; &gt;</type>
        <definition>Array&lt;Array&lt;tir::LoweredFunc&gt; &gt; tvm::split_dev_host_funcs</definition>
        <argsstring>(const Array&lt; tir::LoweredFunc &gt; &amp;funcs, const Target &amp;target, const Target &amp;target_host, const BuildConfig &amp;config)</argsstring>
        <name>split_dev_host_funcs</name>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1LoweredFunc" kindref="compound">tir::LoweredFunc</ref> &gt; &amp;</type>
          <declname>funcs</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> &amp;</type>
          <declname>target_host</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1BuildConfig" kindref="compound">BuildConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Split host/device function and running necessary pass before build. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>funcs</parametername>
</parameternamelist>
<parameterdescription>
<para>The functions to be built. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target device to build for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_host</parametername>
</parameternamelist>
<parameterdescription>
<para>The target for building host code. To use the default, pass Target() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>The build configuration. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt;Array&lt;LoweredFunc&gt;&gt; with 2 elements. First is host function <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>, second is device function array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/driver/driver_api.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a50a9a7e42c754dc31caf6d74e4423ddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">runtime::Module</ref></type>
        <definition>runtime::Module tvm::build</definition>
        <argsstring>(const Array&lt; tir::LoweredFunc &gt; &amp;funcs, const Target &amp;target, const Target &amp;target_host, const BuildConfig &amp;config)</argsstring>
        <name>build</name>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1LoweredFunc" kindref="compound">tir::LoweredFunc</ref> &gt; &amp;</type>
          <declname>funcs</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> &amp;</type>
          <declname>target_host</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1BuildConfig" kindref="compound">BuildConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Build a device and host module for a specific target from an array of lowered functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>funcs</parametername>
</parameternamelist>
<parameterdescription>
<para>The functions to be built. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target device to build for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_host</parametername>
</parameternamelist>
<parameterdescription>
<para>The target for building host code. To use the default, pass Target() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>The build configuration. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The built module. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/driver/driver_api.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ab60e7a2ecb2573f5380a476d8c5aca6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">runtime::Module</ref></type>
        <definition>runtime::Module tvm::build</definition>
        <argsstring>(const Map&lt; Target, Array&lt; tir::LoweredFunc &gt;&gt; &amp;input, const Target &amp;target_host, const BuildConfig &amp;config)</argsstring>
        <name>build</name>
        <param>
          <type>const <ref refid="classtvm_1_1Map" kindref="compound">Map</ref>&lt; <ref refid="classtvm_1_1Target" kindref="compound">Target</ref>, <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1LoweredFunc" kindref="compound">tir::LoweredFunc</ref> &gt;&gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> &amp;</type>
          <declname>target_host</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1BuildConfig" kindref="compound">BuildConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Build a device and host module for a specific target from a map contains target to a list of lowered functions pairs. This function is used for heterogeneous build. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The map contains target to a list of lowered functions pairs. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_host</parametername>
</parameternamelist>
<parameterdescription>
<para>The target for building host code. To use the default, pass Target(). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>The build configuration. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The built module that contains code for different processors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/driver/driver_api.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a879a810167b7f65cbfe7975da151c06d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">runtime::Module</ref></type>
        <definition>runtime::Module tvm::build</definition>
        <argsstring>(const Map&lt; std::string, Array&lt; tir::LoweredFunc &gt;&gt; &amp;input, const Target &amp;target_host, const BuildConfig &amp;config)</argsstring>
        <name>build</name>
        <param>
          <type>const <ref refid="classtvm_1_1Map" kindref="compound">Map</ref>&lt; std::string, <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1LoweredFunc" kindref="compound">tir::LoweredFunc</ref> &gt;&gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> &amp;</type>
          <declname>target_host</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1BuildConfig" kindref="compound">BuildConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Build a device and host module for a specific target from a map contains target to a list of lowered functions pairs. This function is used for heterogeneous build. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The map contains target string to a list of lowered functions pairs. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_host</parametername>
</parameternamelist>
<parameterdescription>
<para>The target for building host code. To use the default, pass Target(). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>The build configuration. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The built module that contains code for different processors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/driver/driver_api.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ab6c242e8ac09beb463fba306948b7f15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TObjectRef</type>
          </param>
        </templateparamlist>
        <type>TObjectRef</type>
        <definition>TObjectRef tvm::NullValue</definition>
        <argsstring>()</argsstring>
        <name>NullValue</name>
        <briefdescription>
<para>Create a NodeRef type that represents null. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TNodeRef</parametername>
</parameternamelist>
<parameterdescription>
<para>the type to be created. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A instance that will represent None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/attrs.h" line="85" column="1" bodyfile="include/tvm/ir/attrs.h" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a28c693333c2b15702b1a9a57dec0fbf5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref></type>
        <definition>DataType tvm::NullValue&lt; DataType &gt;</definition>
        <argsstring>()</argsstring>
        <name>NullValue&lt; DataType &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/attrs.h" line="90" column="1" bodyfile="include/tvm/ir/attrs.h" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ae3262464aa53a0c8b1b6078dfadab049" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TFunc</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;           std::is_base_of&lt;BaseFunc, TFunc&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>TFunc</type>
        <definition>TFunc tvm::WithAttr</definition>
        <argsstring>(TFunc func, const std::string &amp;attr_key, ObjectRef attr_value)</argsstring>
        <name>WithAttr</name>
        <param>
          <type>TFunc</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>attr_key</declname>
        </param>
        <param>
          <type>ObjectRef</type>
          <declname>attr_value</declname>
        </param>
        <briefdescription>
<para>Create a new function that copies func, but overrides the attribute value key with the value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The input function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value attribute value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>The corresponding function type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new function with updated attributes.</para></simplesect>
<simplesect kind="note"><para>This function performs copy on write optimization for func. If we move a uniquely referenced func into WithAttr, then no additional copy will be performed.</para></simplesect>
This is also why we make it as a function instead of a member function and why we pass by value in the first argument.</para><para><programlisting><codeline><highlight class="normal">//<sp/>Recommended<sp/>way<sp/>to<sp/>trigger<sp/>copy<sp/>on<sp/>write</highlight></codeline>
<codeline><highlight class="normal">func<sp/>=<sp/>WithAttr(std::move(func),<sp/>&quot;key1&quot;,<sp/>value1);</highlight></codeline>
<codeline><highlight class="normal">func<sp/>=<sp/>WithAttr(std::move(func),<sp/>&quot;key2&quot;,<sp/>value2);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/function.h" line="178" column="1" bodyfile="include/tvm/ir/function.h" bodystart="178" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a52d7b2faa9f73a02d3e983b80af1f2a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tvm::PrettyPrint</definition>
        <argsstring>(const ObjectRef &amp;node)</argsstring>
        <name>PrettyPrint</name>
        <param>
          <type>const ObjectRef &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Pretty print a node for debug purposes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to be printed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The text reperesentation. </para></simplesect>
<simplesect kind="note"><para>This function does not show version or meta-data. Use AsText if you want to store the text. </para></simplesect>
<simplesect kind="see"><para><ref refid="namespacetvm_1a535496e3535d7128d7fe4a52a397f538" kindref="member">AsText</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/module.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a535496e3535d7128d7fe4a52a397f538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tvm::AsText</definition>
        <argsstring>(const ObjectRef &amp;node, bool show_meta_data=true, runtime::TypedPackedFunc&lt; std::string(ObjectRef)&gt; annotate=nullptr)</argsstring>
        <name>AsText</name>
        <param>
          <type>const ObjectRef &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>show_meta_data</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">runtime::TypedPackedFunc</ref>&lt; std::string(ObjectRef)&gt;</type>
          <declname>annotate</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Render the node as a string in the text format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to be rendered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>show_meta_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to print meta data section. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>annotate</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional callback function for attaching additional comment block to an expr.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>We support a limited set of IR nodes that are part of relay IR and</para></simplesect>
<simplesect kind="see"><para><ref refid="namespacetvm_1a52d7b2faa9f73a02d3e983b80af1f2a5" kindref="member">PrettyPrint</ref>. </para></simplesect>
<simplesect kind="return"><para>The text representation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/module.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a8259e23409eda017c6bde908e050b670" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::IsPrimitiveOp</definition>
        <argsstring>(const RelayExpr &amp;expr)</argsstring>
        <name>IsPrimitiveOp</name>
        <param>
          <type>const <ref refid="classtvm_1_1RelayExpr" kindref="compound">RelayExpr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Check that an expression is a &quot;primitive operator&quot;. </para>        </briefdescription>
        <detaileddescription>
<para>Will return true if the expression is an operator which matches the form of primitive operators registered directly by the Relay codebase.</para><para>That is the arguments are all type variables, and there is a single type relation applied to the input and output types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>An expression. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether the expression is primitive op. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/op.h" line="641" column="1" bodyfile="include/tvm/ir/op.h" bodystart="641" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a27df956aaa2e5e25005e0f9dc1638a08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1Type" kindref="compound">Type</ref></type>
        <definition>Type tvm::VoidType</definition>
        <argsstring>()</argsstring>
        <name>VoidType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a type that represents void. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type.h" line="374" column="1" bodyfile="include/tvm/ir/type.h" bodystart="374" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a196edb73fc9f13d965b8de1c9287a2db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::IsVoidType</definition>
        <argsstring>(const Type &amp;type)</argsstring>
        <name>IsVoidType</name>
        <param>
          <type>const <ref refid="classtvm_1_1Type" kindref="compound">Type</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Check whether the tyep represents void. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The check result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type.h" line="382" column="1" bodyfile="include/tvm/ir/type.h" bodystart="382" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a7f0738778e1a4f1725bea3d6c801aab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1Type" kindref="compound">Type</ref></type>
        <definition>Type tvm::Bind</definition>
        <argsstring>(const Type &amp;type, const Map&lt; TypeVar, Type &gt; &amp;args_map)</argsstring>
        <name>Bind</name>
        <param>
          <type>const <ref refid="classtvm_1_1Type" kindref="compound">Type</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Map" kindref="compound">Map</ref>&lt; <ref refid="classtvm_1_1TypeVar" kindref="compound">TypeVar</ref>, <ref refid="classtvm_1_1Type" kindref="compound">Type</ref> &gt; &amp;</type>
          <declname>args_map</declname>
        </param>
        <briefdescription>
<para>Bind free type variables in the type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to be updated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args_map</parametername>
</parameternamelist>
<parameterdescription>
<para>The binding map. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a23b1dfa894bd954c9a1eea4ab8199764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::Dump</definition>
        <argsstring>(const ObjectRef &amp;node)</argsstring>
        <name>Dump</name>
        <param>
          <type>const ObjectRef &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Dump the node to stderr, used for debug purposes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The input node </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/repr_printer.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1aad98af358976b1598430090b7db92823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tvm::SaveJSON</definition>
        <argsstring>(const runtime::ObjectRef &amp;node)</argsstring>
        <name>SaveJSON</name>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">runtime::ObjectRef</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>save the node as well as all the node it depends on as json. This can be used to serialize any TVM object </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the string representation of the node. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/serialization.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1afa0a9bdf3997ef4fad45b19fb1a655cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">runtime::ObjectRef</ref></type>
        <definition>runtime::ObjectRef tvm::LoadJSON</definition>
        <argsstring>(std::string json_str)</argsstring>
        <name>LoadJSON</name>
        <param>
          <type>std::string</type>
          <declname>json_str</declname>
        </param>
        <briefdescription>
<para>Internal implementation of LoadJSON Load tvm Node object from json and return a shared_ptr of Node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json_str</parametername>
</parameternamelist>
<parameterdescription>
<para>The json string to load from.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The shared_ptr of the Node. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/serialization.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a6e525343df6fbd739a45b291cb0dfb4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1MemoryInfo" kindref="compound">MemoryInfo</ref></type>
        <definition>MemoryInfo tvm::GetMemoryInfo</definition>
        <argsstring>(const std::string &amp;scope)</argsstring>
        <name>GetMemoryInfo</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
<para>get memory info given scope </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>The scope name. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>info The memory info. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/target_info.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a48fb9755f38ffcfcd03592a47ffbbd14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1Type" kindref="compound">Type</ref></type>
        <definition>Type tvm::GetType</definition>
        <argsstring>(const PrimExpr &amp;expr)</argsstring>
        <name>GetType</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Get the type of the expression under the unified type system. </para>        </briefdescription>
        <detaileddescription>
<para>This function could return a more refined type than the runtime type provided by expr-&gt;dtype</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>The input parameter. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result type.</para></simplesect>
<simplesect kind="see"><para><ref refid="ir_2type_8h" kindref="compound">tvm/ir/type.h</ref> for discussion about the relation between <ref refid="classtvm_1_1Type" kindref="compound">Type</ref> and <ref refid="classtvm_1_1runtime_1_1DataType" kindref="compound">runtime::DataType</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a0447e9aa45f6cab707f6dc9f9281b3f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1DataType" kindref="compound">runtime::DataType</ref></type>
        <definition>runtime::DataType tvm::GetRuntimeDataType</definition>
        <argsstring>(const Type &amp;type)</argsstring>
        <name>GetRuntimeDataType</name>
        <param>
          <type>const <ref refid="classtvm_1_1Type" kindref="compound">Type</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Get the implied DataType for storing values with type during runtime. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The input type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result <ref refid="classtvm_1_1runtime_1_1DataType" kindref="compound">runtime::DataType</ref>.</para></simplesect>
<simplesect kind="see"><para><ref refid="ir_2type_8h" kindref="compound">tvm/ir/type.h</ref> for discussion about the relation between <ref refid="classtvm_1_1Type" kindref="compound">Type</ref> and <ref refid="classtvm_1_1runtime_1_1DataType" kindref="compound">runtime::DataType</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a2741c5a48b50bf369026a1bbdf02017f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::max_value</definition>
        <argsstring>(const DataType &amp;dtype)</argsstring>
        <name>max_value</name>
        <param>
          <type>const <ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref> &amp;</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Query the maximum possible value of dtype. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>The data type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the maximum possible value in this format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a9c126a8dde0d4079713969ca574f172e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::min_value</definition>
        <argsstring>(const DataType &amp;dtype)</argsstring>
        <name>min_value</name>
        <param>
          <type>const <ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref> &amp;</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Query the minimum possible value of dtype. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>The data type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the minimum possible value in this format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a9bf1977e7bc6f0424f4e87d77d0008ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::infinity</definition>
        <argsstring>(const DataType &amp;dtype)</argsstring>
        <name>infinity</name>
        <param>
          <type>const <ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref> &amp;</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value of infinity. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>The data type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the infinity value in this format. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1aa058caeda9deceda3d6ffeda347be442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::cast</definition>
        <argsstring>(const DataType &amp;t, PrimExpr value)</argsstring>
        <name>cast</name>
        <param>
          <type>const <ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>cast value to type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the target type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>This function may return value if the type is the same. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a2acd72f0adb3d9ae5eede7497b32c139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::reinterpret</definition>
        <argsstring>(const DataType &amp;t, PrimExpr value)</argsstring>
        <name>reinterpret</name>
        <param>
          <type>const <ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>perform reinterpret cast value to type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the target type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>This function may return value if the type is the same. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1af246f441d4ac21b110185b77240b2dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator+</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>add operator </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1abde487c0197942c4ebb1b47277b89dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator-</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>subtraction operator </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1abc417454badf61b154d6a8d87cd8f171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator-</definition>
        <argsstring>(PrimExpr a)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>negation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>input. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a5c5034de2993b9130b7bd9d593a11bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator*</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>multiplication operator </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a18256ba1213ce5ff3cf8037a314354b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator/</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>division operator </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1af682776c3609284f1bc3ea436e21a67a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&lt;&lt;</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>left shift operator </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a1ce1eb32fc9d76ebe5a6b8d185024d41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&gt;&gt;</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>right shift operator </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ad93d00f7b080dc3f905f5c34c170a041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&gt;</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>greater </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a5530417da455bd46f5dc55f27d69bcdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&gt;=</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>greater_equal </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a1f98476c3a413f6cdfc7b7e490f3221b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&lt;</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>less </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a598f8139c469abc4066dbdd0a0a0845d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&lt;=</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>less_equal </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a2ea3b45c96d3980227e418f7158ce5c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator==</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>equal </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a03983cf66713724c138f9697bb8e0e97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator!=</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>not_equal </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1afc83b50366be0862a6c8f88c9a4e62d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&amp;&amp;</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>and </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>This operator does eager constant folding. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ac3bf2ef3556c995846dddcd84e5db8a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator||</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator||</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>or </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>This operator does eager constant folding. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ab354bf1270121abea71fade83f13b0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator!</definition>
        <argsstring>(PrimExpr a)</argsstring>
        <name>operator!</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>not </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>This operator does eager constant folding. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a40fcc9952e1ff01a76f3b75dbd368fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::div</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>div</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>compute division in C semantics. </para>        </briefdescription>
        <detaileddescription>
<para>a / b as in C/C++.</para><para>When operands are integers, it directly corresponds to truncdiv.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a7bcbff6b886a4fa59b65e7cf05714b49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::truncdiv</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>truncdiv</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>compute trunc(a / b) </para>        </briefdescription>
        <detaileddescription>
<para>This is the default integer division behavior in C.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ae3fd62ca6008d6f20e4845426ec47aa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::truncmod</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>truncmod</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>compute the remainder of truncdiv </para>        </briefdescription>
        <detaileddescription>
<para>This is the default integer division behavior in C.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a8203d70a5ebf3532370264b000d0d276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::indexdiv</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>indexdiv</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>compute floor(a / b) where a and b are non-negative. </para>        </briefdescription>
        <detaileddescription>
<para>Use this function for index split calculation.</para><para>This function might take advantage of the fact that a and b are non-negative.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a857781b7243b2f90018f7fe6baf9c30e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::indexmod</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>indexmod</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>compute the remainder floor(a / b) where a and b are non-negative. </para>        </briefdescription>
        <detaileddescription>
<para>Use this function for index split calculation. This function might take advantage of the fact that a and b are non-negative.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a25cb3bf64427a16a93529d0a5c40b6de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::floordiv</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>floordiv</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>compute floor(a / b) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a74b2e0fb912a82f974e2b652f7de8d34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::floormod</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>floormod</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>compute the remainder of floordiv </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ab49bad0808ba033343e72ba37b39af2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::max</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>take maximum of two values </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a9da780393e228969f77aa7550520a582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::min</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>take minimum of two values </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a92e2cae35b1e48f130b76f42c6ee3106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&amp;</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>take bitwise and of two values </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a236d9aae385e6697874f75e4c8a69f8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator|</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator|</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>take bitwise or of two values </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1abd7d1b3232218b25e2e0cf6ef699a65f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator^</definition>
        <argsstring>(PrimExpr a, PrimExpr b)</argsstring>
        <name>operator^</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>take bitwise xor of two values </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>left operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>right operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="402" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a354b9954ff25dd819a51d856fdd38827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator~</definition>
        <argsstring>(PrimExpr a)</argsstring>
        <name>operator~</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>take bitwise negation of two values </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>the input expression. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ad400409d87dc337f8b5fe13e18d363f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::if_then_else</definition>
        <argsstring>(PrimExpr cond, PrimExpr true_value, PrimExpr false_value)</argsstring>
        <name>if_then_else</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>cond</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>true_value</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>false_value</declname>
        </param>
        <briefdescription>
<para>Conditional expression. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value when results are true. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value when results are false. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
<simplesect kind="note"><para>this function does eager constant folding for index types(int32, int64) when possible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ad6ee4c2d41e7e226d1995112cd12e3f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::likely</definition>
        <argsstring>(PrimExpr cond)</argsstring>
        <name>likely</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Mark condition as likely. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The marked expression. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="428" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a880f0cd15891153430b669f0b4eca2fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::pow</definition>
        <argsstring>(PrimExpr x, PrimExpr y)</argsstring>
        <name>pow</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Calculate power(x, y) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The left operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The right operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a84d274191adb24d2acb39064c1fbec52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::abs</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>abs</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate absolute value of x. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input data</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The aboslute value of input data x </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a8f98d60fdc4526b07c8858d6b0b8d1ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::isnan</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>isnan</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Check if x is NaN. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="447" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a6a48a2b96c995f412390db3ea3b38bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::isfinite</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>isfinite</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Check if x is finite. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a30e728d87aa70f76d7f4a09316c9746d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::isinf</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>isinf</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Check if x is infinite. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a5cea5eb708bfbfa08e285092e5afdc33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::sum</definition>
        <argsstring>(PrimExpr source, Array&lt; tir::IterVar &gt; axis)</argsstring>
        <name>sum</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">tir::IterVar</ref> &gt;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>sum of of source expression over axis </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The source expression. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>List of iteration variables that will be used for reduction. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="468" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a78bab31ca3c44dbd5e6801e1e223d475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::all</definition>
        <argsstring>(PrimExpr source, Array&lt; tir::IterVar &gt; axis)</argsstring>
        <name>all</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">tir::IterVar</ref> &gt;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>logical And of of source expression over axis </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The source expression. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>List of iteration variables that will be used for reduction. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a48629d1a87dfe0b51260defe79c82a60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::any</definition>
        <argsstring>(PrimExpr source, Array&lt; tir::IterVar &gt; axis)</argsstring>
        <name>any</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">tir::IterVar</ref> &gt;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>logical Or of of source expression over axis </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The source expression. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>List of iteration variables that will be used for reduction. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="482" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a80f15d31bf89ba7654442d9ca9a91a18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::max</definition>
        <argsstring>(PrimExpr source, Array&lt; tir::IterVar &gt; axis)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">tir::IterVar</ref> &gt;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>max of of source expression over axis </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The source expression. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>List of iteration variables that will be used for reduction. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a2028eb350061871512cf50fed0e6fa6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::min</definition>
        <argsstring>(PrimExpr source, Array&lt; tir::IterVar &gt; axis)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">tir::IterVar</ref> &gt;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>max of of source expression over axis </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The source expression. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>List of iteration variables that will be used for reduction. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="496" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1afd8718fe1f413ab2850cdbb66adfbecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::prod</definition>
        <argsstring>(PrimExpr source, Array&lt; tir::IterVar &gt; axis)</argsstring>
        <name>prod</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">tir::IterVar</ref> &gt;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>product of of source expression over axis </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The source expression. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>List of iteration variables that will be used for reduction. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="503" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a45896c89bce01ea68b5a8f3ea37f3079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::floor</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>floor</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate floor(x) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input expression. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="510" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a530307f2fad9f6d196c441309af777b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::ceil</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>ceil</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate ceil(x) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input expression. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a660170263d6864b1caa60728619971be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::round</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>round</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate round(x) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input expression. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="524" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a8472b5c842e840063564d4280428ce23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::nearbyint</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>nearbyint</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculates std::nearbyint(x) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input expression. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. This is a faster alternate to round. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ae17d5a4cdf12b4da457d4929030592cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::trunc</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>trunc</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate trunc(x) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input expression. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result expression. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a1b6f1345a0ac2506132b15ec4cbf3599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::LargeUIntImm</definition>
        <argsstring>(DataType dtype, int64_t low, int64_t high)</argsstring>
        <name>LargeUIntImm</name>
        <param>
          <type><ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref></type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>high</declname>
        </param>
        <briefdescription>
<para>Construct a large uint constant by its low 32 bits and high 32bits. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>The final data type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>low</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower 32 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>high</parametername>
</parameternamelist>
<parameterdescription>
<para>The higher 32 bits. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The constructed expression. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1aa21f5c2f67c944561ae4a260a2ed14d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::exp</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>exp</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="556" column="1" bodyfile="include/tvm/tir/op.h" bodystart="556" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a21e3a5d7327cf37c6a682525665a0a28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::exp2</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>exp2</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="557" column="1" bodyfile="include/tvm/tir/op.h" bodystart="557" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ac760569fe43a52f3f8997461b2ef438a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::exp10</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>exp10</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="558" column="1" bodyfile="include/tvm/tir/op.h" bodystart="558" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a78ebcdb32def4b349b37423884a6417a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::erf</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>erf</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="559" column="1" bodyfile="include/tvm/tir/op.h" bodystart="559" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ad8a570f4008eb8869504544d7a1cd8ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::tanh</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>tanh</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="560" column="1" bodyfile="include/tvm/tir/op.h" bodystart="560" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a1bf7732939d615e08d0d991e2f271c42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::sigmoid</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>sigmoid</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="561" column="1" bodyfile="include/tvm/tir/op.h" bodystart="561" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a0a4fcbbd8d9db345d4d7e8bb0a76671a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::sqrt</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>sqrt</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="562" column="1" bodyfile="include/tvm/tir/op.h" bodystart="562" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ae77bc5dc1c2f4bcafcac8ad698b089a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::rsqrt</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>rsqrt</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="563" column="1" bodyfile="include/tvm/tir/op.h" bodystart="563" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1aed9236feb2ab21523cb2dcb0257fe8da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::log</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>log</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="564" column="1" bodyfile="include/tvm/tir/op.h" bodystart="564" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1aae5edd83ffa099868f2d58a9def0b2b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::log2</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>log2</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="565" column="1" bodyfile="include/tvm/tir/op.h" bodystart="565" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a04657a6242778fd95b77df057385e398" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::log10</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>log10</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="566" column="1" bodyfile="include/tvm/tir/op.h" bodystart="566" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a04551919927933a4265c87809d889577" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::popcount</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>popcount</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="567" column="1" bodyfile="include/tvm/tir/op.h" bodystart="567" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1aaabcd438dbdc57aa6866fde3edaf2d83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::tan</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>tan</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="568" column="1" bodyfile="include/tvm/tir/op.h" bodystart="568" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a66fb538aa75f90efb6f5c948920f8f95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::cos</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>cos</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="569" column="1" bodyfile="include/tvm/tir/op.h" bodystart="569" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a581c9279a40694ab7a5defa179bcad67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::cosh</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>cosh</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="570" column="1" bodyfile="include/tvm/tir/op.h" bodystart="570" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1aeb9b0d266628cfa6c4d254c4e719249a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::sin</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>sin</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="571" column="1" bodyfile="include/tvm/tir/op.h" bodystart="571" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a8c17ac9dc5cd2be44dd2c3ef23e0e4c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::sinh</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>sinh</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="572" column="1" bodyfile="include/tvm/tir/op.h" bodystart="572" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a0a4e38b4b6d9f7396f2eafa680f98bd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::atan</definition>
        <argsstring>(PrimExpr x)</argsstring>
        <name>atan</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="573" column="1" bodyfile="include/tvm/tir/op.h" bodystart="573" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a96061840d12f84eeecc8fae11e245242" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator+=</definition>
        <argsstring>(PrimExpr &amp;a, PrimExpr b)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="812" column="1" bodyfile="include/tvm/tir/op.h" bodystart="812" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a164d454c519fecaa5611c86b65469acc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator-=</definition>
        <argsstring>(PrimExpr &amp;a, PrimExpr b)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="813" column="1" bodyfile="include/tvm/tir/op.h" bodystart="813" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a9233d7b436ae52ac070442ba19caed18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator*=</definition>
        <argsstring>(PrimExpr &amp;a, PrimExpr b)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="814" column="1" bodyfile="include/tvm/tir/op.h" bodystart="814" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a2725c044e8067299c3dccbd453ce614f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator+</definition>
        <argsstring>(const PrimExpr &amp;a, float b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="815" column="1" bodyfile="include/tvm/tir/op.h" bodystart="815" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ac86d7f61b9f0899a08685145f6bb5051" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator+</definition>
        <argsstring>(float a, const PrimExpr &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="815" column="1" bodyfile="include/tvm/tir/op.h" bodystart="815" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ad728a6c2c3d21242a4df808aadb722eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator+</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="815" column="1" bodyfile="include/tvm/tir/op.h" bodystart="815" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a50bfde26f015ed64e1c0341dd65d3fad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator+</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="815" column="1" bodyfile="include/tvm/tir/op.h" bodystart="815" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ac225d9ad74343d0e97a5e943e7f6a7d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator+</definition>
        <argsstring>(const PrimExpr &amp;a, double b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="815" column="1" bodyfile="include/tvm/tir/op.h" bodystart="815" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a679ff94dec26779d8769231abb229647" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator-</definition>
        <argsstring>(const PrimExpr &amp;a, float b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="816" column="1" bodyfile="include/tvm/tir/op.h" bodystart="816" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1aef861fe5325bc0b415a905a24c42f10a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator-</definition>
        <argsstring>(float a, const PrimExpr &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="816" column="1" bodyfile="include/tvm/tir/op.h" bodystart="816" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a4f40ad3340a853d58664bc864dc10d47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator-</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="816" column="1" bodyfile="include/tvm/tir/op.h" bodystart="816" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1af7c46ff33a2727f48b10d7d563f4a746" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator-</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="816" column="1" bodyfile="include/tvm/tir/op.h" bodystart="816" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a028ba217f99b6cb1592a6a56b2bc9ee5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator-</definition>
        <argsstring>(const PrimExpr &amp;a, double b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="816" column="1" bodyfile="include/tvm/tir/op.h" bodystart="816" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1af70bb4a982810d795dbd17ce73c6b124" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator*</definition>
        <argsstring>(const PrimExpr &amp;a, float b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="817" column="1" bodyfile="include/tvm/tir/op.h" bodystart="817" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ace5dbde3bde1ba48d14a3f9064a45aee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator*</definition>
        <argsstring>(float a, const PrimExpr &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="817" column="1" bodyfile="include/tvm/tir/op.h" bodystart="817" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1aca621e1d2df8562819bc021c1410b741" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator*</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="817" column="1" bodyfile="include/tvm/tir/op.h" bodystart="817" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a6823188ec16be854223bbffe349c975d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator*</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="817" column="1" bodyfile="include/tvm/tir/op.h" bodystart="817" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a1815d8b152819885a5733554f374a9ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator*</definition>
        <argsstring>(const PrimExpr &amp;a, double b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="817" column="1" bodyfile="include/tvm/tir/op.h" bodystart="817" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a7134c7ce44fbedab5990f19428ceb5c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::max</definition>
        <argsstring>(const PrimExpr &amp;a, float b)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="818" column="1" bodyfile="include/tvm/tir/op.h" bodystart="818" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1abc6aa5a903c9a71faece2f5dfbc8218c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::max</definition>
        <argsstring>(float a, const PrimExpr &amp;b)</argsstring>
        <name>max</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="818" column="1" bodyfile="include/tvm/tir/op.h" bodystart="818" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a7bd1dc5f6d10420562d216bb3660270d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::max</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>max</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="818" column="1" bodyfile="include/tvm/tir/op.h" bodystart="818" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ac0dc60ecafe41384d28baf92f6943680" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::max</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="818" column="1" bodyfile="include/tvm/tir/op.h" bodystart="818" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1aa26bf5f7b12b17f87400c63c63663c60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::max</definition>
        <argsstring>(const PrimExpr &amp;a, double b)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="818" column="1" bodyfile="include/tvm/tir/op.h" bodystart="818" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a1a8d2a9b2868033477024d551f779d61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::min</definition>
        <argsstring>(const PrimExpr &amp;a, float b)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="819" column="1" bodyfile="include/tvm/tir/op.h" bodystart="819" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a6ebe9e5428f481f683f89f59440dde2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::min</definition>
        <argsstring>(float a, const PrimExpr &amp;b)</argsstring>
        <name>min</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="819" column="1" bodyfile="include/tvm/tir/op.h" bodystart="819" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a3b4b479c377151a9d64dc67d1105421e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::min</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>min</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="819" column="1" bodyfile="include/tvm/tir/op.h" bodystart="819" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a7fe0dbe362aac3d4f9c204eeba803d8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::min</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="819" column="1" bodyfile="include/tvm/tir/op.h" bodystart="819" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a468d959980234ccc84c319810d787219" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::min</definition>
        <argsstring>(const PrimExpr &amp;a, double b)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="819" column="1" bodyfile="include/tvm/tir/op.h" bodystart="819" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ae2d70142d842bb07be508adb2d4f7447" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::div</definition>
        <argsstring>(const PrimExpr &amp;a, float b)</argsstring>
        <name>div</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="820" column="1" bodyfile="include/tvm/tir/op.h" bodystart="820" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a85c28d529a26976f3d5f67511f2aef8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::div</definition>
        <argsstring>(float a, const PrimExpr &amp;b)</argsstring>
        <name>div</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="820" column="1" bodyfile="include/tvm/tir/op.h" bodystart="820" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a8a958cb2612b58e6464f5421bb8ab74b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::div</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>div</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="820" column="1" bodyfile="include/tvm/tir/op.h" bodystart="820" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ac9f587b864957447e3d0c64ac9159633" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::div</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>div</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="820" column="1" bodyfile="include/tvm/tir/op.h" bodystart="820" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a1180d1f0ef1d427bad98a89c66d84c0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::div</definition>
        <argsstring>(const PrimExpr &amp;a, double b)</argsstring>
        <name>div</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="820" column="1" bodyfile="include/tvm/tir/op.h" bodystart="820" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a9cea8f3789d8f3dc78acae43e9a6aad6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&gt;</definition>
        <argsstring>(const PrimExpr &amp;a, float b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="821" column="1" bodyfile="include/tvm/tir/op.h" bodystart="821" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a6d0ad14c882c11311836138a2c164cf3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&gt;</definition>
        <argsstring>(float a, const PrimExpr &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="821" column="1" bodyfile="include/tvm/tir/op.h" bodystart="821" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a6aeb6ed068c5de8ab908ff234337aeeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&gt;</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="821" column="1" bodyfile="include/tvm/tir/op.h" bodystart="821" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1acc92dcd3d81981e983ddf05347bc9371" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&gt;</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="821" column="1" bodyfile="include/tvm/tir/op.h" bodystart="821" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a7e2181bca182f90533ec35537714d09d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&gt;</definition>
        <argsstring>(const PrimExpr &amp;a, double b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="821" column="1" bodyfile="include/tvm/tir/op.h" bodystart="821" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a35961a6074b72fae0dfc48ee395e0673" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&gt;=</definition>
        <argsstring>(const PrimExpr &amp;a, float b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="822" column="1" bodyfile="include/tvm/tir/op.h" bodystart="822" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a7a94a354cd62137652e09fa887a96100" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&gt;=</definition>
        <argsstring>(float a, const PrimExpr &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="822" column="1" bodyfile="include/tvm/tir/op.h" bodystart="822" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1af7dee311b945dfc5a821a119c1db9ad1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&gt;=</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="822" column="1" bodyfile="include/tvm/tir/op.h" bodystart="822" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ac194836fc11a8ba34e44738da17fd116" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&gt;=</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="822" column="1" bodyfile="include/tvm/tir/op.h" bodystart="822" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1aae1dcfef78728c5490d3c107b4abac5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&gt;=</definition>
        <argsstring>(const PrimExpr &amp;a, double b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="822" column="1" bodyfile="include/tvm/tir/op.h" bodystart="822" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a4c5092e248ab7daa5de5c22717670d8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&lt;</definition>
        <argsstring>(const PrimExpr &amp;a, float b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="823" column="1" bodyfile="include/tvm/tir/op.h" bodystart="823" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1abc5d3aba4f3f15098d5ac2fb0c3dfd39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&lt;</definition>
        <argsstring>(float a, const PrimExpr &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="823" column="1" bodyfile="include/tvm/tir/op.h" bodystart="823" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a46877235265ab97544ec2e561f521b0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&lt;</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="823" column="1" bodyfile="include/tvm/tir/op.h" bodystart="823" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1aa672271dbd566a0e7b9e4c87664bccb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&lt;</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="823" column="1" bodyfile="include/tvm/tir/op.h" bodystart="823" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a0854363590c38f5479b1da5e70c4f002" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&lt;</definition>
        <argsstring>(const PrimExpr &amp;a, double b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="823" column="1" bodyfile="include/tvm/tir/op.h" bodystart="823" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a06d97bd5ee2c12e8547be0cc42f6b300" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&lt;=</definition>
        <argsstring>(const PrimExpr &amp;a, float b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="824" column="1" bodyfile="include/tvm/tir/op.h" bodystart="824" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a872f50bd7175eccf440865311aa75232" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&lt;=</definition>
        <argsstring>(float a, const PrimExpr &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="824" column="1" bodyfile="include/tvm/tir/op.h" bodystart="824" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ad5dbec0c48b8644c5c6e9d773ddc106b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&lt;=</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="824" column="1" bodyfile="include/tvm/tir/op.h" bodystart="824" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1af94a56db543e741a23bbf2f51c49091a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&lt;=</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="824" column="1" bodyfile="include/tvm/tir/op.h" bodystart="824" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a6eea8276bcc178425bc14f3d878970ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&lt;=</definition>
        <argsstring>(const PrimExpr &amp;a, double b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="824" column="1" bodyfile="include/tvm/tir/op.h" bodystart="824" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1af9a4e8a59397e5778c38356129c06110" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::indexdiv</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>indexdiv</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="826" column="1" bodyfile="include/tvm/tir/op.h" bodystart="826" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a9d88aa90642838c6bc41c4cbead148fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::indexdiv</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>indexdiv</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="826" column="1" bodyfile="include/tvm/tir/op.h" bodystart="826" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ac4d2991113bb8e0b634e4c83183eb5c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::indexmod</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>indexmod</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="827" column="1" bodyfile="include/tvm/tir/op.h" bodystart="827" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1abd2345bc3cd37ab4f762c0f971042daa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::indexmod</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>indexmod</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="827" column="1" bodyfile="include/tvm/tir/op.h" bodystart="827" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ae50afd0565c00f594ee188bab7323372" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::truncdiv</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>truncdiv</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="828" column="1" bodyfile="include/tvm/tir/op.h" bodystart="828" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a5b5bb91649c681b0ea799689be9647bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::truncdiv</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>truncdiv</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="828" column="1" bodyfile="include/tvm/tir/op.h" bodystart="828" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a4c2633a4e92785dd73834bfff282699c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::truncmod</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>truncmod</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="829" column="1" bodyfile="include/tvm/tir/op.h" bodystart="829" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ad6c6dbf136b1086695780fd695df350b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::truncmod</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>truncmod</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="829" column="1" bodyfile="include/tvm/tir/op.h" bodystart="829" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a83e68dc71a05711a9c94123af2a3fdbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::floordiv</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>floordiv</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="830" column="1" bodyfile="include/tvm/tir/op.h" bodystart="830" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ad3b659d13dd33e7a027b9d082315a776" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::floordiv</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>floordiv</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="830" column="1" bodyfile="include/tvm/tir/op.h" bodystart="830" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a6993f628929a88cf563461c9dcafb2ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::floormod</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>floormod</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="831" column="1" bodyfile="include/tvm/tir/op.h" bodystart="831" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a08a5224a973dc893665ab543c116854d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::floormod</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>floormod</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="831" column="1" bodyfile="include/tvm/tir/op.h" bodystart="831" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1abccc3d3e96ee608022b148ffa05034eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&gt;&gt;</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="832" column="1" bodyfile="include/tvm/tir/op.h" bodystart="832" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a550c2a251b2a6fd2a72172fe3db75d40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&gt;&gt;</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="832" column="1" bodyfile="include/tvm/tir/op.h" bodystart="832" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a9d8412e5f401f59f5ca85ed556d70810" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&lt;&lt;</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="833" column="1" bodyfile="include/tvm/tir/op.h" bodystart="833" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ad0449d28f23318cc5163159a58c80ba3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&lt;&lt;</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="833" column="1" bodyfile="include/tvm/tir/op.h" bodystart="833" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a4ff6afc90cabb820cf2f2fda6daefd92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&amp;</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="834" column="1" bodyfile="include/tvm/tir/op.h" bodystart="834" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1acb2697d9f746f0377975893eb080288e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&amp;</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="834" column="1" bodyfile="include/tvm/tir/op.h" bodystart="834" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a7c7fc3c45e6f6b52b2a1064deabd0797" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator|</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="835" column="1" bodyfile="include/tvm/tir/op.h" bodystart="835" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ad5ba71021b167b0a6ca2138b2c8bbace" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator|</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>operator|</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="835" column="1" bodyfile="include/tvm/tir/op.h" bodystart="835" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a82dc2fe21e7a64be5a1b11c2a8775d31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator^</definition>
        <argsstring>(const PrimExpr &amp;a, int b)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="836" column="1" bodyfile="include/tvm/tir/op.h" bodystart="836" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a6f638564e5e4d1023096523800f2579e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator^</definition>
        <argsstring>(int a, const PrimExpr &amp;b)</argsstring>
        <name>operator^</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="836" column="1" bodyfile="include/tvm/tir/op.h" bodystart="836" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1aca62d5095a23e0e24db1d6611d118eab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&amp;&amp;</definition>
        <argsstring>(const PrimExpr &amp;a, bool b)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="838" column="1" bodyfile="include/tvm/tir/op.h" bodystart="838" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a3fc66f0c6cd2135365cd24917d931abe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator&amp;&amp;</definition>
        <argsstring>(bool a, const PrimExpr &amp;b)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>bool</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="838" column="1" bodyfile="include/tvm/tir/op.h" bodystart="838" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a873bb60c71f37cbb743e21797a53ba06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator||</definition>
        <argsstring>(const PrimExpr &amp;a, bool b)</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="839" column="1" bodyfile="include/tvm/tir/op.h" bodystart="839" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a1a3f9ad4d0e25eee9c0b3a9c83114bc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator||</definition>
        <argsstring>(bool a, const PrimExpr &amp;b)</argsstring>
        <name>operator||</name>
        <param>
          <type>bool</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="839" column="1" bodyfile="include/tvm/tir/op.h" bodystart="839" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a31e7a3e4a160a1d048e3ba741966f1a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TA</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tvm::DivAmbiguityError</definition>
        <argsstring>(const TA &amp;a)</argsstring>
        <name>DivAmbiguityError</name>
        <param>
          <type>const TA &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Helper function to raise a compiler error about division ambiguity. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The call to this function will always results in a compiler error. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TA</parametername>
</parameternamelist>
<parameterdescription>
<para>Any class type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="847" column="1" bodyfile="include/tvm/tir/op.h" bodystart="847" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a136427374941fbf8e50f53b1cab39e38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TB</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator/</definition>
        <argsstring>(const PrimExpr &amp;a, const TB &amp;b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const TB &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="863" column="1" bodyfile="include/tvm/tir/op.h" bodystart="863" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1a51dc569142bf8ce8ea55f73029d3807d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TB</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator/=</definition>
        <argsstring>(const PrimExpr &amp;a, const TB &amp;b)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const TB &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="869" column="1" bodyfile="include/tvm/tir/op.h" bodystart="869" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1ab25738e50b37cd07b2d171ca74ba9321" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TB</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::operator%</definition>
        <argsstring>(const PrimExpr &amp;a, const TB &amp;b)</argsstring>
        <name>operator%</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const TB &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/op.h" line="875" column="1" bodyfile="include/tvm/tir/op.h" bodystart="875" bodyend="878"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/tvm/arith/analyzer.h" line="36" column="1"/>
  </compounddef>
</doxygen>
