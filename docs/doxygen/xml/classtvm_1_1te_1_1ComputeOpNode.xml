<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1te_1_1ComputeOpNode" kind="class" language="C++" prot="public">
    <compoundname>tvm::te::ComputeOpNode</compoundname>
    <basecompoundref refid="classtvm_1_1te_1_1BaseComputeOpNode" prot="public" virt="non-virtual">tvm::te::BaseComputeOpNode</basecompoundref>
    <includes refid="operation_8h" local="no">operation.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classtvm_1_1te_1_1ComputeOpNode_1a1486068943f10fbf785ede621c15ed74" prot="public" static="no" mutable="no">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt;</type>
        <definition>Array&lt;PrimExpr&gt; tvm::te::ComputeOpNode::body</definition>
        <argsstring></argsstring>
        <name>body</name>
        <briefdescription>
<para>the compute expression </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="243" column="1" bodyfile="include/tvm/te/operation.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classtvm_1_1te_1_1ComputeOpNode_1a6191241d4f2f2838ec1dfed9a1a7b7f5" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::te::ComputeOpNode::_type_key</definition>
        <argsstring></argsstring>
        <name>_type_key</name>
        <initializer>= &quot;ComputeOp&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="278" column="1" bodyfile="include/tvm/te/operation.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1te_1_1ComputeOpNode_1a45e42c63bd2ba62b6f85b9b79e0b9361" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::te::ComputeOpNode::ComputeOpNode</definition>
        <argsstring>()</argsstring>
        <name>ComputeOpNode</name>
        <briefdescription>
<para>constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="245" column="1" bodyfile="include/tvm/te/operation.h" bodystart="245" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ComputeOpNode_1ac4b034b11601367864722954c1b7c7fe" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>int</type>
        <definition>int tvm::te::ComputeOpNode::num_outputs</definition>
        <argsstring>() const final</argsstring>
        <name>num_outputs</name>
        <reimplements refid="classtvm_1_1tir_1_1FunctionBaseNode_1a86d8a47eb472945b01ab508c1ff94930">num_outputs</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of outputs of this function </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ComputeOpNode_1a308edf04ade47c1365c9f8460858fdd6" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref></type>
        <definition>DataType tvm::te::ComputeOpNode::output_dtype</definition>
        <argsstring>(size_t i) const final</argsstring>
        <name>output_dtype</name>
        <reimplements refid="classtvm_1_1te_1_1OperationNode_1a6bcb7f0c177c642d82a5a200d13369f0">output_dtype</reimplements>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get data type. i-th output tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The output index. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>type of i-th output. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ComputeOpNode_1a9a2ce85d831b05fd11a525647132b81f" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>Array&lt;Tensor&gt; tvm::te::ComputeOpNode::InputTensors</definition>
        <argsstring>() const final</argsstring>
        <name>InputTensors</name>
        <reimplements refid="classtvm_1_1te_1_1OperationNode_1a9675fbb905d62de5b86624388acec4b1">InputTensors</reimplements>
        <briefdescription>
<para>List all the input Tensors. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>List of input tensors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ComputeOpNode_1abd13cd58b1d9754ad708fe47e9379b33" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref></type>
        <definition>Operation tvm::te::ComputeOpNode::ReplaceInputs</definition>
        <argsstring>(const Operation &amp;self, const std::unordered_map&lt; Tensor, Tensor &gt; &amp;rmap) const final</argsstring>
        <name>ReplaceInputs</name>
        <reimplements refid="classtvm_1_1te_1_1OperationNode_1a9a876a433cfbe32215c3802ef520016e">ReplaceInputs</reimplements>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>, <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>rmap</declname>
        </param>
        <briefdescription>
<para>Replace the input of the operation by pattern specified by rmap. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference to self. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The replacement map. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>self if nothing is replaced, otherwise return replaced op. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ComputeOpNode_1a316aeec37888f4f4e0906743b1a7f0b5" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void tvm::te::ComputeOpNode::PropBoundToInputs</definition>
        <argsstring>(const Operation &amp;self, arith::Analyzer *analyzer, const std::unordered_map&lt; const VarNode *, IntSet &gt; &amp;dom_map, std::unordered_map&lt; Tensor, TensorDom &gt; *out_dom_map) const final</argsstring>
        <name>PropBoundToInputs</name>
        <reimplements refid="classtvm_1_1te_1_1OperationNode_1a3c32a93264e0d627d8389b703edcaf49">PropBoundToInputs</reimplements>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1arith_1_1Analyzer" kindref="compound">arith::Analyzer</ref> *</type>
          <declname>analyzer</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; const <ref refid="classtvm_1_1tir_1_1VarNode" kindref="compound">VarNode</ref> *, IntSet &gt; &amp;</type>
          <declname>dom_map</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>, <ref refid="structtvm_1_1te_1_1TensorDom" kindref="compound">TensorDom</ref> &gt; *</type>
          <declname>out_dom_map</declname>
        </param>
        <briefdescription>
<para>Propagate the bounds to inputs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference to self. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>analyzer</parametername>
</parameternamelist>
<parameterdescription>
<para>The analyzer to be used in the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dom_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the domain map of Variables(corresponds to root_iter_vars) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_dom_map</parametername>
</parameternamelist>
<parameterdescription>
<para>The output domain. The function is only asked to fill the bounds for Tensors that is already in the out_dom_map </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ComputeOpNode_1aac1774ef277c75bfdd8f6fdfe2aab4ab" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classtvm_1_1tir_1_1Stmt" kindref="compound">Stmt</ref></type>
        <definition>Stmt tvm::te::ComputeOpNode::BuildProvide</definition>
        <argsstring>(const Stage &amp;stage, const std::unordered_map&lt; IterVar, Range &gt; &amp;dom_map, bool debug_keep_trivial_loop) const final</argsstring>
        <name>BuildProvide</name>
        <reimplements refid="classtvm_1_1te_1_1OperationNode_1a0a4a33f450e0e0890f59af9464c9015f">BuildProvide</reimplements>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref>, <ref refid="classtvm_1_1Range" kindref="compound">Range</ref> &gt; &amp;</type>
          <declname>dom_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>debug_keep_trivial_loop</declname>
        </param>
        <briefdescription>
<para>Build the statement that provide the output tensors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The schedule stage of the op. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dom_map</parametername>
</parameternamelist>
<parameterdescription>
<para>The domain map of all iteration domains. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>debug_keep_trivial_loop</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether keep trivial loops with extent of 1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A statement that add production and wraps consumer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ComputeOpNode_1adafbc09da5da3629aef87a8e5145bdec" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>size_t</type>
        <definition>size_t tvm::te::ComputeOpNode::num_schedulable_dims</definition>
        <argsstring>() const final</argsstring>
        <name>num_schedulable_dims</name>
        <reimplements refid="classtvm_1_1te_1_1BaseComputeOpNode_1afff057b90df28567ab7b2ba19a05b17c">num_schedulable_dims</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ComputeOpNode_1a76272ae11403d194fb01121f26680fd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::te::ComputeOpNode::VisitAttrs</definition>
        <argsstring>(AttrVisitor *v)</argsstring>
        <name>VisitAttrs</name>
        <param>
          <type><ref refid="classtvm_1_1AttrVisitor" kindref="compound">AttrVisitor</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="264" column="1" bodyfile="include/tvm/te/operation.h" bodystart="264" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ComputeOpNode_1a2788e8b3cfe7863f6fe44711e92bfd34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tvm::te::ComputeOpNode::TVM_DECLARE_FINAL_OBJECT_INFO</definition>
        <argsstring>(ComputeOpNode, BaseComputeOpNode)</argsstring>
        <name>TVM_DECLARE_FINAL_OBJECT_INFO</name>
        <param>
          <type><ref refid="classtvm_1_1te_1_1ComputeOpNode" kindref="compound">ComputeOpNode</ref></type>
        </param>
        <param>
          <type><ref refid="classtvm_1_1te_1_1BaseComputeOpNode" kindref="compound">BaseComputeOpNode</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="279" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtvm_1_1te_1_1ComputeOpNode_1a1e2b9193508377af45861422c6045ad8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref></type>
        <definition>static Operation tvm::te::ComputeOpNode::make</definition>
        <argsstring>(std::string name, std::string tag, Map&lt; std::string, ObjectRef &gt; attrs, Array&lt; IterVar &gt; axis, Array&lt; PrimExpr &gt; body)</argsstring>
        <name>make</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Map" kindref="compound">Map</ref>&lt; std::string, ObjectRef &gt;</type>
          <declname>attrs</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> &gt;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="272" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Compute op that compute a tensor on certain domain. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4624">
        <label>tvm::te::BaseComputeOpNode</label>
        <link refid="classtvm_1_1te_1_1BaseComputeOpNode"/>
        <childnode refid="4625" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4627">
        <label>Object</label>
      </node>
      <node id="4625">
        <label>tvm::te::OperationNode</label>
        <link refid="classtvm_1_1te_1_1OperationNode"/>
        <childnode refid="4626" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4623">
        <label>tvm::te::ComputeOpNode</label>
        <link refid="classtvm_1_1te_1_1ComputeOpNode"/>
        <childnode refid="4624" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4626">
        <label>tvm::tir::FunctionBaseNode</label>
        <link refid="classtvm_1_1tir_1_1FunctionBaseNode"/>
        <childnode refid="4627" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4634">
        <label>ObjectRef</label>
      </node>
      <node id="4629">
        <label>tvm::te::BaseComputeOpNode</label>
        <link refid="classtvm_1_1te_1_1BaseComputeOpNode"/>
        <childnode refid="4630" relation="public-inheritance">
        </childnode>
        <childnode refid="4635" relation="usage">
          <edgelabel>+axis</edgelabel>
          <edgelabel>+reduce_axis</edgelabel>
        </childnode>
      </node>
      <node id="4633">
        <label>tvm::Map&lt; std::string, ObjectRef &gt;</label>
        <childnode refid="4634" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4635">
        <label>tvm::Array&lt; tvm::tir::IterVar &gt;</label>
        <link refid="classtvm_1_1Array"/>
        <childnode refid="4634" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4632">
        <label>Object</label>
      </node>
      <node id="4630">
        <label>tvm::te::OperationNode</label>
        <link refid="classtvm_1_1te_1_1OperationNode"/>
        <childnode refid="4631" relation="public-inheritance">
        </childnode>
        <childnode refid="4633" relation="usage">
          <edgelabel>+attrs</edgelabel>
        </childnode>
      </node>
      <node id="4628">
        <label>tvm::te::ComputeOpNode</label>
        <link refid="classtvm_1_1te_1_1ComputeOpNode"/>
        <childnode refid="4629" relation="public-inheritance">
        </childnode>
        <childnode refid="4636" relation="usage">
          <edgelabel>+body</edgelabel>
        </childnode>
      </node>
      <node id="4631">
        <label>tvm::tir::FunctionBaseNode</label>
        <link refid="classtvm_1_1tir_1_1FunctionBaseNode"/>
        <childnode refid="4632" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4636">
        <label>tvm::Array&lt; tvm::PrimExpr &gt;</label>
        <link refid="classtvm_1_1Array"/>
        <childnode refid="4634" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tvm/te/operation.h" line="240" column="1" bodyfile="include/tvm/te/operation.h" bodystart="240" bodyend="280"/>
    <listofallmembers>
      <member refid="classtvm_1_1te_1_1ComputeOpNode_1a6191241d4f2f2838ec1dfed9a1a7b7f5" prot="public" virt="non-virtual"><scope>tvm::te::ComputeOpNode</scope><name>_type_key</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a009ebd67a59953ec9a587f9724afd538" prot="public" virt="non-virtual"><scope>tvm::te::ComputeOpNode</scope><name>attrs</name></member>
      <member refid="classtvm_1_1te_1_1BaseComputeOpNode_1a21617a643897727c51ded2b7260df4c3" prot="public" virt="non-virtual"><scope>tvm::te::ComputeOpNode</scope><name>axis</name></member>
      <member refid="classtvm_1_1te_1_1ComputeOpNode_1a1486068943f10fbf785ede621c15ed74" prot="public" virt="non-virtual"><scope>tvm::te::ComputeOpNode</scope><name>body</name></member>
      <member refid="classtvm_1_1te_1_1ComputeOpNode_1aac1774ef277c75bfdd8f6fdfe2aab4ab" prot="public" virt="virtual"><scope>tvm::te::ComputeOpNode</scope><name>BuildProvide</name></member>
      <member refid="classtvm_1_1te_1_1BaseComputeOpNode_1a0bd84e898355eb941318af78245ca103" prot="public" virt="virtual"><scope>tvm::te::ComputeOpNode</scope><name>BuildRealize</name></member>
      <member refid="classtvm_1_1te_1_1ComputeOpNode_1a45e42c63bd2ba62b6f85b9b79e0b9361" prot="public" virt="non-virtual"><scope>tvm::te::ComputeOpNode</scope><name>ComputeOpNode</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a03b4cec709aed13088b1127a5f90c382" prot="public" virt="virtual"><scope>tvm::te::ComputeOpNode</scope><name>func_name</name></member>
      <member refid="classtvm_1_1te_1_1BaseComputeOpNode_1ad8c5908da3677e4c628f22d3f50c6da1" prot="public" virt="virtual"><scope>tvm::te::ComputeOpNode</scope><name>GatherBound</name></member>
      <member refid="classtvm_1_1te_1_1ComputeOpNode_1a9a2ce85d831b05fd11a525647132b81f" prot="public" virt="virtual"><scope>tvm::te::ComputeOpNode</scope><name>InputTensors</name></member>
      <member refid="classtvm_1_1te_1_1ComputeOpNode_1a1e2b9193508377af45861422c6045ad8" prot="public" virt="non-virtual"><scope>tvm::te::ComputeOpNode</scope><name>make</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1ad2fd6f140257f7b3c311f88374fa74d2" prot="public" virt="non-virtual"><scope>tvm::te::ComputeOpNode</scope><name>name</name></member>
      <member refid="classtvm_1_1te_1_1ComputeOpNode_1ac4b034b11601367864722954c1b7c7fe" prot="public" virt="virtual"><scope>tvm::te::ComputeOpNode</scope><name>num_outputs</name></member>
      <member refid="classtvm_1_1te_1_1ComputeOpNode_1adafbc09da5da3629aef87a8e5145bdec" prot="public" virt="virtual"><scope>tvm::te::ComputeOpNode</scope><name>num_schedulable_dims</name></member>
      <member refid="classtvm_1_1te_1_1ComputeOpNode_1a308edf04ade47c1365c9f8460858fdd6" prot="public" virt="virtual"><scope>tvm::te::ComputeOpNode</scope><name>output_dtype</name></member>
      <member refid="classtvm_1_1te_1_1BaseComputeOpNode_1acdd22cc7c737d4dc8b6bf86d2f11a0db" prot="public" virt="virtual"><scope>tvm::te::ComputeOpNode</scope><name>output_shape</name></member>
      <member refid="classtvm_1_1te_1_1ComputeOpNode_1a316aeec37888f4f4e0906743b1a7f0b5" prot="public" virt="virtual"><scope>tvm::te::ComputeOpNode</scope><name>PropBoundToInputs</name></member>
      <member refid="classtvm_1_1te_1_1BaseComputeOpNode_1ad0df643468fc148d80afd7116abdd2ac" prot="public" virt="non-virtual"><scope>tvm::te::ComputeOpNode</scope><name>reduce_axis</name></member>
      <member refid="classtvm_1_1te_1_1ComputeOpNode_1abd13cd58b1d9754ad708fe47e9379b33" prot="public" virt="virtual"><scope>tvm::te::ComputeOpNode</scope><name>ReplaceInputs</name></member>
      <member refid="classtvm_1_1te_1_1BaseComputeOpNode_1aab7b5b43122ee14bb00640906267361a" prot="public" virt="virtual"><scope>tvm::te::ComputeOpNode</scope><name>root_iter_vars</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1ae6ac4336e7dc2df84f128fc97a6cdb9b" prot="public" virt="non-virtual"><scope>tvm::te::ComputeOpNode</scope><name>tag</name></member>
      <member refid="classtvm_1_1te_1_1BaseComputeOpNode_1ae942fa18ddac490a8b5022143b14cf11" prot="public" virt="non-virtual"><scope>tvm::te::ComputeOpNode</scope><name>TVM_DECLARE_BASE_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a281dd659ac061a77c5783bd0e42324df" prot="public" virt="non-virtual" ambiguityscope="tvm::te::OperationNode::"><scope>tvm::te::ComputeOpNode</scope><name>TVM_DECLARE_BASE_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1te_1_1ComputeOpNode_1a2788e8b3cfe7863f6fe44711e92bfd34" prot="public" virt="non-virtual"><scope>tvm::te::ComputeOpNode</scope><name>TVM_DECLARE_FINAL_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1te_1_1ComputeOpNode_1a76272ae11403d194fb01121f26680fd0" prot="public" virt="non-virtual"><scope>tvm::te::ComputeOpNode</scope><name>VisitAttrs</name></member>
      <member refid="classtvm_1_1tir_1_1FunctionBaseNode_1a03b2f3fdfc5ae82ca081cf988dac22e4" prot="public" virt="virtual"><scope>tvm::te::ComputeOpNode</scope><name>~FunctionBaseNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
