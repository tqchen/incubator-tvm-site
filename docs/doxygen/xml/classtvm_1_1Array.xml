<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1Array" kind="class" language="C++" prot="public">
    <compoundname>tvm::Array</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ObjectRef</basecompoundref>
    <includes refid="node_2container_8h" local="no">container.h</includes>
    <innerclass refid="structtvm_1_1Array_1_1ValueConverter" prot="public">tvm::Array::ValueConverter</innerclass>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>typename</type>
        <defval>typename std::enable_if&lt;std::is_base_of&lt;ObjectRef, T&gt;::value&gt;::type</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtvm_1_1Array_1ab85f7f463f8a418f6b4dcffdf43b007c" prot="public" static="no">
        <type><ref refid="classtvm_1_1ArrayNode" kindref="compound">ArrayNode</ref></type>
        <definition>using tvm::Array&lt; T, typename &gt;::ContainerType =  ArrayNode</definition>
        <argsstring></argsstring>
        <name>ContainerType</name>
        <briefdescription>
<para>specify container node </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="338" column="1" bodyfile="include/tvm/node/container.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtvm_1_1Array_1a82550eb5257293ba5af8866aa8ff16e6" prot="public" static="no">
        <type><ref refid="classtvm_1_1IterAdapter" kindref="compound">IterAdapter</ref>&lt; <ref refid="structtvm_1_1Array_1_1ValueConverter" kindref="compound">ValueConverter</ref>, std::vector&lt; ObjectRef &gt;::const_iterator &gt;</type>
        <definition>using tvm::Array&lt; T, typename &gt;::iterator =  IterAdapter&lt;ValueConverter, std::vector&lt;ObjectRef&gt;::const_iterator&gt;</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="346" column="1" bodyfile="include/tvm/node/container.h" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtvm_1_1Array_1a6b71ab5c7c8c2abffe81a0ea3842fd1a" prot="public" static="no">
        <type><ref refid="classtvm_1_1IterAdapter" kindref="compound">IterAdapter</ref>&lt; <ref refid="structtvm_1_1Array_1_1ValueConverter" kindref="compound">ValueConverter</ref>, std::vector&lt; ObjectRef &gt;::const_reverse_iterator &gt;</type>
        <definition>using tvm::Array&lt; T, typename &gt;::reverse_iterator =  IterAdapter&lt; ValueConverter, std::vector&lt;ObjectRef&gt;::const_reverse_iterator&gt;</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="349" column="1" bodyfile="include/tvm/node/container.h" bodystart="351" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1Array_1aab72ecf006512069d8f791e3cae3eee0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::Array&lt; T, typename &gt;::Array</definition>
        <argsstring>()</argsstring>
        <name>Array</name>
        <briefdescription>
<para>default constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="146" column="1" bodyfile="include/tvm/node/container.h" bodystart="146" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1a42ad68bcaefafa48967fa815cdb1e9fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::Array&lt; T, typename &gt;::Array</definition>
        <argsstring>(Array&lt; T &gt; &amp;&amp;other)</argsstring>
        <name>Array</name>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>move constructor </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="153" column="1" bodyfile="include/tvm/node/container.h" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1a48ecf47f2a0bc8dfaddc8da83300deed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::Array&lt; T, typename &gt;::Array</definition>
        <argsstring>(const Array&lt; T &gt; &amp;other)</argsstring>
        <name>Array</name>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>copy constructor </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="160" column="1" bodyfile="include/tvm/node/container.h" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1abda937076918f8123b1fc62303a940a4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::Array&lt; T, typename &gt;::Array</definition>
        <argsstring>(ObjectPtr&lt; Object &gt; n)</argsstring>
        <name>Array</name>
        <param>
          <type>ObjectPtr&lt; Object &gt;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>constructor from pointer </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the container pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="167" column="1" bodyfile="include/tvm/node/container.h" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1a8e465f5428bc1189dfd6eaf7075bb96f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IterType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tvm::Array&lt; T, typename &gt;::Array</definition>
        <argsstring>(IterType begin, IterType end)</argsstring>
        <name>Array</name>
        <param>
          <type>IterType</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>IterType</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>constructor from iterator </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>begin of iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>end of iterator </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IterType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of iterator </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="175" column="1" bodyfile="include/tvm/node/container.h" bodystart="175" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1a9cd4b1d4c96884994152797a15df7343" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::Array&lt; T, typename &gt;::Array</definition>
        <argsstring>(std::initializer_list&lt; T &gt; init)</argsstring>
        <name>Array</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>constructor from initializer list </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>The initalizer list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="182" column="1" bodyfile="include/tvm/node/container.h" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1a92ba9f4611201b6bad1fb46f5944922e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::Array&lt; T, typename &gt;::Array</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;init)</argsstring>
        <name>Array</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>constructor from vector </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>init</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="189" column="1" bodyfile="include/tvm/node/container.h" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1ae409fb0a54ed7fb8c34b7b0445f88802" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::Array&lt; T, typename &gt;::Array</definition>
        <argsstring>(size_t n, const T &amp;val)</argsstring>
        <name>Array</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Constructs a container with n elements. Each element is a copy of val. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the container </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The init value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="197" column="1" bodyfile="include/tvm/node/container.h" bodystart="197" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1acf66932043c572cb9fec8813dbe5d596" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
        <definition>Array&lt;T&gt;&amp; tvm::Array&lt; T, typename &gt;::operator=</definition>
        <argsstring>(Array&lt; T &gt; &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>move assign operator </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The source of assignment </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="209" column="1" bodyfile="include/tvm/node/container.h" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1a06969623060ee1bb0e82ba7a43513450" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
        <definition>Array&lt;T&gt;&amp; tvm::Array&lt; T, typename &gt;::operator=</definition>
        <argsstring>(const Array&lt; T &gt; &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>copy assign operator </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The source of assignment </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="218" column="1" bodyfile="include/tvm/node/container.h" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1a5eebc9ddbd2e257d0586443b6d493df3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IterType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tvm::Array&lt; T, typename &gt;::assign</definition>
        <argsstring>(IterType begin, IterType end)</argsstring>
        <name>assign</name>
        <param>
          <type>IterType</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>IterType</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>reset the array to content from iterator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>begin of iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>end of iterator </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IterType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of iterator </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="229" column="1" bodyfile="include/tvm/node/container.h" bodystart="229" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1afed60e692eab1b2511b07a2b20751878" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T</type>
        <definition>const T tvm::Array&lt; T, typename &gt;::operator[]</definition>
        <argsstring>(size_t i) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Read i-th element from array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the i-th element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="241" column="1" bodyfile="include/tvm/node/container.h" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tvm::Array&lt; T, typename &gt;::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="246" column="1" bodyfile="include/tvm/node/container.h" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1a8ebe3653e2bcef7481ab6264f7c231c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1ArrayNode" kindref="compound">ArrayNode</ref> *</type>
        <definition>ArrayNode* tvm::Array&lt; T, typename &gt;::CopyOnWrite</definition>
        <argsstring>()</argsstring>
        <name>CopyOnWrite</name>
        <briefdescription>
<para>copy on write semantics Do nothing if current handle is the unique copy of the array. Otherwise make a new copy of the array to ensure the current handle hold a unique copy. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Handle to the internal node container(which ganrantees to be unique) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="258" column="1" bodyfile="include/tvm/node/container.h" bodystart="258" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::Array&lt; T, typename &gt;::push_back</definition>
        <argsstring>(const T &amp;item)</argsstring>
        <name>push_back</name>
        <param>
          <type>const T &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>push a new item to the back of the list </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>The item to be pushed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="270" column="1" bodyfile="include/tvm/node/container.h" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1a8303345e666f9c72586721bc067e7fc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::Array&lt; T, typename &gt;::resize</definition>
        <argsstring>(size_t size)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Resize the array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="278" column="1" bodyfile="include/tvm/node/container.h" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1ab3db968deb4be7a51767f22d267eb7af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::Array&lt; T, typename &gt;::Set</definition>
        <argsstring>(size_t i, const T &amp;value)</argsstring>
        <name>Set</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set i-th element of the array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to be setted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="287" column="1" bodyfile="include/tvm/node/container.h" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1a531169863918d8464aa4b905d236674f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::Array&lt; T, typename &gt;::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether array is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="292" column="1" bodyfile="include/tvm/node/container.h" bodystart="292" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1abb864921139827a886c8fec5b7796041" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tvm::Array&lt; T, typename &gt;::MutateByApply</definition>
        <argsstring>(F fmutate)</argsstring>
        <name>MutateByApply</name>
        <param>
          <type>F</type>
          <declname>fmutate</declname>
        </param>
        <briefdescription>
<para>Helper function to apply fmutate to mutate an array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fmutate</parametername>
</parameternamelist>
<parameterdescription>
<para>The transformation function T -&gt; T. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the mutation function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function performs copy on write optimization. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="302" column="1" bodyfile="include/tvm/node/container.h" bodystart="302" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1a5db0d3faad39ca865162e50d555a25fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1Array_1a82550eb5257293ba5af8866aa8ff16e6" kindref="member">iterator</ref></type>
        <definition>iterator tvm::Array&lt; T, typename &gt;::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>begin iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="354" column="1" bodyfile="include/tvm/node/container.h" bodystart="354" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1a6f05e6a14eca3ea865da0f293b4a5325" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1Array_1a82550eb5257293ba5af8866aa8ff16e6" kindref="member">iterator</ref></type>
        <definition>iterator tvm::Array&lt; T, typename &gt;::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>end iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="358" column="1" bodyfile="include/tvm/node/container.h" bodystart="358" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1ad9e24a3208ffabbc079db08804a6f602" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1Array_1a6b71ab5c7c8c2abffe81a0ea3842fd1a" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator tvm::Array&lt; T, typename &gt;::rbegin</definition>
        <argsstring>() const </argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>rbegin iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="362" column="1" bodyfile="include/tvm/node/container.h" bodystart="362" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Array_1adc2c5ea9dacd9a1fae22c409a39007b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1Array_1a6b71ab5c7c8c2abffe81a0ea3842fd1a" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator tvm::Array&lt; T, typename &gt;::rend</definition>
        <argsstring>() const </argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>rend iterator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/node/container.h" line="366" column="1" bodyfile="include/tvm/node/container.h" bodystart="366" bodyend="368"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classtvm_1_1Array" kindref="compound">Array</ref> container of NodeRef in DSL graph. <ref refid="classtvm_1_1Array" kindref="compound">Array</ref> implements copy on write semantics, which means array is mutable but copy will happen when array is referenced in more than two places. </para>    </briefdescription>
    <detaileddescription>
<para>operator[] only provide const acces, use Set to mutate the content. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The content NodeRef type. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="3928">
        <label>ObjectRef</label>
      </node>
      <node id="3927">
        <label>tvm::Array&lt; T, typename &gt;</label>
        <link refid="classtvm_1_1Array"/>
        <childnode refid="3928" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3930">
        <label>ObjectRef</label>
      </node>
      <node id="3929">
        <label>tvm::Array&lt; T, typename &gt;</label>
        <link refid="classtvm_1_1Array"/>
        <childnode refid="3930" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tvm/node/container.h" line="141" column="1" bodyfile="include/tvm/node/container.h" bodystart="141" bodyend="369"/>
    <listofallmembers>
      <member refid="classtvm_1_1Array_1aab72ecf006512069d8f791e3cae3eee0" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>Array</name></member>
      <member refid="classtvm_1_1Array_1a42ad68bcaefafa48967fa815cdb1e9fe" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>Array</name></member>
      <member refid="classtvm_1_1Array_1a48ecf47f2a0bc8dfaddc8da83300deed" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>Array</name></member>
      <member refid="classtvm_1_1Array_1abda937076918f8123b1fc62303a940a4" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>Array</name></member>
      <member refid="classtvm_1_1Array_1a8e465f5428bc1189dfd6eaf7075bb96f" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>Array</name></member>
      <member refid="classtvm_1_1Array_1a9cd4b1d4c96884994152797a15df7343" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>Array</name></member>
      <member refid="classtvm_1_1Array_1a92ba9f4611201b6bad1fb46f5944922e" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>Array</name></member>
      <member refid="classtvm_1_1Array_1ae409fb0a54ed7fb8c34b7b0445f88802" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>Array</name></member>
      <member refid="classtvm_1_1Array_1a5eebc9ddbd2e257d0586443b6d493df3" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>assign</name></member>
      <member refid="classtvm_1_1Array_1a5db0d3faad39ca865162e50d555a25fa" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>begin</name></member>
      <member refid="classtvm_1_1Array_1ab85f7f463f8a418f6b4dcffdf43b007c" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>ContainerType</name></member>
      <member refid="classtvm_1_1Array_1a8ebe3653e2bcef7481ab6264f7c231c8" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>CopyOnWrite</name></member>
      <member refid="classtvm_1_1Array_1a531169863918d8464aa4b905d236674f" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>empty</name></member>
      <member refid="classtvm_1_1Array_1a6f05e6a14eca3ea865da0f293b4a5325" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>end</name></member>
      <member refid="classtvm_1_1Array_1a82550eb5257293ba5af8866aa8ff16e6" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>iterator</name></member>
      <member refid="classtvm_1_1Array_1abb864921139827a886c8fec5b7796041" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>MutateByApply</name></member>
      <member refid="classtvm_1_1Array_1acf66932043c572cb9fec8813dbe5d596" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>operator=</name></member>
      <member refid="classtvm_1_1Array_1a06969623060ee1bb0e82ba7a43513450" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>operator=</name></member>
      <member refid="classtvm_1_1Array_1afed60e692eab1b2511b07a2b20751878" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>operator[]</name></member>
      <member refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>push_back</name></member>
      <member refid="classtvm_1_1Array_1ad9e24a3208ffabbc079db08804a6f602" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>rbegin</name></member>
      <member refid="classtvm_1_1Array_1adc2c5ea9dacd9a1fae22c409a39007b8" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>rend</name></member>
      <member refid="classtvm_1_1Array_1a8303345e666f9c72586721bc067e7fc9" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>resize</name></member>
      <member refid="classtvm_1_1Array_1a6b71ab5c7c8c2abffe81a0ea3842fd1a" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>reverse_iterator</name></member>
      <member refid="classtvm_1_1Array_1ab3db968deb4be7a51767f22d267eb7af" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>Set</name></member>
      <member refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" prot="public" virt="non-virtual"><scope>tvm::Array</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
