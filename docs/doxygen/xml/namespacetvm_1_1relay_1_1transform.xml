<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespacetvm_1_1relay_1_1transform" kind="namespace" language="C++">
    <compoundname>tvm::relay::transform</compoundname>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" prot="public" static="no">
        <type><ref refid="classtvm_1_1transform_1_1Pass" kindref="compound">tvm::transform::Pass</ref></type>
        <definition>using tvm::relay::transform::Pass = typedef tvm::transform::Pass</definition>
        <argsstring></argsstring>
        <name>Pass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="40" column="1" bodyfile="include/tvm/relay/transform.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetvm_1_1relay_1_1transform_1aa695a8dfc3d5b087018ddd4ef1eb2487" prot="public" static="no">
        <type><ref refid="classtvm_1_1transform_1_1PassNode" kindref="compound">tvm::transform::PassNode</ref></type>
        <definition>using tvm::relay::transform::PassNode = typedef tvm::transform::PassNode</definition>
        <argsstring></argsstring>
        <name>PassNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="41" column="1" bodyfile="include/tvm/relay/transform.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetvm_1_1relay_1_1transform_1aa405b5f11938fb8c4fa2ca21926edc9d" prot="public" static="no">
        <type><ref refid="classtvm_1_1transform_1_1PassInfo" kindref="compound">tvm::transform::PassInfo</ref></type>
        <definition>using tvm::relay::transform::PassInfo = typedef tvm::transform::PassInfo</definition>
        <argsstring></argsstring>
        <name>PassInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="42" column="1" bodyfile="include/tvm/relay/transform.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetvm_1_1relay_1_1transform_1aae88cd0ad69cf64c7e9caf0a0c8ebb45" prot="public" static="no">
        <type><ref refid="classtvm_1_1transform_1_1PassInfoNode" kindref="compound">tvm::transform::PassInfoNode</ref></type>
        <definition>using tvm::relay::transform::PassInfoNode = typedef tvm::transform::PassInfoNode</definition>
        <argsstring></argsstring>
        <name>PassInfoNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="43" column="1" bodyfile="include/tvm/relay/transform.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetvm_1_1relay_1_1transform_1a744a05f8bba3c2ac238ba4569d926184" prot="public" static="no">
        <type><ref refid="classtvm_1_1transform_1_1PassContext" kindref="compound">tvm::transform::PassContext</ref></type>
        <definition>using tvm::relay::transform::PassContext = typedef tvm::transform::PassContext</definition>
        <argsstring></argsstring>
        <name>PassContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="44" column="1" bodyfile="include/tvm/relay/transform.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetvm_1_1relay_1_1transform_1a72900733e0d3510ae61a1c287c2ec125" prot="public" static="no">
        <type><ref refid="classtvm_1_1transform_1_1PassContextNode" kindref="compound">tvm::transform::PassContextNode</ref></type>
        <definition>using tvm::relay::transform::PassContextNode = typedef tvm::transform::PassContextNode</definition>
        <argsstring></argsstring>
        <name>PassContextNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="45" column="1" bodyfile="include/tvm/relay/transform.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetvm_1_1relay_1_1transform_1a3ae923037d22b4640b450c06e6c1e33e" prot="public" static="no">
        <type><ref refid="classtvm_1_1transform_1_1Sequential" kindref="compound">tvm::transform::Sequential</ref></type>
        <definition>using tvm::relay::transform::Sequential = typedef tvm::transform::Sequential</definition>
        <argsstring></argsstring>
        <name>Sequential</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="46" column="1" bodyfile="include/tvm/relay/transform.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1aba687537c5fd54db0012c745bba74a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::CreateFunctionPass</definition>
        <argsstring>(const runtime::TypedPackedFunc&lt; Function(Function, IRModule, PassContext)&gt; &amp;pass_func, int opt_level, const std::string &amp;name, const tvm::Array&lt; tvm::PrimExpr &gt; &amp;required)</argsstring>
        <name>CreateFunctionPass</name>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">runtime::TypedPackedFunc</ref>&lt; <ref refid="classtvm_1_1relay_1_1Function" kindref="compound">Function</ref>(<ref refid="classtvm_1_1relay_1_1Function" kindref="compound">Function</ref>, <ref refid="classtvm_1_1IRModule" kindref="compound">IRModule</ref>, <ref refid="namespacetvm_1_1relay_1_1transform_1a744a05f8bba3c2ac238ba4569d926184" kindref="member">PassContext</ref>)&gt; &amp;</type>
          <declname>pass_func</declname>
        </param>
        <param>
          <type>int</type>
          <declname>opt_level</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">tvm::Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &gt; &amp;</type>
          <declname>required</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1aaa08e0ced82fc7efe515d610104b070c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::DeadCodeElimination</definition>
        <argsstring>(bool inline_once=false)</argsstring>
        <name>DeadCodeElimination</name>
        <param>
          <type>bool</type>
          <declname>inline_once</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Remove expressions which does not effect the program result. </para>        </briefdescription>
        <detaileddescription>
<para>It will remove let bindings which are not referenced, and inline let bindings that are only used once.</para><para>For example, this pass should turn <computeroutput>let a = 1 in 2</computeroutput> into <computeroutput>2</computeroutput>, as the value of the expression does not depend on a.</para><para>As another example, <computeroutput>let a = 1 in a</computeroutput> will be optimized into 1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inline_once</parametername>
</parameternamelist>
<parameterdescription>
<para>whether or not to inline binding used one.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1ab6e60251741cca1e811564b2f03a4a5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::LazyGradientInit</definition>
        <argsstring>()</argsstring>
        <name>LazyGradientInit</name>
        <briefdescription>
<para>Convert all expressions of <ref refid="classtvm_1_1TensorType" kindref="compound">TensorType</ref> into GradCell, an algebraic data type defined in gradient.rly. </para>        </briefdescription>
        <detaileddescription>
<para>This will delay or decrease memory usage. All calls to ones, ones_like, zeros, zeros_like will not immediately instantiate a tensor in memory, rather only instantiate if needed. It also defines + and * operation between GradCell types which can increase performance when using zero-filled or one-filled tensors, which is the case in reverse mode ad.</para><para><simplesect kind="return"><para>the pass </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a41656c71a440f1f9c9eae0aa409d2b22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::FoldConstant</definition>
        <argsstring>()</argsstring>
        <name>FoldConstant</name>
        <briefdescription>
<para>Fold constant expressions. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a2a6be6024a96a84f7230faa2519f1a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::FuseOps</definition>
        <argsstring>(int fuse_opt_level=-1)</argsstring>
        <name>FuseOps</name>
        <param>
          <type>int</type>
          <declname>fuse_opt_level</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Fuse operations into expr into seperate functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fuse_opt_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Optimization level. <ref refid="classtvm_1_1relay_1_1If" kindref="compound">If</ref> it is -1 it will be inferred from pass context.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a03b053f3d99d5c420ddc8492e6b987bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::RewriteAnnotatedOps</definition>
        <argsstring>(int fallback_device)</argsstring>
        <name>RewriteAnnotatedOps</name>
        <param>
          <type>int</type>
          <declname>fallback_device</declname>
        </param>
        <briefdescription>
<para>Rewrite the annotated program. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fallback_device</parametername>
</parameternamelist>
<parameterdescription>
<para>The fallback device which is the default device for operators without annotation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a8cb03cf00b2ddf25f183ab837cde713c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::ToANormalForm</definition>
        <argsstring>()</argsstring>
        <name>ToANormalForm</name>
        <briefdescription>
<para>turn a dataflow graph into Administrative Normal Form, or A-Normal Form (ANF). </para>        </briefdescription>
        <detaileddescription>
<para>It will turn an expression that is in a graph form (with sharing implicit), to an expression with explicit sharing (A-Normal Form).</para><para>The scope of the root expression is the global scope.</para><para>The scope of any non root expression is the least common ancestor of all it&apos;s scope.</para><para>Values are ordered by post-DFS order in each scope.</para><para><simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1ad90e4d6ac08b62ef553755e759d398fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::ToCPS</definition>
        <argsstring>()</argsstring>
        <name>ToCPS</name>
        <briefdescription>
<para>Turn an expression into continuation passing style(CPS). </para>        </briefdescription>
        <detaileddescription>
<para>CPS mean that every function will, instead of returning the result directly, be passed down an extra function (called the continuation) as argument, and pass the result to the continuation instead.</para><para>Thus, every function call has to be passed an extra argument that represent the rest of the computation (Hence the name of continuation).</para><para>Similarly, all other compute will be wrapped and call the continuation as well.</para><para><simplesect kind="return"><para>the pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a2cfef0e02cca22f3e0e85e0a10a82f5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::ToGraphNormalForm</definition>
        <argsstring>()</argsstring>
        <name>ToGraphNormalForm</name>
        <briefdescription>
<para>Remove let binding and directly share via pointer instead. </para>        </briefdescription>
        <detaileddescription>
<para>It will remove all let binding, and turn all of the variable bound by let into direct pointer reference.</para><para><simplesect kind="return"><para>the expression in graph normal form. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1aa270d98da5518969e005c7e30d6eb6fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::PartialEval</definition>
        <argsstring>()</argsstring>
        <name>PartialEval</name>
        <briefdescription>
<para>Aggressive constant propagation/constant folding/inlining. </para>        </briefdescription>
        <detaileddescription>
<para>It will do as much computation in compile time as possible. It has two benefit: remove runtime overhead, and allow more optimization (typically fusion). As a side effect, code size will explode.</para><para><simplesect kind="return"><para>the optimized expression. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1add13a2ad7b216ad4683141bbbb4f6943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::SimplifyInference</definition>
        <argsstring>()</argsstring>
        <name>SimplifyInference</name>
        <briefdescription>
<para>Simplify certain operators during inference. For example, batch norm will be unpacked into a number of simplified operators. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a22870dd16693b2e3edb5fba7cb5dc3e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::FastMath</definition>
        <argsstring>()</argsstring>
        <name>FastMath</name>
        <briefdescription>
<para>Replaces non linear activation functions with their fast but approximate counterparts. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a1a4fe2161bf32a60bc2e57debab083ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::InferType</definition>
        <argsstring>()</argsstring>
        <name>InferType</name>
        <briefdescription>
<para>Infer the type of an expression. </para>        </briefdescription>
        <detaileddescription>
<para>The result of type checking is a new expression with unambigous type information filled in, as well as it&apos;s checked type field populated with the result type.</para><para><simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1adf21ade01969835b155241d277a94d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::EliminateCommonSubexpr</definition>
        <argsstring>(runtime::PackedFunc fskip=nullptr)</argsstring>
        <name>EliminateCommonSubexpr</name>
        <param>
          <type><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">runtime::PackedFunc</ref></type>
          <declname>fskip</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Search and eliminate common subexpression. For example, if there are two expressions evaluated to an identical value, a single variable is created and these two expressions are replaced by this variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fskip</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback argument that allows to skip certain expressions.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a3b8f4cbf0bd699d2ca0ab92c534c867d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::CombineParallelConv2D</definition>
        <argsstring>(uint64_t min_num_branches=3)</argsstring>
        <name>CombineParallelConv2D</name>
        <param>
          <type>uint64_t</type>
          <declname>min_num_branches</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
<para>Combine parallel 2d convolutions into a single convolution if the number of branches of this conv2d operator is not less than <computeroutput>min_num_branch</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_num_branches</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimun number of branches.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a186d1029887d7b33d002798d414f4d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::CombineParallelDense</definition>
        <argsstring>(uint64_t min_num_branches=3)</argsstring>
        <name>CombineParallelDense</name>
        <param>
          <type>uint64_t</type>
          <declname>min_num_branches</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
<para>Combine parallel dense ops into a single batch_matmul if the number of branches of this dense operator is not less than <computeroutput>min_num_branch</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_num_branches</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimun number of branches.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a3bde64d7774dcda7735f73a4e2ebecf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::BackwardFoldScaleAxis</definition>
        <argsstring>()</argsstring>
        <name>BackwardFoldScaleAxis</name>
        <briefdescription>
<para>Backward fold axis scaling into weights of conv/dense operators. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1aab7f62610e05ed0211f17d452ee37f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::ForwardFoldScaleAxis</definition>
        <argsstring>()</argsstring>
        <name>ForwardFoldScaleAxis</name>
        <briefdescription>
<para>Forward fold axis scaling into weights of conv/dense operators. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a73946a29efe8cf6f186a681296c8e943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::FoldScaleAxis</definition>
        <argsstring>()</argsstring>
        <name>FoldScaleAxis</name>
        <briefdescription>
<para>A sequential pass that executes ForwardFoldScaleAxis and BackwardFoldScaleAxis passes. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1adcddf150ca7da40e20408928421b0086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::CanonicalizeOps</definition>
        <argsstring>()</argsstring>
        <name>CanonicalizeOps</name>
        <briefdescription>
<para>Canonicalize some operators to the simplified operators. For example, bias_add can be canonicalized to expand_dims and broadcast_add. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a64e0426cfa5887f11769a057c09ce8ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::AlterOpLayout</definition>
        <argsstring>()</argsstring>
        <name>AlterOpLayout</name>
        <briefdescription>
<para>Alternate the layouts of operators or replace primitive operators with other expressions. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1ad12225e2ad26ae24fca669e180026689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::ConvertLayout</definition>
        <argsstring>(const std::string &amp;desired_layout)</argsstring>
        <name>ConvertLayout</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>desired_layout</declname>
        </param>
        <briefdescription>
<para>Given a dest layout, this pass transforms the expr such that most of the ops input data layout is changed to the dest layout. In ideal situation, there are only 2 layout transforms, one at the start and one at the end. </para>        </briefdescription>
        <detaileddescription>
<para>This pass is not a part of relay.build and is expected to be called between framework-relay parser and relay.build call. This is very helpful for hardware backends that support/prefer only type of data layout.</para><para>RFC - <ulink url="https://discuss.tvm.ai/t/layout-conversion-pass/4009">https://discuss.tvm.ai/t/layout-conversion-pass/4009</ulink></para><para>This pass uses most of the AlterOpLayout and InferCorrectLayout infrastructure. We can define new layouts for conv2d ops for now. Most of the other operators try to adapt to their input layout using the InferCorrectLayout infrastructure.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>desired_layout</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired layout. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a459fec81f00a7a17c5cf7dabe5e4e363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::Legalize</definition>
        <argsstring>(const std::string &amp;legalize_map_attr_name=&quot;FTVMLegalize&quot;)</argsstring>
        <name>Legalize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>legalize_map_attr_name</declname>
          <defval>&quot;FTVMLegalize&quot;</defval>
        </param>
        <briefdescription>
<para>Legalizes an expr with another expression. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>legalize_map_attr_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classtvm_1_1Op" kindref="compound">Op</ref>&apos;s attr name which corresponds to the legalize rule function. One can collect and isolate similar type of legalize transformations using this param. For example, transformations that only apply to Dialects can be isolated into a FTVMDialectLegalize string. This pass calls only those transformations that have been registered using the supplied legalize_map_attr_name.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a93bbf7ab3f612d4f38a6832d6b53b4fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::CanonicalizeCast</definition>
        <argsstring>()</argsstring>
        <name>CanonicalizeCast</name>
        <briefdescription>
<para>Canonicalize cast expressions to make operator fusion more efficient. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a6e515696ecc9ff4222af99fef361de4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::EtaExpand</definition>
        <argsstring>(bool expand_constructor, bool expand_global_var)</argsstring>
        <name>EtaExpand</name>
        <param>
          <type>bool</type>
          <declname>expand_constructor</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>expand_global_var</declname>
        </param>
        <briefdescription>
<para>Add abstraction over a constructor or global variable bound to a function. </para>        </briefdescription>
        <detaileddescription>
<para>For example: <computeroutput>square</computeroutput> is transformed to <computeroutput>fn (x: int32) -&gt; int32 { square(x) }</computeroutput>.</para><para>See <ulink url="https://en.wikipedia.org/wiki/Lambda_calculus#%CE%B7-conversion">https://en.wikipedia.org/wiki/Lambda_calculus#%CE%B7-conversion</ulink> for more details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expand_constructor</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to expand constructors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expand_global_var</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to expand global variables.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1a065b5d8be6fd8dbfcef44dfa48adeb29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::PrintIR</definition>
        <argsstring>(bool show_meta_data=true)</argsstring>
        <name>PrintIR</name>
        <param>
          <type>bool</type>
          <declname>show_meta_data</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Print the IR for a module to help debugging. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>show_meta_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to control if meta data needs to be printed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1aac0bfdaf6d09b360602243c81abe05a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::PartitionGraph</definition>
        <argsstring>()</argsstring>
        <name>PartitionGraph</name>
        <briefdescription>
<para>Partition a Relay program into regions that can be executed on different backends. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="340" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1aba5e588279a3b19a119c9aa28c364bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::Inline</definition>
        <argsstring>()</argsstring>
        <name>Inline</name>
        <briefdescription>
<para>Inline the global functions marked as <computeroutput>inline</computeroutput> in a given Relay <ref refid="classtvm_1_1IRModule" kindref="compound">IRModule</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1relay_1_1transform_1abdccee126a74a602e3669bdfaf0f259c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1relay_1_1transform_1afa666ade112e9955059095d695238a9a" kindref="member">Pass</ref></type>
        <definition>Pass tvm::relay::transform::RemoveUnusedFunctions</definition>
        <argsstring>(Array&lt; tvm::PrimExpr &gt; entry_functions)</argsstring>
        <name>RemoveUnusedFunctions</name>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &gt;</type>
          <declname>entry_functions</declname>
        </param>
        <briefdescription>
<para>Remove the unused functions in the Relay <ref refid="classtvm_1_1IRModule" kindref="compound">IRModule</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entry_functions</parametername>
</parameternamelist>
<parameterdescription>
<para>The entry functions used to search the functions that are being used.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pass. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/transform.h" line="358" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/tvm/relay/transform.h" line="38" column="1"/>
  </compounddef>
</doxygen>
