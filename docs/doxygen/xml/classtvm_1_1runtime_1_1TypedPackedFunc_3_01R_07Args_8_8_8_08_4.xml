<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4" kind="class" language="C++" prot="public">
    <compoundname>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</compoundname>
    <includes refid="packed__func_8h" local="no">packed_func.h</includes>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1afaeae1b79f815895ab9ab09b444e7ba3" prot="public" static="no">
        <type><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref>&lt; R(Args...)&gt;</type>
        <definition>using tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::TSelf =  TypedPackedFunc&lt;R(Args...)&gt;</definition>
        <argsstring></argsstring>
        <name>TSelf</name>
        <briefdescription>
<para>short hand for this function type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="201" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1ae0ea8b4adc6dab8c74086bceaef6b3e1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TVMRetValue</definition>
        <argsstring></argsstring>
        <name>TVMRetValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="320" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1af893f83122ef4489c9de5091c19d3957" prot="private" static="no" mutable="no">
        <type><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref></type>
        <definition>PackedFunc tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::packed_</definition>
        <argsstring></argsstring>
        <name>packed_</name>
        <briefdescription>
<para>The internal packed function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="322" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a4abadc6786dd14a3aed6e2b5b342d1d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::TypedPackedFunc</definition>
        <argsstring>()</argsstring>
        <name>TypedPackedFunc</name>
        <briefdescription>
<para>default constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="203" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="203" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1af45a2ceff92e6f6c394ea766a45027a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::TypedPackedFunc</definition>
        <argsstring>(std::nullptr_t null)</argsstring>
        <name>TypedPackedFunc</name>
        <param>
          <type>std::nullptr_t</type>
          <declname>null</declname>
        </param>
        <briefdescription>
<para>constructor from null </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="205" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1afd8ee9dd9648c19b468bb4b0b00e8e4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::TypedPackedFunc</definition>
        <argsstring>(PackedFunc packed)</argsstring>
        <name>TypedPackedFunc</name>
        <param>
          <type><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref></type>
          <declname>packed</declname>
        </param>
        <briefdescription>
<para>construct by wrap a <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Example usage: <programlisting><codeline><highlight class="normal">PackedFunc<sp/>packed([](TVMArgs<sp/>args,<sp/>TVMRetValue<sp/>*rv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>x<sp/>=<sp/>args[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*rv<sp/>=<sp/>x<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/>});</highlight></codeline>
<codeline><highlight class="normal">//<sp/>construct<sp/>from<sp/>packed<sp/>function</highlight></codeline>
<codeline><highlight class="normal">TypedPackedFunc&lt;int(int)&gt;<sp/>ftyped(packed);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>call<sp/>the<sp/>typed<sp/>version.</highlight></codeline>
<codeline><highlight class="normal">CHECK_EQ(ftyped(1),<sp/>2);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packed</parametername>
</parameternamelist>
<parameterdescription>
<para>The packed function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="223" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="1355" bodyend="1356"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a6b346a6d0b601eff5a100c7a207e9c86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::TypedPackedFunc</definition>
        <argsstring>(const TVMRetValue &amp;value)</argsstring>
        <name>TypedPackedFunc</name>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor from <ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="228" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="1359" bodyend="1360"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a0161d426f9ca366c860ad48c384f7192" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::TypedPackedFunc</definition>
        <argsstring>(const TVMArgValue &amp;value)</argsstring>
        <name>TypedPackedFunc</name>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1TVMArgValue" kindref="compound">TVMArgValue</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor from <ref refid="classtvm_1_1runtime_1_1TVMArgValue" kindref="compound">TVMArgValue</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classtvm_1_1runtime_1_1TVMArgValue" kindref="compound">TVMArgValue</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="233" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="1363" bodyend="1364"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a36ca0d1876544463ee848766e70e5e96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FLambda</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;             std::is_convertible&lt;FLambda,                                 std::function&lt;R(Args...)&gt;                                 &gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::TypedPackedFunc</definition>
        <argsstring>(const FLambda &amp;typed_lambda)</argsstring>
        <name>TypedPackedFunc</name>
        <param>
          <type>const FLambda &amp;</type>
          <declname>typed_lambda</declname>
        </param>
        <briefdescription>
<para>construct from a lambda function with the same signature. </para>        </briefdescription>
        <detaileddescription>
<para>Example usage: <programlisting><codeline><highlight class="normal">auto<sp/>typed_lambda<sp/>=<sp/>[](int<sp/>x)-&gt;int<sp/>{<sp/>return<sp/>x<sp/>+<sp/>1;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>construct<sp/>from<sp/>packed<sp/>function</highlight></codeline>
<codeline><highlight class="normal">TypedPackedFunc&lt;int(int)&gt;<sp/>ftyped(typed_lambda);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>call<sp/>the<sp/>typed<sp/>version.</highlight></codeline>
<codeline><highlight class="normal">CHECK_EQ(ftyped(1),<sp/>2);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typed_lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>typed lambda function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FLambda</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the lambda function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="254" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="254" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a8dd1fbae84cb9597c52977b0e8db64dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FLambda</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;             std::is_convertible&lt;FLambda,                                 std::function&lt;R(Args...)&gt;                                 &gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1afaeae1b79f815895ab9ab09b444e7ba3" kindref="member">TSelf</ref> &amp;</type>
        <definition>TSelf&amp; tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::operator=</definition>
        <argsstring>(FLambda typed_lambda)</argsstring>
        <name>operator=</name>
        <param>
          <type>FLambda</type>
          <declname>typed_lambda</declname>
        </param>
        <briefdescription>
<para>copy assignment operator from typed lambda </para>        </briefdescription>
        <detaileddescription>
<para>Example usage: <programlisting><codeline><highlight class="normal">//<sp/>construct<sp/>from<sp/>packed<sp/>function</highlight></codeline>
<codeline><highlight class="normal">TypedPackedFunc&lt;int(int)&gt;<sp/>ftyped;</highlight></codeline>
<codeline><highlight class="normal">ftyped<sp/>=<sp/>[](int<sp/>x)<sp/>{<sp/>return<sp/>x<sp/>+<sp/>1;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>call<sp/>the<sp/>typed<sp/>version.</highlight></codeline>
<codeline><highlight class="normal">CHECK_EQ(ftyped(1),<sp/>2);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typed_lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>typed lambda function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FLambda</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the lambda function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="278" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1aa590b3e712e06867805b41aaf17019ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1afaeae1b79f815895ab9ab09b444e7ba3" kindref="member">TSelf</ref> &amp;</type>
        <definition>TSelf&amp; tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::operator=</definition>
        <argsstring>(PackedFunc packed)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref></type>
          <declname>packed</declname>
        </param>
        <briefdescription>
<para>copy assignment operator from <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packed</parametername>
</parameternamelist>
<parameterdescription>
<para>The packed function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="287" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1ad76f4953dcc7a98bb8ad6b15994090d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>R</type>
        <definition>R tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::operator()</definition>
        <argsstring>(Args...args) const </argsstring>
        <name>operator()</name>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Invoke the operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="296" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="1375" bodyend="1378"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1ad81c4bf7bbdfab20e9c9d58699d6c4a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::operator PackedFunc</definition>
        <argsstring>() const </argsstring>
        <name>operator PackedFunc</name>
        <briefdescription>
<para>convert to <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the internal <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="301" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="301" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1ac0ad0eb56ab0f12d91adb50dab38ddab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> &amp;</type>
        <definition>const PackedFunc&amp; tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::packed</definition>
        <argsstring>() const </argsstring>
        <name>packed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference the internal <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="307" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="307" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1afa9327d129526d40c966fafc35255cad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::operator==</definition>
        <argsstring>(std::nullptr_t null) const </argsstring>
        <name>operator==</name>
        <param>
          <type>std::nullptr_t</type>
          <declname>null</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the packed function is nullptr </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="311" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="311" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a890186f176c5553331af9c9de8d60e5c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::operator!=</definition>
        <argsstring>(std::nullptr_t null) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>std::nullptr_t</type>
          <declname>null</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the packed function is not nullptr </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="315" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="315" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a617bb54ee3fbe9704131229efd0d903c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::AssignTypedLambda</definition>
        <argsstring>(FType flambda)</argsstring>
        <name>AssignTypedLambda</name>
        <param>
          <type>FType</type>
          <declname>flambda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="1368" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="1368" bodyend="1372"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a10e95efc1c0c572799a87abf6e4fba8c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FLambda</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;::AssignTypedLambda</definition>
        <argsstring>(FLambda flambda)</argsstring>
        <name>AssignTypedLambda</name>
        <param>
          <type>FLambda</type>
          <declname>flambda</declname>
        </param>
        <briefdescription>
<para>Assign the packed field using a typed lambda function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flambda</parametername>
</parameternamelist>
<parameterdescription>
<para>The lambda function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FLambda</parametername>
</parameternamelist>
<parameterdescription>
<para>The lambda function type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>We capture the lambda when possible for maximum efficiency. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="331" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> wrapper to provide typed function signature. It is backed by a <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> internally. </para>    </briefdescription>
    <detaileddescription>
<para><anchor id="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1TypedPackedFuncAnchor"/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref> enables compile time type checking. <ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref> works with the runtime system:<itemizedlist>
<listitem><para>It can be passed as an argument of <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref>.</para></listitem><listitem><para>It can be assigned to <ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>.</para></listitem><listitem><para>It can be directly converted to a type-erased <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref>.</para></listitem></itemizedlist>
</para><para>Developers should prefer <ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref> over <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> in C++ code as it enables compile time checking. We can construct a <ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref> from a lambda function with the same signature.</para><para><programlisting><codeline><highlight class="normal">//<sp/>user<sp/>defined<sp/>lambda<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>addone<sp/>=<sp/>[](int<sp/>x)-&gt;int<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>x<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">//<sp/>We<sp/>can<sp/>directly<sp/>convert</highlight></codeline>
<codeline><highlight class="normal">//<sp/>lambda<sp/>function<sp/>to<sp/>TypedPackedFunc</highlight></codeline>
<codeline><highlight class="normal">TypedPackedFunc&lt;int(int)&gt;<sp/>ftyped(addone);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>invoke<sp/>the<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">int<sp/>y<sp/>=<sp/>ftyped(1);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Can<sp/>be<sp/>directly<sp/>converted<sp/>to<sp/>PackedFunc</highlight></codeline>
<codeline><highlight class="normal">PackedFunc<sp/>packed<sp/>=<sp/>ftype;</highlight></codeline>
</programlisting> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>The return value of the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument signature of the function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="7415">
        <label>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</label>
        <link refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4"/>
      </node>
    </collaborationgraph>
    <location file="include/tvm/runtime/packed_func.h" line="198" column="1" bodyfile="include/tvm/runtime/packed_func.h" bodystart="198" bodyend="332"/>
    <listofallmembers>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a10e95efc1c0c572799a87abf6e4fba8c" prot="private" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>AssignTypedLambda</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a617bb54ee3fbe9704131229efd0d903c" prot="public" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>AssignTypedLambda</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1ad81c4bf7bbdfab20e9c9d58699d6c4a5" prot="public" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>operator PackedFunc</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a890186f176c5553331af9c9de8d60e5c" prot="public" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>operator!=</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1ad76f4953dcc7a98bb8ad6b15994090d8" prot="public" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>operator()</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a8dd1fbae84cb9597c52977b0e8db64dc" prot="public" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>operator=</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1aa590b3e712e06867805b41aaf17019ed" prot="public" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>operator=</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1afa9327d129526d40c966fafc35255cad" prot="public" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>operator==</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1ac0ad0eb56ab0f12d91adb50dab38ddab" prot="public" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>packed</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1af893f83122ef4489c9de5091c19d3957" prot="private" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>packed_</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1afaeae1b79f815895ab9ab09b444e7ba3" prot="public" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>TSelf</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1ae0ea8b4adc6dab8c74086bceaef6b3e1" prot="private" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>TVMRetValue</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a4abadc6786dd14a3aed6e2b5b342d1d6" prot="public" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>TypedPackedFunc</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1af45a2ceff92e6f6c394ea766a45027a0" prot="public" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>TypedPackedFunc</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1afd8ee9dd9648c19b468bb4b0b00e8e4e" prot="public" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>TypedPackedFunc</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a6b346a6d0b601eff5a100c7a207e9c86" prot="public" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>TypedPackedFunc</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a0161d426f9ca366c860ad48c384f7192" prot="public" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>TypedPackedFunc</name></member>
      <member refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a36ca0d1876544463ee848766e70e5e96" prot="public" virt="non-virtual"><scope>tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</scope><name>TypedPackedFunc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
