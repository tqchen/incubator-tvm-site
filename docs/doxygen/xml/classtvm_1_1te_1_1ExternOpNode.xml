<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1te_1_1ExternOpNode" kind="class" language="C++" prot="public">
    <compoundname>tvm::te::ExternOpNode</compoundname>
    <basecompoundref refid="classtvm_1_1te_1_1OperationNode" prot="public" virt="non-virtual">tvm::te::OperationNode</basecompoundref>
    <includes refid="operation_8h" local="no">operation.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classtvm_1_1te_1_1ExternOpNode_1a12bd3ed18f9735abe6850766132eeb4c" prot="public" static="no" mutable="no">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>Array&lt;Tensor&gt; tvm::te::ExternOpNode::inputs</definition>
        <argsstring></argsstring>
        <name>inputs</name>
        <briefdescription>
<para>The input tensors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="429" column="1" bodyfile="include/tvm/te/operation.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1te_1_1ExternOpNode_1ae5c3fa995ba59e0e001d6b8f92e39c7a" prot="public" static="no" mutable="no">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1Buffer" kindref="compound">Buffer</ref> &gt;</type>
        <definition>Array&lt;Buffer&gt; tvm::te::ExternOpNode::input_placeholders</definition>
        <argsstring></argsstring>
        <name>input_placeholders</name>
        <briefdescription>
<para>Symbolic placeholder representation of inputs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="431" column="1" bodyfile="include/tvm/te/operation.h" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1te_1_1ExternOpNode_1a004d2ec4a439339a2067e4fe7b93dac8" prot="public" static="no" mutable="no">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1Buffer" kindref="compound">Buffer</ref> &gt;</type>
        <definition>Array&lt;Buffer&gt; tvm::te::ExternOpNode::output_placeholders</definition>
        <argsstring></argsstring>
        <name>output_placeholders</name>
        <briefdescription>
<para>Symbolic placeholder representation of outputs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="433" column="1" bodyfile="include/tvm/te/operation.h" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1te_1_1ExternOpNode_1a962b2cfaa4a2141c1b9247ac634b7bf2" prot="public" static="no" mutable="no">
        <type><ref refid="classtvm_1_1tir_1_1Stmt" kindref="compound">Stmt</ref></type>
        <definition>Stmt tvm::te::ExternOpNode::body</definition>
        <argsstring></argsstring>
        <name>body</name>
        <briefdescription>
<para>the statement that generates the computation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="435" column="1" bodyfile="include/tvm/te/operation.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classtvm_1_1te_1_1ExternOpNode_1abed03a9c33cf6c1d526deae53bae55db" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::te::ExternOpNode::_type_key</definition>
        <argsstring></argsstring>
        <name>_type_key</name>
        <initializer>= &quot;ExternOp&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="483" column="1" bodyfile="include/tvm/te/operation.h" bodystart="483" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1te_1_1ExternOpNode_1aa2781af3e0414490286d62ed05722e7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::te::ExternOpNode::ExternOpNode</definition>
        <argsstring>()</argsstring>
        <name>ExternOpNode</name>
        <briefdescription>
<para>constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="438" column="1" bodyfile="include/tvm/te/operation.h" bodystart="438" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ExternOpNode_1a1a0ce8401e57d9c66ece44dd59b3fb7d" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>int</type>
        <definition>int tvm::te::ExternOpNode::num_outputs</definition>
        <argsstring>() const final</argsstring>
        <name>num_outputs</name>
        <reimplements refid="classtvm_1_1tir_1_1FunctionBaseNode_1a86d8a47eb472945b01ab508c1ff94930">num_outputs</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of outputs of this function </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ExternOpNode_1a4e7c08092b2941fddbc2ad5e9c9584fc" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> &gt;</type>
        <definition>Array&lt;IterVar&gt; tvm::te::ExternOpNode::root_iter_vars</definition>
        <argsstring>() const final</argsstring>
        <name>root_iter_vars</name>
        <reimplements refid="classtvm_1_1te_1_1OperationNode_1a8d15cfe7d0d721da305c1b36e9f5a914">root_iter_vars</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The list of iteration variable at root </para></simplesect>
<simplesect kind="note"><para>root_iter_vars decides the shape of the outputs. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ExternOpNode_1aeb736e912b0379e8e1f888ed9fcbad4f" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref></type>
        <definition>DataType tvm::te::ExternOpNode::output_dtype</definition>
        <argsstring>(size_t i) const final</argsstring>
        <name>output_dtype</name>
        <reimplements refid="classtvm_1_1te_1_1OperationNode_1a6bcb7f0c177c642d82a5a200d13369f0">output_dtype</reimplements>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get data type. i-th output tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The output index. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>type of i-th output. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="442" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ExternOpNode_1a9d2a9f96da44f3a777913a76703e3dbc" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt;</type>
        <definition>Array&lt;PrimExpr&gt; tvm::te::ExternOpNode::output_shape</definition>
        <argsstring>(size_t i) const final</argsstring>
        <name>output_shape</name>
        <reimplements refid="classtvm_1_1te_1_1OperationNode_1a7c4fc476de1543ea65c83e02631bfd09">output_shape</reimplements>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get shape of i-th output tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The output index. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>shape of i-th output. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ExternOpNode_1ae637420eeb8dc47d6587f570d8f56eb7" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>Array&lt;Tensor&gt; tvm::te::ExternOpNode::InputTensors</definition>
        <argsstring>() const final</argsstring>
        <name>InputTensors</name>
        <reimplements refid="classtvm_1_1te_1_1OperationNode_1a9675fbb905d62de5b86624388acec4b1">InputTensors</reimplements>
        <briefdescription>
<para>List all the input Tensors. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>List of input tensors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ExternOpNode_1a24e420a11a0b08e6aa02e21732ecc3ed" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref></type>
        <definition>Operation tvm::te::ExternOpNode::ReplaceInputs</definition>
        <argsstring>(const Operation &amp;self, const std::unordered_map&lt; Tensor, Tensor &gt; &amp;rmap) const final</argsstring>
        <name>ReplaceInputs</name>
        <reimplements refid="classtvm_1_1te_1_1OperationNode_1a9a876a433cfbe32215c3802ef520016e">ReplaceInputs</reimplements>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>, <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>rmap</declname>
        </param>
        <briefdescription>
<para>Replace the input of the operation by pattern specified by rmap. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference to self. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The replacement map. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>self if nothing is replaced, otherwise return replaced op. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="445" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ExternOpNode_1ab6976ded9159bd1930030b7196e6568f" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void tvm::te::ExternOpNode::PropBoundToInputs</definition>
        <argsstring>(const Operation &amp;self, arith::Analyzer *analyzer, const std::unordered_map&lt; const VarNode *, IntSet &gt; &amp;dom_map, std::unordered_map&lt; Tensor, TensorDom &gt; *out_dom_map) const final</argsstring>
        <name>PropBoundToInputs</name>
        <reimplements refid="classtvm_1_1te_1_1OperationNode_1a3c32a93264e0d627d8389b703edcaf49">PropBoundToInputs</reimplements>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1arith_1_1Analyzer" kindref="compound">arith::Analyzer</ref> *</type>
          <declname>analyzer</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; const <ref refid="classtvm_1_1tir_1_1VarNode" kindref="compound">VarNode</ref> *, IntSet &gt; &amp;</type>
          <declname>dom_map</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>, <ref refid="structtvm_1_1te_1_1TensorDom" kindref="compound">TensorDom</ref> &gt; *</type>
          <declname>out_dom_map</declname>
        </param>
        <briefdescription>
<para>Propagate the bounds to inputs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference to self. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>analyzer</parametername>
</parameternamelist>
<parameterdescription>
<para>The analyzer to be used in the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dom_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the domain map of Variables(corresponds to root_iter_vars) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_dom_map</parametername>
</parameternamelist>
<parameterdescription>
<para>The output domain. The function is only asked to fill the bounds for Tensors that is already in the out_dom_map </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ExternOpNode_1aa85d67532d24a69b0eec476fc7fec03f" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void tvm::te::ExternOpNode::GatherBound</definition>
        <argsstring>(const Operation &amp;self, const std::unordered_map&lt; Tensor, TensorDom &gt; &amp;tensor_dom, std::unordered_map&lt; IterVar, Range &gt; *out_dom_map) const final</argsstring>
        <name>GatherBound</name>
        <reimplements refid="classtvm_1_1te_1_1OperationNode_1a278d1f242176ff48cc150532a9172aee">GatherBound</reimplements>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>, <ref refid="structtvm_1_1te_1_1TensorDom" kindref="compound">TensorDom</ref> &gt; &amp;</type>
          <declname>tensor_dom</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref>, <ref refid="classtvm_1_1Range" kindref="compound">Range</ref> &gt; *</type>
          <declname>out_dom_map</declname>
        </param>
        <briefdescription>
<para>Gather the bound from output tensor. Set the range of each root_iter_vars in the op to out_dom_map. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference to self. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensor_dom</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain map of Tensor-&gt;access set of each dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_dom_map</parametername>
</parameternamelist>
<parameterdescription>
<para>The output domain map of each IterVar to be setted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ExternOpNode_1ab5155b645767085f9fd499144c30ae1d" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classtvm_1_1tir_1_1Stmt" kindref="compound">Stmt</ref></type>
        <definition>Stmt tvm::te::ExternOpNode::BuildRealize</definition>
        <argsstring>(const Stage &amp;stage, const std::unordered_map&lt; IterVar, Range &gt; &amp;realize_map, const Stmt &amp;body) const final</argsstring>
        <name>BuildRealize</name>
        <reimplements refid="classtvm_1_1te_1_1OperationNode_1afc89a6b2f5e35adf79c3587a95ba283a">BuildRealize</reimplements>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref>, <ref refid="classtvm_1_1Range" kindref="compound">Range</ref> &gt; &amp;</type>
          <declname>realize_map</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1Stmt" kindref="compound">Stmt</ref> &amp;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
<para>Build the Realize statement that realizes the op&apos;s output tensors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>the op&apos;s stage. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>realize_map</parametername>
</parameternamelist>
<parameterdescription>
<para>The realization domain map of the operators. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>The body that is going to get </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A realization statement that wraps body. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="457" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ExternOpNode_1a57e5a0a6b3160e38209aa309e8535698" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classtvm_1_1tir_1_1Stmt" kindref="compound">Stmt</ref></type>
        <definition>Stmt tvm::te::ExternOpNode::BuildProvide</definition>
        <argsstring>(const Stage &amp;stage, const std::unordered_map&lt; IterVar, Range &gt; &amp;dom_map, bool debug_keep_trivial_loop) const final</argsstring>
        <name>BuildProvide</name>
        <reimplements refid="classtvm_1_1te_1_1OperationNode_1a0a4a33f450e0e0890f59af9464c9015f">BuildProvide</reimplements>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref>, <ref refid="classtvm_1_1Range" kindref="compound">Range</ref> &gt; &amp;</type>
          <declname>dom_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>debug_keep_trivial_loop</declname>
        </param>
        <briefdescription>
<para>Build the statement that provide the output tensors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The schedule stage of the op. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dom_map</parametername>
</parameternamelist>
<parameterdescription>
<para>The domain map of all iteration domains. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>debug_keep_trivial_loop</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether keep trivial loops with extent of 1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A statement that add production and wraps consumer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ExternOpNode_1ab36bb6d49424620d6e25cb71dc5b6a2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::te::ExternOpNode::VisitAttrs</definition>
        <argsstring>(AttrVisitor *v)</argsstring>
        <name>VisitAttrs</name>
        <param>
          <type><ref refid="classtvm_1_1AttrVisitor" kindref="compound">AttrVisitor</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="466" column="1" bodyfile="include/tvm/te/operation.h" bodystart="466" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1ExternOpNode_1a410ad593a7df5a0dd580f32e28bbd0d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tvm::te::ExternOpNode::TVM_DECLARE_FINAL_OBJECT_INFO</definition>
        <argsstring>(ExternOpNode, OperationNode)</argsstring>
        <name>TVM_DECLARE_FINAL_OBJECT_INFO</name>
        <param>
          <type><ref refid="classtvm_1_1te_1_1ExternOpNode" kindref="compound">ExternOpNode</ref></type>
        </param>
        <param>
          <type><ref refid="classtvm_1_1te_1_1OperationNode" kindref="compound">OperationNode</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="484" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtvm_1_1te_1_1ExternOpNode_1a598766b00a103d5fbbf1ee9599debdd0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref></type>
        <definition>static Operation tvm::te::ExternOpNode::make</definition>
        <argsstring>(std::string name, std::string tag, Map&lt; std::string, ObjectRef &gt; attrs, Array&lt; Tensor &gt; inputs, Array&lt; Buffer &gt; input_placeholders, Array&lt; Buffer &gt; output_placeholders, Stmt body)</argsstring>
        <name>make</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Map" kindref="compound">Map</ref>&lt; std::string, ObjectRef &gt;</type>
          <declname>attrs</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1Buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>input_placeholders</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1Buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>output_placeholders</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1Stmt" kindref="compound">Stmt</ref></type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="475" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>External computation that cannot be splitted. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5010">
        <label>Object</label>
      </node>
      <node id="5008">
        <label>tvm::te::OperationNode</label>
        <link refid="classtvm_1_1te_1_1OperationNode"/>
        <childnode refid="5009" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5007">
        <label>tvm::te::ExternOpNode</label>
        <link refid="classtvm_1_1te_1_1ExternOpNode"/>
        <childnode refid="5008" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5009">
        <label>tvm::tir::FunctionBaseNode</label>
        <link refid="classtvm_1_1tir_1_1FunctionBaseNode"/>
        <childnode refid="5010" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5017">
        <label>tvm::Array&lt; tvm::tir::Buffer &gt;</label>
        <link refid="classtvm_1_1Array"/>
        <childnode refid="5016" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5016">
        <label>ObjectRef</label>
      </node>
      <node id="5019">
        <label>tvm::Array&lt; tvm::te::Tensor &gt;</label>
        <link refid="classtvm_1_1Array"/>
        <childnode refid="5016" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5015">
        <label>tvm::Map&lt; std::string, ObjectRef &gt;</label>
        <childnode refid="5016" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5014">
        <label>Object</label>
      </node>
      <node id="5012">
        <label>tvm::te::OperationNode</label>
        <link refid="classtvm_1_1te_1_1OperationNode"/>
        <childnode refid="5013" relation="public-inheritance">
        </childnode>
        <childnode refid="5015" relation="usage">
          <edgelabel>+attrs</edgelabel>
        </childnode>
      </node>
      <node id="5018">
        <label>tvm::tir::Stmt</label>
        <link refid="classtvm_1_1tir_1_1Stmt"/>
        <childnode refid="5016" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5011">
        <label>tvm::te::ExternOpNode</label>
        <link refid="classtvm_1_1te_1_1ExternOpNode"/>
        <childnode refid="5012" relation="public-inheritance">
        </childnode>
        <childnode refid="5017" relation="usage">
          <edgelabel>+output_placeholders</edgelabel>
          <edgelabel>+input_placeholders</edgelabel>
        </childnode>
        <childnode refid="5018" relation="usage">
          <edgelabel>+body</edgelabel>
        </childnode>
        <childnode refid="5019" relation="usage">
          <edgelabel>+inputs</edgelabel>
        </childnode>
      </node>
      <node id="5013">
        <label>tvm::tir::FunctionBaseNode</label>
        <link refid="classtvm_1_1tir_1_1FunctionBaseNode"/>
        <childnode refid="5014" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tvm/te/operation.h" line="426" column="1" bodyfile="include/tvm/te/operation.h" bodystart="426" bodyend="485"/>
    <listofallmembers>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1abed03a9c33cf6c1d526deae53bae55db" prot="public" virt="non-virtual"><scope>tvm::te::ExternOpNode</scope><name>_type_key</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a009ebd67a59953ec9a587f9724afd538" prot="public" virt="non-virtual"><scope>tvm::te::ExternOpNode</scope><name>attrs</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1a962b2cfaa4a2141c1b9247ac634b7bf2" prot="public" virt="non-virtual"><scope>tvm::te::ExternOpNode</scope><name>body</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1a57e5a0a6b3160e38209aa309e8535698" prot="public" virt="virtual"><scope>tvm::te::ExternOpNode</scope><name>BuildProvide</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1ab5155b645767085f9fd499144c30ae1d" prot="public" virt="virtual"><scope>tvm::te::ExternOpNode</scope><name>BuildRealize</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1aa2781af3e0414490286d62ed05722e7c" prot="public" virt="non-virtual"><scope>tvm::te::ExternOpNode</scope><name>ExternOpNode</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a03b4cec709aed13088b1127a5f90c382" prot="public" virt="virtual"><scope>tvm::te::ExternOpNode</scope><name>func_name</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1aa85d67532d24a69b0eec476fc7fec03f" prot="public" virt="virtual"><scope>tvm::te::ExternOpNode</scope><name>GatherBound</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1ae5c3fa995ba59e0e001d6b8f92e39c7a" prot="public" virt="non-virtual"><scope>tvm::te::ExternOpNode</scope><name>input_placeholders</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1a12bd3ed18f9735abe6850766132eeb4c" prot="public" virt="non-virtual"><scope>tvm::te::ExternOpNode</scope><name>inputs</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1ae637420eeb8dc47d6587f570d8f56eb7" prot="public" virt="virtual"><scope>tvm::te::ExternOpNode</scope><name>InputTensors</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1a598766b00a103d5fbbf1ee9599debdd0" prot="public" virt="non-virtual"><scope>tvm::te::ExternOpNode</scope><name>make</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1ad2fd6f140257f7b3c311f88374fa74d2" prot="public" virt="non-virtual"><scope>tvm::te::ExternOpNode</scope><name>name</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1a1a0ce8401e57d9c66ece44dd59b3fb7d" prot="public" virt="virtual"><scope>tvm::te::ExternOpNode</scope><name>num_outputs</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1aeb736e912b0379e8e1f888ed9fcbad4f" prot="public" virt="virtual"><scope>tvm::te::ExternOpNode</scope><name>output_dtype</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1a004d2ec4a439339a2067e4fe7b93dac8" prot="public" virt="non-virtual"><scope>tvm::te::ExternOpNode</scope><name>output_placeholders</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1a9d2a9f96da44f3a777913a76703e3dbc" prot="public" virt="virtual"><scope>tvm::te::ExternOpNode</scope><name>output_shape</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1ab6976ded9159bd1930030b7196e6568f" prot="public" virt="virtual"><scope>tvm::te::ExternOpNode</scope><name>PropBoundToInputs</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1a24e420a11a0b08e6aa02e21732ecc3ed" prot="public" virt="virtual"><scope>tvm::te::ExternOpNode</scope><name>ReplaceInputs</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1a4e7c08092b2941fddbc2ad5e9c9584fc" prot="public" virt="virtual"><scope>tvm::te::ExternOpNode</scope><name>root_iter_vars</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1ae6ac4336e7dc2df84f128fc97a6cdb9b" prot="public" virt="non-virtual"><scope>tvm::te::ExternOpNode</scope><name>tag</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a281dd659ac061a77c5783bd0e42324df" prot="public" virt="non-virtual"><scope>tvm::te::ExternOpNode</scope><name>TVM_DECLARE_BASE_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1a410ad593a7df5a0dd580f32e28bbd0d7" prot="public" virt="non-virtual"><scope>tvm::te::ExternOpNode</scope><name>TVM_DECLARE_FINAL_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1te_1_1ExternOpNode_1ab36bb6d49424620d6e25cb71dc5b6a2a" prot="public" virt="non-virtual"><scope>tvm::te::ExternOpNode</scope><name>VisitAttrs</name></member>
      <member refid="classtvm_1_1tir_1_1FunctionBaseNode_1a03b2f3fdfc5ae82ca081cf988dac22e4" prot="public" virt="virtual"><scope>tvm::te::ExternOpNode</scope><name>~FunctionBaseNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
