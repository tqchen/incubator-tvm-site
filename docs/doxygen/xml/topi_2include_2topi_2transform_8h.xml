<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="topi_2include_2topi_2transform_8h" kind="file" language="C++">
    <compoundname>transform.h</compoundname>
    <includes refid="data__layout_8h" local="no">tvm/tir/data_layout.h</includes>
    <includes refid="operation_8h" local="no">tvm/te/operation.h</includes>
    <includes refid="tags_8h" local="no">topi/tags.h</includes>
    <includes refid="ravel__unravel_8h" local="no">topi/detail/ravel_unravel.h</includes>
    <includes refid="constant__utils_8h" local="no">topi/detail/constant_utils.h</includes>
    <includes refid="tensor__utils_8h" local="no">topi/detail/tensor_utils.h</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">iterator</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">limits</includes>
    <includes local="no">unordered_set</includes>
    <includedby refid="bias__add_8h" local="no">topi/include/topi/nn/bias_add.h</includedby>
    <includedby refid="reduction_8h" local="no">topi/include/topi/reduction.h</includedby>
    <includedby refid="reorg_8h" local="no">topi/include/topi/vision/reorg.h</includedby>
    <incdepgraph>
      <node id="11804">
        <label>tvm/arith/int_set.h</label>
        <link refid="int__set_8h"/>
        <childnode refid="11794" relation="include">
        </childnode>
        <childnode refid="11759" relation="include">
        </childnode>
        <childnode refid="11779" relation="include">
        </childnode>
      </node>
      <node id="11795">
        <label>tvm/ir/span.h</label>
        <link refid="span_8h"/>
        <childnode refid="11765" relation="include">
        </childnode>
        <childnode refid="11760" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
      </node>
      <node id="11770">
        <label>atomic</label>
      </node>
      <node id="11809">
        <label>tvm/tir/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11759" relation="include">
        </childnode>
        <childnode refid="11798" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
      </node>
      <node id="11805">
        <label>tvm/te/tensor.h</label>
        <link refid="tensor_8h"/>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11806" relation="include">
        </childnode>
        <childnode refid="11759" relation="include">
        </childnode>
        <childnode refid="11798" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
        <childnode refid="11769" relation="include">
        </childnode>
        <childnode refid="11767" relation="include">
        </childnode>
      </node>
      <node id="11784">
        <label>functional</label>
      </node>
      <node id="11820">
        <label>topi/detail/tensor_utils.h</label>
        <link refid="tensor__utils_8h"/>
        <childnode refid="11801" relation="include">
        </childnode>
      </node>
      <node id="11786">
        <label>limits</label>
      </node>
      <node id="11815">
        <label>tvm/ir/function.h</label>
        <link refid="ir_2function_8h"/>
        <childnode refid="11794" relation="include">
        </childnode>
        <childnode refid="11816" relation="include">
        </childnode>
        <childnode refid="11767" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
      </node>
      <node id="11775">
        <label>tvm/runtime/module.h</label>
        <link refid="runtime_2module_8h"/>
        <childnode refid="11776" relation="include">
        </childnode>
        <childnode refid="11761" relation="include">
        </childnode>
        <childnode refid="11765" relation="include">
        </childnode>
        <childnode refid="11771" relation="include">
        </childnode>
        <childnode refid="11777" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11779" relation="include">
        </childnode>
        <childnode refid="11774" relation="include">
        </childnode>
      </node>
      <node id="11774">
        <label>tvm/runtime/packed_func.h</label>
        <link refid="packed__func_8h"/>
        <childnode refid="11766" relation="include">
        </childnode>
        <childnode refid="11761" relation="include">
        </childnode>
        <childnode refid="11775" relation="include">
        </childnode>
        <childnode refid="11780" relation="include">
        </childnode>
        <childnode refid="11783" relation="include">
        </childnode>
        <childnode refid="11765" relation="include">
        </childnode>
        <childnode refid="11784" relation="include">
        </childnode>
        <childnode refid="11785" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11786" relation="include">
        </childnode>
        <childnode refid="11777" relation="include">
        </childnode>
        <childnode refid="11769" relation="include">
        </childnode>
        <childnode refid="11767" relation="include">
        </childnode>
      </node>
      <node id="11821">
        <label>iterator</label>
      </node>
      <node id="11788">
        <label>tvm/node/functor.h</label>
        <link refid="functor_8h"/>
        <childnode refid="11766" relation="include">
        </childnode>
        <childnode refid="11765" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
        <childnode refid="11767" relation="include">
        </childnode>
        <childnode refid="11769" relation="include">
        </childnode>
      </node>
      <node id="11814">
        <label>tvm/tir/function.h</label>
        <link refid="tir_2function_8h"/>
        <childnode refid="11815" relation="include">
        </childnode>
        <childnode refid="11759" relation="include">
        </childnode>
        <childnode refid="11809" relation="include">
        </childnode>
        <childnode refid="11799" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
      </node>
      <node id="11808">
        <label>tvm/te/tensor_intrin.h</label>
        <link refid="tensor__intrin_8h"/>
        <childnode refid="11805" relation="include">
        </childnode>
        <childnode refid="11809" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
      </node>
      <node id="11765">
        <label>tvm/runtime/object.h</label>
        <link refid="object_8h"/>
        <childnode refid="11766" relation="include">
        </childnode>
        <childnode refid="11761" relation="include">
        </childnode>
        <childnode refid="11767" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11769" relation="include">
        </childnode>
        <childnode refid="11770" relation="include">
        </childnode>
      </node>
      <node id="11763">
        <label>stdint.h</label>
      </node>
      <node id="11780">
        <label>tvm/runtime/ndarray.h</label>
        <link refid="ndarray_8h"/>
        <childnode refid="11761" relation="include">
        </childnode>
        <childnode refid="11765" relation="include">
        </childnode>
        <childnode refid="11781" relation="include">
        </childnode>
        <childnode refid="11770" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
        <childnode refid="11769" relation="include">
        </childnode>
      </node>
      <node id="11791">
        <label>tvm/node/structural_hash.h</label>
        <link refid="structural__hash_8h"/>
        <childnode refid="11783" relation="include">
        </childnode>
        <childnode refid="11788" relation="include">
        </childnode>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11784" relation="include">
        </childnode>
      </node>
      <node id="11812">
        <label>topi/detail/constant_utils.h</label>
        <link refid="constant__utils_8h"/>
        <childnode refid="11759" relation="include">
        </childnode>
        <childnode refid="11813" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
      </node>
      <node id="11802">
        <label>tvm/arith/analyzer.h</label>
        <link refid="analyzer_8h"/>
        <childnode refid="11803" relation="include">
        </childnode>
        <childnode refid="11794" relation="include">
        </childnode>
        <childnode refid="11804" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
        <childnode refid="11779" relation="include">
        </childnode>
        <childnode refid="11777" relation="include">
        </childnode>
        <childnode refid="11786" relation="include">
        </childnode>
      </node>
      <node id="11757">
        <label>topi/include/topi/transform.h</label>
        <link refid="topi/include/topi/transform.h"/>
        <childnode refid="11758" relation="include">
        </childnode>
        <childnode refid="11801" relation="include">
        </childnode>
        <childnode refid="11810" relation="include">
        </childnode>
        <childnode refid="11811" relation="include">
        </childnode>
        <childnode refid="11812" relation="include">
        </childnode>
        <childnode refid="11820" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
        <childnode refid="11821" relation="include">
        </childnode>
        <childnode refid="11797" relation="include">
        </childnode>
        <childnode refid="11786" relation="include">
        </childnode>
        <childnode refid="11819" relation="include">
        </childnode>
      </node>
      <node id="11759">
        <label>tvm/tir/expr.h</label>
        <link refid="tir_2expr_8h"/>
        <childnode refid="11760" relation="include">
        </childnode>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11788" relation="include">
        </childnode>
        <childnode refid="11761" relation="include">
        </childnode>
        <childnode refid="11783" relation="include">
        </childnode>
        <childnode refid="11794" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11797" relation="include">
        </childnode>
        <childnode refid="11779" relation="include">
        </childnode>
        <childnode refid="11793" relation="include">
        </childnode>
        <childnode refid="11786" relation="include">
        </childnode>
        <childnode refid="11769" relation="include">
        </childnode>
      </node>
      <node id="11768">
        <label>string</label>
      </node>
      <node id="11817">
        <label>dmlc/common.h</label>
      </node>
      <node id="11792">
        <label>tvm/node/repr_printer.h</label>
        <link refid="repr__printer_8h"/>
        <childnode refid="11788" relation="include">
        </childnode>
        <childnode refid="11793" relation="include">
        </childnode>
      </node>
      <node id="11789">
        <label>tvm/node/container.h</label>
        <link refid="node_2container_8h"/>
        <childnode refid="11765" relation="include">
        </childnode>
        <childnode refid="11771" relation="include">
        </childnode>
        <childnode refid="11774" relation="include">
        </childnode>
        <childnode refid="11767" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
        <childnode refid="11790" relation="include">
        </childnode>
        <childnode refid="11779" relation="include">
        </childnode>
        <childnode refid="11769" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
      </node>
      <node id="11819">
        <label>unordered_set</label>
      </node>
      <node id="11801">
        <label>tvm/te/operation.h</label>
        <link refid="operation_8h"/>
        <childnode refid="11802" relation="include">
        </childnode>
        <childnode refid="11805" relation="include">
        </childnode>
        <childnode refid="11807" relation="include">
        </childnode>
        <childnode refid="11759" relation="include">
        </childnode>
        <childnode refid="11798" relation="include">
        </childnode>
        <childnode refid="11809" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
        <childnode refid="11779" relation="include">
        </childnode>
      </node>
      <node id="11764">
        <label>stddef.h</label>
      </node>
      <node id="11816">
        <label>tvm/ir/attrs.h</label>
        <link refid="ir_2attrs_8h"/>
        <childnode refid="11817" relation="include">
        </childnode>
        <childnode refid="11794" relation="include">
        </childnode>
        <childnode refid="11774" relation="include">
        </childnode>
        <childnode refid="11779" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
        <childnode refid="11784" relation="include">
        </childnode>
        <childnode refid="11767" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11769" relation="include">
        </childnode>
      </node>
      <node id="11806">
        <label>tvm/arith/bound.h</label>
        <link refid="bound_8h"/>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11794" relation="include">
        </childnode>
        <childnode refid="11804" relation="include">
        </childnode>
        <childnode refid="11759" relation="include">
        </childnode>
        <childnode refid="11799" relation="include">
        </childnode>
        <childnode refid="11779" relation="include">
        </childnode>
      </node>
      <node id="11818">
        <label>tvm/tir/lowered_func.h</label>
        <link refid="lowered__func_8h"/>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11759" relation="include">
        </childnode>
        <childnode refid="11799" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
      </node>
      <node id="11798">
        <label>tvm/tir/op.h</label>
        <link refid="tir_2op_8h"/>
        <childnode refid="11796" relation="include">
        </childnode>
        <childnode refid="11759" relation="include">
        </childnode>
        <childnode refid="11799" relation="include">
        </childnode>
        <childnode refid="11797" relation="include">
        </childnode>
        <childnode refid="11767" relation="include">
        </childnode>
        <childnode refid="11786" relation="include">
        </childnode>
      </node>
      <node id="11794">
        <label>tvm/ir/expr.h</label>
        <link refid="ir_2expr_8h"/>
        <childnode refid="11765" relation="include">
        </childnode>
        <childnode refid="11760" relation="include">
        </childnode>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11795" relation="include">
        </childnode>
        <childnode refid="11796" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11797" relation="include">
        </childnode>
        <childnode refid="11786" relation="include">
        </childnode>
        <childnode refid="11767" relation="include">
        </childnode>
      </node>
      <node id="11785">
        <label>tuple</label>
      </node>
      <node id="11766">
        <label>dmlc/logging.h</label>
      </node>
      <node id="11799">
        <label>tvm/tir/stmt.h</label>
        <link refid="stmt_8h"/>
        <childnode refid="11759" relation="include">
        </childnode>
        <childnode refid="11767" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
        <childnode refid="11769" relation="include">
        </childnode>
      </node>
      <node id="11778">
        <label>vector</label>
      </node>
      <node id="11787">
        <label>tvm/node/structural_equal.h</label>
        <link refid="structural__equal_8h"/>
        <childnode refid="11783" relation="include">
        </childnode>
        <childnode refid="11788" relation="include">
        </childnode>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
      </node>
      <node id="11776">
        <label>dmlc/io.h</label>
      </node>
      <node id="11761">
        <label>tvm/runtime/c_runtime_api.h</label>
        <link refid="c__runtime__api_8h"/>
        <childnode refid="11762" relation="include">
        </childnode>
        <childnode refid="11763" relation="include">
        </childnode>
        <childnode refid="11764" relation="include">
        </childnode>
      </node>
      <node id="11796">
        <label>tvm/ir/type.h</label>
        <link refid="ir_2type_8h"/>
        <childnode refid="11765" relation="include">
        </childnode>
        <childnode refid="11783" relation="include">
        </childnode>
        <childnode refid="11760" relation="include">
        </childnode>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11795" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
      </node>
      <node id="11813">
        <label>tvm/tir/ir_pass.h</label>
        <link refid="ir__pass_8h"/>
        <childnode refid="11807" relation="include">
        </childnode>
        <childnode refid="11759" relation="include">
        </childnode>
        <childnode refid="11809" relation="include">
        </childnode>
        <childnode refid="11814" relation="include">
        </childnode>
        <childnode refid="11818" relation="include">
        </childnode>
        <childnode refid="11779" relation="include">
        </childnode>
        <childnode refid="11819" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
      </node>
      <node id="11769">
        <label>utility</label>
      </node>
      <node id="11800">
        <label>sstream</label>
      </node>
      <node id="11760">
        <label>tvm/node/node.h</label>
        <link refid="node_8h"/>
        <childnode refid="11761" relation="include">
        </childnode>
        <childnode refid="11765" relation="include">
        </childnode>
        <childnode refid="11771" relation="include">
        </childnode>
        <childnode refid="11773" relation="include">
        </childnode>
        <childnode refid="11792" relation="include">
        </childnode>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11787" relation="include">
        </childnode>
        <childnode refid="11791" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
        <childnode refid="11769" relation="include">
        </childnode>
        <childnode refid="11767" relation="include">
        </childnode>
      </node>
      <node id="11782">
        <label>dmlc/serializer.h</label>
      </node>
      <node id="11772">
        <label>cstdlib</label>
      </node>
      <node id="11811">
        <label>topi/detail/ravel_unravel.h</label>
        <link refid="ravel__unravel_8h"/>
        <childnode refid="11801" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
      </node>
      <node id="11793">
        <label>iostream</label>
      </node>
      <node id="11781">
        <label>tvm/runtime/serializer.h</label>
        <link refid="serializer_8h"/>
        <childnode refid="11776" relation="include">
        </childnode>
        <childnode refid="11782" relation="include">
        </childnode>
        <childnode refid="11761" relation="include">
        </childnode>
        <childnode refid="11780" relation="include">
        </childnode>
      </node>
      <node id="11779">
        <label>unordered_map</label>
      </node>
      <node id="11773">
        <label>tvm/node/reflection.h</label>
        <link refid="reflection_8h"/>
        <childnode refid="11761" relation="include">
        </childnode>
        <childnode refid="11765" relation="include">
        </childnode>
        <childnode refid="11771" relation="include">
        </childnode>
        <childnode refid="11774" relation="include">
        </childnode>
        <childnode refid="11780" relation="include">
        </childnode>
        <childnode refid="11783" relation="include">
        </childnode>
        <childnode refid="11787" relation="include">
        </childnode>
        <childnode refid="11791" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11767" relation="include">
        </childnode>
      </node>
      <node id="11771">
        <label>tvm/runtime/memory.h</label>
        <link refid="runtime_2memory_8h"/>
        <childnode refid="11765" relation="include">
        </childnode>
        <childnode refid="11772" relation="include">
        </childnode>
        <childnode refid="11769" relation="include">
        </childnode>
        <childnode refid="11767" relation="include">
        </childnode>
      </node>
      <node id="11783">
        <label>tvm/runtime/data_type.h</label>
        <link refid="data__type_8h"/>
        <childnode refid="11761" relation="include">
        </childnode>
        <childnode refid="11766" relation="include">
        </childnode>
        <childnode refid="11767" relation="include">
        </childnode>
      </node>
      <node id="11803">
        <label>tvm/support/with.h</label>
        <link refid="with_8h"/>
        <childnode refid="11766" relation="include">
        </childnode>
        <childnode refid="11769" relation="include">
        </childnode>
      </node>
      <node id="11767">
        <label>type_traits</label>
      </node>
      <node id="11797">
        <label>algorithm</label>
      </node>
      <node id="11810">
        <label>topi/tags.h</label>
        <link refid="tags_8h"/>
        <childnode refid="11768" relation="include">
        </childnode>
      </node>
      <node id="11762">
        <label>dlpack/dlpack.h</label>
      </node>
      <node id="11807">
        <label>tvm/te/schedule.h</label>
        <link refid="schedule_8h"/>
        <childnode refid="11759" relation="include">
        </childnode>
        <childnode refid="11805" relation="include">
        </childnode>
        <childnode refid="11808" relation="include">
        </childnode>
        <childnode refid="11803" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11779" relation="include">
        </childnode>
      </node>
      <node id="11777">
        <label>memory</label>
      </node>
      <node id="11790">
        <label>initializer_list</label>
      </node>
      <node id="11758">
        <label>tvm/tir/data_layout.h</label>
        <link refid="data__layout_8h"/>
        <childnode refid="11759" relation="include">
        </childnode>
        <childnode refid="11798" relation="include">
        </childnode>
        <childnode refid="11768" relation="include">
        </childnode>
        <childnode refid="11800" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
        <childnode refid="11769" relation="include">
        </childnode>
        <childnode refid="11797" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="11827">
        <label>topi/include/topi/vision/reorg.h</label>
        <link refid="reorg_8h"/>
      </node>
      <node id="11823">
        <label>topi/include/topi/nn/bias_add.h</label>
        <link refid="bias__add_8h"/>
      </node>
      <node id="11822">
        <label>topi/include/topi/transform.h</label>
        <link refid="topi/include/topi/transform.h"/>
        <childnode refid="11823" relation="include">
        </childnode>
        <childnode refid="11824" relation="include">
        </childnode>
        <childnode refid="11827" relation="include">
        </childnode>
      </node>
      <node id="11826">
        <label>topi/include/topi/nn/softmax.h</label>
        <link refid="nn_2softmax_8h"/>
      </node>
      <node id="11824">
        <label>topi/include/topi/reduction.h</label>
        <link refid="reduction_8h"/>
        <childnode refid="11825" relation="include">
        </childnode>
        <childnode refid="11826" relation="include">
        </childnode>
        <childnode refid="11827" relation="include">
        </childnode>
      </node>
      <node id="11825">
        <label>topi/include/topi/nn/pooling.h</label>
        <link refid="nn_2pooling_8h"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacetopi">topi</innernamespace>
    <briefdescription>
<para>Transform op constructors. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor">#ifndef<sp/>TOPI_TRANSFORM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOPI_TRANSFORM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="data__layout_8h" kindref="compound">tvm/tir/data_layout.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="operation_8h" kindref="compound">tvm/te/operation.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="tags_8h" kindref="compound">topi/tags.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ravel__unravel_8h" kindref="compound">topi/detail/ravel_unravel.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="constant__utils_8h" kindref="compound">topi/detail/constant_utils.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="tensor__utils_8h" kindref="compound">topi/detail/tensor_utils.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetopi" kindref="compound">topi</ref><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetvm" kindref="compound">tvm</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetvm_1_1te" kindref="compound">tvm::te</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetopi_1_1detail" kindref="compound">topi::detail</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="namespacetopi_1a43f5f5b2746b7a9075f66b0d477e8ffc" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a43f5f5b2746b7a9075f66b0d477e8ffc" kindref="member">expand_dims</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_newaxis<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_expand_dims&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref>)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size());</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>CHECK(-ndim<sp/>-<sp/>1<sp/>&lt;=<sp/>axis<sp/>&amp;&amp;<sp/>axis<sp/>&lt;=<sp/>ndim)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expand_dims<sp/>only<sp/>accepts<sp/>`axis`<sp/>in<sp/>[-data.ndim<sp/>-<sp/>1,<sp/>data.ndim]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>got<sp/>axis<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>axis</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>and<sp/>data.ndim<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ndim;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>CHECK(num_newaxis<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expand_dims<sp/>only<sp/>accepts<sp/>`num_newaxis<sp/>&gt;=<sp/>0`&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>got<sp/>num_newaxis<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>num_newaxis;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>offset<sp/>from<sp/>last<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>=<sp/>ndim<sp/>+<sp/>axis<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>new_shape;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(axis);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>new_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(num_newaxis);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>new_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(1);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>axis;<sp/>i<sp/>&lt;<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>new_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>new_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>idx;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(axis);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices[i]);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>axis<sp/>+<sp/>num_newaxis;<sp/>i<sp/>&lt;<sp/>indices.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices[i]);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x(idx);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="namespacetopi_1adcf3c85d4cfd135e6270d4d722332107" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1adcf3c85d4cfd135e6270d4d722332107" kindref="member">transpose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Integer&gt;</ref><sp/>axes,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_transpose&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!axes.defined()<sp/>||<sp/>axes.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>axes<sp/>=<sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Integer&gt;</ref>();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>static_cast&lt;int&gt;(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size())<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>axes.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(i);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>new_shape;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>axes.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(axes[i]-&gt;value);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_axis<sp/>=<sp/>axis;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_axis<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size())<sp/>+<sp/>axis;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>axes.<ref refid="classtvm_1_1Array_1ab3db968deb4be7a51767f22d267eb7af" kindref="member">Set</ref>(i,<sp/>new_axis);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK((new_axis<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(new_axis<sp/>&lt;<sp/>static_cast&lt;int&gt;(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size())))</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;axis=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>axis<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>invalid<sp/>for<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-dimensional<sp/>input<sp/>tensor&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>axes.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=j)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(new_axis<sp/>!=<sp/>static_cast&lt;int&gt;(axes[j]-&gt;value))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;repeated<sp/>axis<sp/>in<sp/>transpose&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>new_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[new_axis]);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>new_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;PrimExpr&gt;<sp/>idx;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>axes.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(1);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>axes.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(axes[i]-&gt;value);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx[axis]<sp/>=<sp/>indices[i];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x(idx);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="namespacetopi_1af09ea81ad65b99ed0c39ccd4511b1e2b" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1af09ea81ad65b99ed0c39ccd4511b1e2b" kindref="member">flip</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_flip&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>src_tensor_dim<sp/>=<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis_inp<sp/>=<sp/>axis;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size())<sp/>+<sp/>axis;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>CHECK((0<sp/>&lt;=<sp/>axis)<sp/>&amp;&amp;<sp/>(axis<sp/>&lt;<sp/>static_cast&lt;int&gt;(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size())))</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;axis=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>axis_inp<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>invalid<sp/>for<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-dimensional<sp/>input<sp/>tensor&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reverse<sp/>the<sp/>Input<sp/>Tensor<sp/>in<sp/>the<sp/>axis<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Array&lt;PrimExpr&gt;<sp/>real_indices;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>src_tensor_dim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(i<sp/>==<sp/>static_cast&lt;size_t&gt;(axis))<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.push_back(x-&gt;shape[i]<sp/>-<sp/>indices[i]<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.push_back(indices[i]);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x(real_indices);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="namespacetopi_1a52121ee19c0cb3a9fd11bbf11c866c47" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a52121ee19c0cb3a9fd11bbf11c866c47" kindref="member">reshape</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>newshape,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_reshape&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x_shape<sp/>=<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>target_shape;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ele<sp/>:<sp/>newshape)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ele.as&lt;<ref refid="classtvm_1_1IntImmNode" kindref="compound">IntImmNode</ref>&gt;())<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>target_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(<ref refid="namespacetopi_1acfc3df84ca997ccac0f57d50e96c1c06" kindref="member">cast</ref>(<ref refid="classtvm_1_1runtime_1_1DataType_1ab45f13dd70d982d9f977c79b6f7fac98" kindref="member">DataType::Int</ref>(32),<sp/>ele));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>target_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(ele);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_empty_shape(target_shape))<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(target_shape,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref><sp/>&amp;indices)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1aa058caeda9deceda3d6ffeda347be442" kindref="member">tvm::cast</ref>(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a4c0b6e32a09ab6ea6b869de45394294d" kindref="member">dtype</ref>,<sp/>0);<sp/>},</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>target_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x(UnravelIndex(</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RavelIndex(<ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref>{indices.<ref refid="classtvm_1_1Array_1a5db0d3faad39ca865162e50d555a25fa" kindref="member">begin</ref>(),<sp/>indices.<ref refid="classtvm_1_1Array_1a6f05e6a14eca3ea865da0f293b4a5325" kindref="member">end</ref>()},<sp/>target_shape),</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_shape));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="namespacetopi_1a9a7b635c754829e85c9595771218f1f6" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a9a7b635c754829e85c9595771218f1f6" kindref="member">unravel_index</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/><ref refid="namespacetopi_1a649c66231bc50f3ed98ac8bb6b6e2518" kindref="member">shape</ref>,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_unravel&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x_shape<sp/>=<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape_shape<sp/>=<sp/>shape-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>oshape;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>oshape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(shape_shape[0]);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x_shape.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>oshape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(x_shape[0]);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>indices[0];</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;PrimExpr&gt;<sp/>indices_divs;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref><sp/>cur_val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref><sp/>index_val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x_shape.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index_val<sp/>=<sp/>x[indices[1]];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index_val<sp/>=<sp/>x();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>indices_divs.push_back(index_val);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>GetConstInt(shape_shape[0])<sp/>-<sp/>1;<sp/>v<sp/>&gt;=<sp/>0;<sp/>--v)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="namespacetvm_1ad400409d87dc337f8b5fe13e18d363f9" kindref="member">tvm::if_then_else</ref>(i<sp/>==<sp/>v,<sp/><ref refid="namespacetvm_1a857781b7243b2f90018f7fe6baf9c30e" kindref="member">indexmod</ref>(indices_divs.back(),<sp/>shape[v]),<sp/>ret);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cur_val<sp/>=<sp/><ref refid="namespacetvm_1a8203d70a5ebf3532370264b000d0d276" kindref="member">indexdiv</ref>(indices_divs.back(),<sp/>shape[v]);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indices_divs.push_back(cur_val);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(oshape,<sp/>func,<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="namespacetopi_1aa218ed1a5ac7bfdee53f23781184eab5" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1aa218ed1a5ac7bfdee53f23781184eab5" kindref="member">squeeze</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Integer&gt;</ref><sp/>axis,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>atleast1d<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_squeeze&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>axis_val;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!axis.defined()<sp/>||<sp/>axis.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsConstInt(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i])<sp/>&amp;&amp;<sp/>GetConstInt(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i])<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis_val.push_back(static_cast&lt;int&gt;(i));</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>axis.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>val<sp/>=<sp/>axis[i]-&gt;value;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_EQ(GetConstInt(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[val]),<sp/>1)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Dimension<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>val<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>must<sp/>have<sp/>size<sp/>1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>axis_val.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(val);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>std::unordered_set&lt;int&gt;<sp/>axis_set(axis_val.begin(),<sp/>axis_val.end());</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>out_shape;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis_set.count(static_cast&lt;int&gt;(i))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_shape.size()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>atleast1d)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>out_shape.push_back(1);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>out_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>real_indices;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis_set.count(static_cast&lt;int&gt;(i))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices[i<sp/>-<sp/>flag]);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(0);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x(real_indices);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="namespacetopi_1a3cbb849aef5a33e956412f696d7f2302" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a3cbb849aef5a33e956412f696d7f2302" kindref="member">concatenate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Tensor&gt;</ref>&amp;<sp/>inputs,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_concat&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inputs[0]-&gt;shape.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>CHECK(-ndim<sp/>&lt;=<sp/>axis<sp/>&amp;&amp;<sp/>axis<sp/>&lt;<sp/>ndim)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;concatenate<sp/>only<sp/>accepts<sp/>`axis`<sp/>in<sp/>[-ndim,<sp/>ndim)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>got<sp/>axis<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>axis</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>and<sp/>ndim<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ndim;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>+=<sp/>ndim;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>CHECK_LT(axis,<sp/>inputs[0]-&gt;<ref refid="namespacetopi_1a649c66231bc50f3ed98ac8bb6b6e2518" kindref="member">shape</ref>.size())<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;axis<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>axis_sizes;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t<sp/>:<sp/>inputs)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>axis_sizes.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(t-&gt;shape[axis]);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref><sp/>join_size<sp/>=<sp/>axis_sizes[0];</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>axis_sizes.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>join_size<sp/>+=<sp/>axis_sizes[i];</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>join_size<sp/>=<sp/><ref refid="namespacetvm_1_1tir_1a923d1bb833c984008772782e90cda37a" kindref="member">tvm::tir::Simplify</ref>(join_size);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>out_shape;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>inputs[0]-&gt;shape.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>out_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(i<sp/>==<sp/>static_cast&lt;size_t&gt;(axis)<sp/>?<sp/>join_size<sp/>:<sp/>inputs[0]-&gt;<ref refid="namespacetopi_1a649c66231bc50f3ed98ac8bb6b6e2518" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>out_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>inputs[0](indices);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ind<sp/>=<sp/>indices[axis];</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>inputs.size()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind<sp/>-=<sp/>axis_sizes[i];</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>idx;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(axis);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices[i]);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(ind);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>axis<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>indices.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices[i]);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="namespacetvm_1ad400409d87dc337f8b5fe13e18d363f9" kindref="member">tvm::if_then_else</ref>(ind<sp/>&gt;=<sp/>0,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs[i<sp/>+<sp/>1](idx),</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="namespacetopi_1ad06b4b6ca055fa853c54903f6c2c7c5a" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1ad06b4b6ca055fa853c54903f6c2c7c5a" kindref="member">stack</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Tensor&gt;</ref>&amp;<sp/>inputs,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_stack&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inputs[0]-&gt;shape.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>CHECK(-ndim<sp/>-<sp/>1<sp/>&lt;=<sp/>axis<sp/>&amp;&amp;<sp/>axis<sp/>&lt;=<sp/>ndim)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;stack<sp/>only<sp/>accepts<sp/>`axis`<sp/>in<sp/>[-ndim,<sp/>ndim)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>got<sp/>axis<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>axis</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>and<sp/>ndim<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ndim;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>+=<sp/>ndim<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>CHECK_LT(axis,<sp/>inputs[0]-&gt;<ref refid="namespacetopi_1a649c66231bc50f3ed98ac8bb6b6e2518" kindref="member">shape</ref>.size()<sp/>+<sp/>1)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;axis<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stack_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inputs.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>out_shape;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(axis);<sp/>++i)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>out_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(inputs[0]-&gt;shape[i]);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>out_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(stack_size);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>static_cast&lt;size_t&gt;(axis);<sp/>i<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(ndim);<sp/>++i)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>out_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(inputs[0]-&gt;shape[i]);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>out_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>idx;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>indices.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++i)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>static_cast&lt;size_t&gt;(axis))</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices[i]);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ind<sp/>=<sp/>indices[axis];</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>inputs[0](idx);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(inputs.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>()<sp/>-<sp/>1);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="namespacetvm_1ad400409d87dc337f8b5fe13e18d363f9" kindref="member">tvm::if_then_else</ref>(ind<sp/>==<sp/>i<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputs[i<sp/>+<sp/>1](idx),</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="namespacetopi_1a26a5a9917dde52a5958fee4b98ef4876" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Tensor&gt;</ref><sp/><ref refid="namespacetopi_1a26a5a9917dde52a5958fee4b98ef4876" kindref="member">split</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Integer&gt;</ref><sp/>split_indices,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_split&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size());</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>CHECK_LT(axis,<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;axis<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>src_axis_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(GetConstInt(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[axis]));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>begin_ids;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>begin_ids.push_back(0);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref><sp/>idx<sp/>:<sp/>split_indices)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(idx-&gt;value);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_GT(val,<sp/>begin_ids.back())</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;split_indices<sp/>must<sp/>be<sp/>sorted&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>begin_ids.push_back(val);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt; Array&lt;PrimExpr&gt;</ref><sp/>&gt;<sp/>out_shapes;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>begin_ids.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>out_axis_size;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>begin_ids.size()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_axis_size<sp/>=<sp/>src_axis_size<sp/>-<sp/>begin_ids[i];</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_axis_size<sp/>=<sp/>begin_ids[i<sp/>+<sp/>1]<sp/>-<sp/>begin_ids[i];</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/><ref refid="namespacetopi_1a649c66231bc50f3ed98ac8bb6b6e2518" kindref="member">shape</ref>;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(axis);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(out_axis_size);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>axis<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>out_shapes.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(shape);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Tensor&gt;</ref><sp/>result;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>begin_ids.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_shapes[i],<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>begin_ids[i];</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>real_indices;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(axis);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices[j]);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices[axis]<sp/>+<sp/>begin);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>axis<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>indices.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices[j]);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x(real_indices);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag));</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="552" refid="namespacetopi_1a9ab808d1f2133511b6d9aaa4d4438e4c" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a9ab808d1f2133511b6d9aaa4d4438e4c" kindref="member">strided_slice</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Integer&gt;</ref>&amp;<sp/>begin,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Integer&gt;</ref>&amp;<sp/>end,</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Integer&gt;</ref>&amp;<sp/>strides,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_strided_slice&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>src_tensor_dim<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size());</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>the<sp/>ranges.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>this<sp/>code<sp/>duplicates<sp/>the<sp/>shape<sp/>inference<sp/>logic<sp/>relay.op</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Consider<sp/>to<sp/>refactor<sp/>in<sp/>the<sp/>future.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>stride_vec;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref><sp/>i<sp/>:<sp/>strides)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(i.defined());</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>stride_vec.push_back(i-&gt;value);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>stride_vec.size();<sp/>i<sp/>&lt;<sp/>src_tensor_dim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>stride_vec.push_back(1);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>max_range<sp/>=<sp/><ref refid="namespacetvm_1ab49bad0808ba033343e72ba37b39af2e" kindref="member">std::numeric_limits&lt;int64_t&gt;::max</ref>();</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>begin_vec;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>begin.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!begin[i].defined())<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>value=None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>begin_vec.push_back(stride_vec[i]<sp/>&gt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>max_range);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>begin_vec.push_back(begin[i]-&gt;value);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>begin_vec.size();<sp/>i<sp/>&lt;<sp/>src_tensor_dim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>begin_vec.push_back(stride_vec[i]<sp/>&gt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>max_range);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>end_vec;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>end<sp/>to<sp/>be<sp/>None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!end[i].defined())<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end_vec.push_back(stride_vec[i]<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>max_range);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end_vec.push_back(end[i]-&gt;value);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>end_vec.size();<sp/>i<sp/>&lt;<sp/>src_tensor_dim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>end_vec.push_back(stride_vec[i]<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>max_range);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>out_shape;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>begin_expr;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>strides_expr;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>src_tensor_dim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>begin_range<sp/>=<sp/>stride_vec[i]<sp/>&lt;<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>dim_i<sp/>=<sp/>GetConstInt(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>end_range<sp/>=<sp/>stride_vec[i]<sp/>&lt;<sp/>0<sp/>?<sp/>dim_i<sp/>-<sp/>1<sp/>:<sp/>dim_i;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>negative<sp/>indices<sp/>to<sp/>positive<sp/>value,<sp/>clips<sp/>on<sp/>the<sp/>correct<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index_canonicalization<sp/>=<sp/>[dim_i,<sp/>begin_range,<sp/>end_range](int64_t<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>+=<sp/>dim_i;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1a9da780393e228969f77aa7550520a582" kindref="member">std::min</ref>(<ref refid="namespacetvm_1ab49bad0808ba033343e72ba37b39af2e" kindref="member">std::max</ref>(index,<sp/>begin_range),<sp/>end_range);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>begin_i<sp/>=<sp/>index_canonicalization(begin_vec[i]);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>end_i<sp/>=<sp/>index_canonicalization(end_vec[i]);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interval<sp/>=<sp/><ref refid="namespacetvm_1a84d274191adb24d2acb39064c1fbec52" kindref="member">std::abs</ref>(end_i<sp/>-<sp/>begin_i);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slice_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((interval</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="namespacetvm_1a84d274191adb24d2acb39064c1fbec52" kindref="member">std::abs</ref>(stride_vec[i])<sp/>-<sp/>1)<sp/>/<sp/><ref refid="namespacetvm_1a84d274191adb24d2acb39064c1fbec52" kindref="member">std::abs</ref>(stride_vec[i]));</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(stride_vec[i]<sp/>&lt;<sp/>0<sp/>?<sp/>(end_i<sp/>&lt;=<sp/>begin_i)<sp/>:<sp/>(begin_i<sp/>&lt;=<sp/>end_i))</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>Input<sp/>[Begin=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>begin_vec[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>End=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>end_vec[i]</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>is<sp/>invalid<sp/>for<sp/>axis=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>begin_expr.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(<ref refid="namespacetvm_1_1tir_1a4ea566597880d04bd62fbec687e338b5" kindref="member">make_const</ref>(begin[0].dtype(),<sp/>begin_i));</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>strides_expr.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(<ref refid="namespacetvm_1_1tir_1a4ea566597880d04bd62fbec687e338b5" kindref="member">make_const</ref>((strides.size()<sp/>!=<sp/>0<sp/>?<sp/>strides[0].dtype()<sp/>:<sp/>begin[0].dtype()),</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stride_vec[i]));</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>out_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(slice_size);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>out_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>real_indices;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>src_tensor_dim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices[i]<sp/>*<sp/>strides_expr[i]<sp/>+<sp/>begin_expr[i]);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x(real_indices);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="652" refid="namespacetopi_1a286cebb686c9435f8f83cfc7b5ceaeff" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Tensor&gt;</ref><sp/><ref refid="namespacetopi_1a286cebb686c9435f8f83cfc7b5ceaeff" kindref="member">split_sections</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_sections,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_split_sections&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size());</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>CHECK_LT(axis,<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;axis<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>src_axis_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(GetConstInt(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[axis]));</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>CHECK_GT(num_sections,<sp/>0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Slice<sp/>count<sp/>must<sp/>be<sp/>&gt;<sp/>0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>CHECK_EQ(src_axis_size<sp/>%<sp/>num_sections,<sp/>0)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;num_sections<sp/>must<sp/>be<sp/>an<sp/>integer<sp/>factor<sp/>of<sp/>the<sp/>size<sp/>of<sp/>axis<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>axis</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>src_axis_size<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Integer&gt;</ref><sp/>split_indices;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>seg_size<sp/>=<sp/>src_axis_size<sp/>/<sp/>num_sections;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_sections;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>region<sp/>at<sp/>index<sp/>0<sp/>is<sp/>added<sp/>by<sp/>split()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>split_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(seg_size<sp/>*<sp/>i);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetopi_1a26a5a9917dde52a5958fee4b98ef4876" kindref="member">split</ref>(x,<sp/>split_indices,<sp/>axis,<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="693" refid="namespacetopi_1a00a3620077979f4234cac34ec21ab956" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a00a3620077979f4234cac34ec21ab956" kindref="member">take</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>a,</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>mode<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;clip&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_take&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>a_shape<sp/>=<sp/>a-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>out_shape<sp/>=<sp/>indices-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref><sp/>a_size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>a_shape.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>a_size<sp/>=<sp/>a_size<sp/>*<sp/>a_shape[i];</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;clip&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>out_index)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/><ref refid="namespacetvm_1a9da780393e228969f77aa7550520a582" kindref="member">tvm::min</ref>(<ref refid="namespacetvm_1ab49bad0808ba033343e72ba37b39af2e" kindref="member">tvm::max</ref>(0,<sp/>indices(out_index)),<sp/>a_size<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a(UnravelIndex(idx,<sp/>a_shape));</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(WARNING)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Fast<sp/>mode<sp/>segfaults<sp/>when<sp/>there<sp/>are<sp/>out-of-bounds<sp/>indices.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Make<sp/>sure<sp/>input<sp/>indices<sp/>are<sp/>in<sp/>bound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>out_index)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a(UnravelIndex(indices(out_index),<sp/>a_shape));</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>mode<sp/>==<sp/>&quot;wrap&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>out_index)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/><ref refid="namespacetvm_1ae3fd62ca6008d6f20e4845426ec47aa6" kindref="member">truncmod</ref>(<ref refid="namespacetvm_1ae3fd62ca6008d6f20e4845426ec47aa6" kindref="member">truncmod</ref>(indices(out_index),<sp/>a_size)<sp/>+<sp/>a_size,<sp/>a_size);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a(UnravelIndex(idx,<sp/>a_shape));</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="740" refid="namespacetopi_1aa62a8900e1f0a3c48fcd81a5c591624f" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1aa62a8900e1f0a3c48fcd81a5c591624f" kindref="member">sequence_mask</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>data,</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>valid_length,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mask_value,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_sequence_mask&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>CHECK(axis<sp/>==<sp/>0<sp/>||<sp/>axis<sp/>==<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;axis<sp/>must<sp/>be<sp/>either<sp/>0<sp/>or<sp/>1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>CHECK_EQ(valid_length-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size(),<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;valid_length<sp/>must<sp/>have<sp/>ndim=1,<sp/>i.e.,<sp/>(batch_size,).&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>length_dim<sp/>=<sp/>data-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[axis];</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>batch_dim<sp/>=<sp/>data-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[1<sp/>-<sp/>axis];</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>out_shape<sp/>=<sp/>data-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/>out<sp/>=<sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>out_index)<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>len_index;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>out_index[axis];</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bid<sp/>=<sp/>out_index[1<sp/>-<sp/>axis];</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len_index.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(bid);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref><sp/>ret<sp/>=<sp/><ref refid="namespacetvm_1ad400409d87dc337f8b5fe13e18d363f9" kindref="member">tvm::if_then_else</ref>(</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetvm_1aa058caeda9deceda3d6ffeda347be442" kindref="member">tvm::cast</ref>(valid_length-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a4c0b6e32a09ab6ea6b869de45394294d" kindref="member">dtype</ref>,<sp/>tid)<sp/>&gt;=<sp/>valid_length(len_index),</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetvm_1_1tir_1a4ea566597880d04bd62fbec687e338b5" kindref="member">tvm::tir::make_const</ref>(data-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a4c0b6e32a09ab6ea6b869de45394294d" kindref="member">dtype</ref>,<sp/>mask_value),<sp/>data(out_index));</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="778" refid="namespacetopi_1a94bc3bef1d14c142405d7a3b29ec1657" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a00a3620077979f4234cac34ec21ab956" kindref="member">take</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>a,</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis,</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>mode<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;clip&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_take&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size());</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>CHECK_GE(axis,<sp/>0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;axis<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>CHECK_LT(axis,<sp/>a-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;axis<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>axis_dim<sp/>=<sp/>a-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[axis];</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indices_len<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(indices-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size());</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>out_shape;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>a-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis<sp/>==<sp/>static_cast&lt;int&gt;(i))<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>indices-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[j]);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(a-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;clip&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>out_index)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>indices_position;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>axis;<sp/>j<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(axis+indices_len);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_position.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(out_index[j]);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>real_indices;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(axis);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(out_index[j]);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/><ref refid="namespacetvm_1a9da780393e228969f77aa7550520a582" kindref="member">tvm::min</ref>(<ref refid="namespacetvm_1ab49bad0808ba033343e72ba37b39af2e" kindref="member">tvm::max</ref>(0,<sp/>indices(indices_position)),</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis_dim<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(idx);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>axis<sp/>+<sp/>indices_len;<sp/>j<sp/>&lt;<sp/>out_index.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(out_index[j]);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a(real_indices);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;fast&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(WARNING)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Fast<sp/>mode<sp/>segfaults<sp/>when<sp/>there<sp/>are<sp/>out-of-bounds<sp/>indices.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Make<sp/>sure<sp/>input<sp/>indices<sp/>are<sp/>in<sp/>bound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>out_index)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>indices_position;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>axis;<sp/>j<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(axis+indices_len);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_position.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(out_index[j]);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>real_indices;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(axis);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(out_index[j]);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices(indices_position));</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>axis<sp/>+<sp/>indices_len;<sp/>j<sp/>&lt;<sp/>out_index.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(out_index[j]);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a(real_indices);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>mode<sp/>==<sp/>&quot;wrap&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>out_index)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>indices_position;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>axis;<sp/>j<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(axis+indices_len);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_position.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(out_index[j]);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>real_indices;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(axis);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(out_index[j]);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/><ref refid="namespacetvm_1ae3fd62ca6008d6f20e4845426ec47aa6" kindref="member">truncmod</ref>(<ref refid="namespacetvm_1ae3fd62ca6008d6f20e4845426ec47aa6" kindref="member">truncmod</ref>(indices(indices_position),<sp/>axis_dim)<sp/>+<sp/>axis_dim,<sp/>axis_dim);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(idx);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>axis<sp/>+<sp/>indices_len;<sp/>j<sp/>&lt;<sp/>out_index.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(out_index[j]);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a(real_indices);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="872" refid="namespacetopi_1a79f6a17e39e9f5cc3ec1f2e74bde3917" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a79f6a17e39e9f5cc3ec1f2e74bde3917" kindref="member">where</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>condition,</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>y,</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_where&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref>)<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>CHECK_EQ(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size(),<sp/>y-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size())</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x<sp/>and<sp/>y<sp/>must<sp/>have<sp/>the<sp/>same<sp/>shape.Got<sp/>different<sp/>number<sp/>of<sp/>dimension:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>vs<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size();</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>CHECK_EQ(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a4c0b6e32a09ab6ea6b869de45394294d" kindref="member">dtype</ref>,<sp/>y-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a4c0b6e32a09ab6ea6b869de45394294d" kindref="member">dtype</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x<sp/>and<sp/>y<sp/>must<sp/>have<sp/>the<sp/>same<sp/>dtype:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a4c0b6e32a09ab6ea6b869de45394294d" kindref="member">dtype</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>vs<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a4c0b6e32a09ab6ea6b869de45394294d" kindref="member">dtype</ref>;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>oshape<sp/>=<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/>out;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(condition-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_EQ(condition-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size(),<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size())</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;condition<sp/>array<sp/>must<sp/>be<sp/>either<sp/>have<sp/>the<sp/>same<sp/>shape<sp/>as<sp/>x<sp/>or<sp/>to<sp/>be<sp/>a<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1-D<sp/>array.Got<sp/>different<sp/>number<sp/>of<sp/>dimension:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>condition-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>vs<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size();</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oshape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1tir_1_1SelectNode_1ae0809a88c56d20faceba05184b6e793b" kindref="member">tvm::tir::SelectNode::make</ref>(condition(indices)<sp/>!=<sp/>0,<sp/>x(indices),<sp/>y(indices));</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_EQ(topi::GetConstInt(condition-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[0]),<sp/>topi::GetConstInt(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[0]))</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;If<sp/>condition<sp/>is<sp/>1-D,<sp/>the<sp/>first<sp/>dimension<sp/>must<sp/>be<sp/>the<sp/>same<sp/>as<sp/>x:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>condition-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>vs<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[0];</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oshape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>condition_idx{indices[0]};</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1tir_1_1SelectNode_1ae0809a88c56d20faceba05184b6e793b" kindref="member">tvm::tir::SelectNode::make</ref>(condition(condition_idx)<sp/>!=<sp/>0,</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x(indices),<sp/>y(indices));</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="920" refid="namespacetopi_1ad9915152471ce419d2f28e17c765b2d2" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1ad9915152471ce419d2f28e17c765b2d2" kindref="member">repeat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>repeats,</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis,</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_repeat&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref>)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size());</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>CHECK(-ndim<sp/>-<sp/>1<sp/>&lt;=<sp/>axis<sp/>&amp;&amp;<sp/>axis<sp/>&lt;=<sp/>ndim)</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;repeat<sp/>only<sp/>accepts<sp/>`axis`<sp/>in<sp/>[-data.ndim<sp/>-<sp/>1,<sp/>data.ndim]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>got<sp/>axis<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>axis</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>and<sp/>data.ndim<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ndim;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>CHECK(repeats<sp/>&gt;=<sp/>1)</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;repeat<sp/>only<sp/>accepts<sp/>`repeats<sp/>&gt;=<sp/>1`&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>got<sp/>repeats<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>repeats;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>offset<sp/>from<sp/>last<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>axis<sp/>+=<sp/>ndim;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>new_shape;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(axis);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>new_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>new_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(repeats<sp/>*<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[axis]);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>axis<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>new_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>new_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>idx;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(axis);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices[i]);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idx.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(<ref refid="namespacetvm_1a8203d70a5ebf3532370264b000d0d276" kindref="member">indexdiv</ref>(indices[axis],<sp/>repeats));</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>axis<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>indices.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices[i]);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x(idx);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="970" refid="namespacetopi_1ad9f589bd3dd30f423e09fc66bff4f5c2" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1ad9f589bd3dd30f423e09fc66bff4f5c2" kindref="member">tile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Integer&gt;</ref><sp/>reps,</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_tile&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref>)<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size();</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rdim<sp/>=<sp/>reps.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tdim<sp/>=<sp/>(ndim<sp/>&gt;<sp/>rdim)<sp/>?<sp/>ndim<sp/>:<sp/>rdim;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>data_shape;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>reps_shape;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>new_shape;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndim<sp/>==<sp/>rdim)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reps_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(reps[i]);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndim<sp/>&gt;<sp/>rdim)<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndim;<sp/>++i)</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(ndim<sp/>-<sp/>rdim);<sp/>++i)</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reps_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(1);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rdim;<sp/>++i)</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reps_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(reps[i]);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(rdim<sp/>-<sp/>ndim);<sp/>++i)</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(1);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndim;<sp/>++i)</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rdim;<sp/>++i)</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reps_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(reps[i]);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tdim;<sp/>++i)</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>new_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(data_shape[i]<sp/>*<sp/>reps_shape[i]);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_empty_shape(new_shape))<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(new_shape,</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1aa058caeda9deceda3d6ffeda347be442" kindref="member">tvm::cast</ref>(x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a4c0b6e32a09ab6ea6b869de45394294d" kindref="member">dtype</ref>,<sp/>0);},</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>idx;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndim<sp/>&gt;=<sp/>rdim)<sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndim;<sp/>++i)</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(<ref refid="namespacetvm_1a857781b7243b2f90018f7fe6baf9c30e" kindref="member">indexmod</ref>(indices[i],<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]));</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndim;<sp/>++i)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(<ref refid="namespacetvm_1a857781b7243b2f90018f7fe6baf9c30e" kindref="member">indexmod</ref>(indices[rdim<sp/>-<sp/>ndim<sp/>+<sp/>i],<sp/>x-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]));</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x(idx);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033" refid="namespacetopi_1a2c6dddfadb41fdddcbefa37aaf28b5e1" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a2c6dddfadb41fdddcbefa37aaf28b5e1" kindref="member">gather_nd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>data,</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_gather_nd&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ndim_d<sp/>=<sp/>data-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size();</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ndim_i<sp/>=<sp/>indices-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size();</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>CHECK_GT(ndim_i,<sp/>1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;indices<sp/>tensor<sp/>must<sp/>have<sp/>at<sp/>least<sp/>2<sp/>dimensions&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>indices_dim0<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(GetConstInt(indices-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[0]));</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/>CHECK_LE(indices_dim0,<sp/>ndim_d)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;dim<sp/>0<sp/>of<sp/>indices<sp/>tensor<sp/>must<sp/>be<sp/>no<sp/>more<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;than<sp/>dimensions<sp/>of<sp/>data<sp/>tensor&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>out_shape;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>ndim_i;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>out_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>indices_dim0;<sp/>i<sp/>&lt;<sp/>ndim_d;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>out_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(data-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_shape.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>out_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(<ref refid="namespacetvm_1_1tir_1a4ea566597880d04bd62fbec687e338b5" kindref="member">make_const</ref>(<ref refid="classtvm_1_1runtime_1_1DataType_1ab45f13dd70d982d9f977c79b6f7fac98" kindref="member">DataType::Int</ref>(32),<sp/>1));</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>out_index)<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>indices_position;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_position.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(0);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndim_i<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_position.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(out_index[i]);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>real_indices;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>indices_dim0;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_position.<ref refid="classtvm_1_1Array_1ab3db968deb4be7a51767f22d267eb7af" kindref="member">Set</ref>(0,<sp/><ref refid="namespacetvm_1_1tir_1a4ea566597880d04bd62fbec687e338b5" kindref="member">make_const</ref>(<ref refid="classtvm_1_1runtime_1_1DataType_1ab45f13dd70d982d9f977c79b6f7fac98" kindref="member">DataType::Int</ref>(32),<sp/>i));</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indices-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a4c0b6e32a09ab6ea6b869de45394294d" kindref="member">dtype</ref>.<ref refid="classtvm_1_1runtime_1_1DataType_1aa0f1df1d5f4ed20bea6260b8ae939e20" kindref="member">is_int</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices(indices_position));</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetvm_1aa058caeda9deceda3d6ffeda347be442" kindref="member">tvm::cast</ref>(<ref refid="classtvm_1_1runtime_1_1DataType_1ab45f13dd70d982d9f977c79b6f7fac98" kindref="member">tvm::DataType::Int</ref>(32),<sp/>indices(indices_position)));</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>ndim_i<sp/>-<sp/>1;<sp/>i<sp/>&lt;<sp/>out_index.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(out_index[i]);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data(real_indices);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092" refid="namespacetopi_1ac7762b21d678dc6398f9fb9df243c04d" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref><sp/><ref refid="namespacetopi_1ac7762b21d678dc6398f9fb9df243c04d" kindref="member">matmul</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref>&amp;<sp/>A,</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref>&amp;<sp/>B,</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>trans_a<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>trans_b<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_matmul&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a06a6892f5e4681142f0c08b0af32499d" kindref="member">kMatMul</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">tvm::Array&lt;tvm::PrimExpr&gt;</ref><sp/>output_shape{A-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[trans_a<sp/>?<sp/>1<sp/>:<sp/>0],</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[trans_b<sp/>?<sp/>0<sp/>:<sp/>1]};</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>k<sp/>=<sp/><ref refid="namespacetvm_1_1te_1aae384e9b73c2271905486e4a74b69265" kindref="member">tvm::te::reduce_axis</ref>(<ref refid="classtvm_1_1Range" kindref="compound">tvm::Range</ref>{0,<sp/>A-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[trans_a<sp/>?<sp/>0<sp/>:<sp/>1]},<sp/></highlight><highlight class="stringliteral">&quot;k&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>[&amp;](<ref refid="classtvm_1_1tir_1_1Var" kindref="compound">tvm::tir::Var</ref><sp/>i,<sp/><ref refid="classtvm_1_1tir_1_1Var" kindref="compound">tvm::tir::Var</ref><sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1a5cea5eb708bfbfa08e285092e5afdc33" kindref="member">tvm::sum</ref>((trans_a<sp/>?<sp/>A[k][i]<sp/>:<sp/>A[i][k])<sp/>*<sp/>(trans_b<sp/>?<sp/>B[j][k]<sp/>:<sp/>B[k][j]),</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{k});</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">tvm::te::compute</ref>(output_shape,<sp/>l,<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119" refid="namespacetopi_1a989014206b809ee5279f5ec37008a457" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a989014206b809ee5279f5ec37008a457" kindref="member">tensordot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>A,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref>&amp;<sp/>B,</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axes<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_tensordot&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a06a6892f5e4681142f0c08b0af32499d" kindref="member">kMatMul</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>CHECK_GE(A-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size(),<sp/>axes);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/>CHECK_GE(B-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size(),<sp/>axes);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>output_shape(A-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.begin(),<sp/>A-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.end()<sp/>+<sp/>(-axes));</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>B-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.begin()<sp/>+<sp/>axes;<sp/>it<sp/>!=<sp/>B-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.end();<sp/>++it)</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>output_shape.push_back(*it);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;IterVar&gt;</ref><sp/>iter_vars;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>axes;<sp/>++i)</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>iter_vars.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(<ref refid="namespacetvm_1_1te_1aae384e9b73c2271905486e4a74b69265" kindref="member">reduce_axis</ref>(<ref refid="classtvm_1_1Range" kindref="compound">Range</ref>(0,<sp/>B-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]),<sp/></highlight><highlight class="stringliteral">&quot;k&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i)));</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>[&amp;A,<sp/>&amp;B,<sp/>&amp;iter_vars,<sp/>axes]</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>input_indices)<sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>A_indices(</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_indices.begin(),</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_indices.begin()<sp/>+<sp/>(A-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size()<sp/>-<sp/>axes));</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>v<sp/>:<sp/>iter_vars)</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(v);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>B_indices;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>v<sp/>:<sp/>iter_vars)</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(v);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>input_indices.begin()<sp/>+<sp/>(A-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size()<sp/>-<sp/>axes);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>!=<sp/>input_indices.end();<sp/>++it)</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(*it);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>passes<sp/>don&apos;t<sp/>like<sp/>reductions<sp/>with<sp/>empty<sp/>axis,<sp/>so<sp/>avoid<sp/>it<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter_vars.empty())</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A(A_indices)<sp/>*<sp/>B(B_indices);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetopi_1a21ec078212b70fdbf3ff44188d9e2ee9" kindref="member">sum</ref>(A(A_indices)<sp/>*<sp/>B(B_indices),<sp/>iter_vars);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(output_shape,<sp/>func,<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174" refid="namespacetopi_1a261c3dc04ec102c8174b1169bcefbbe1" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a989014206b809ee5279f5ec37008a457" kindref="member">tensordot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>A,</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref>&amp;<sp/>B,</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>A_axes,</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>B_axes,</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_tensordot&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a06a6892f5e4681142f0c08b0af32499d" kindref="member">kMatMul</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>CHECK_EQ(A_axes.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>(),<sp/>B_axes.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>A_axes_val<sp/>=<sp/>GetConstIntValues(A_axes,<sp/></highlight><highlight class="stringliteral">&quot;A_axes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>B_axes_val<sp/>=<sp/>GetConstIntValues(B_axes,<sp/></highlight><highlight class="stringliteral">&quot;B_axes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>output_shape;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>A-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(A_axes_val.begin(),<sp/>A_axes_val.end(),<sp/>i)<sp/>==<sp/>A_axes_val.end())</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(A-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>B-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(B_axes_val.begin(),<sp/>B_axes_val.end(),<sp/>i)<sp/>==<sp/>B_axes_val.end())</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_shape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(B-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i]);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;IterVar&gt;</ref><sp/>iter_vars;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>B_axes_val.size();<sp/>++i)</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iter_vars.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(<ref refid="namespacetvm_1_1te_1aae384e9b73c2271905486e4a74b69265" kindref="member">reduce_axis</ref>(<ref refid="classtvm_1_1Range" kindref="compound">Range</ref>(0,<sp/>B-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[B_axes_val[i]]),<sp/></highlight><highlight class="stringliteral">&quot;k&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i)));</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>[&amp;A,<sp/>&amp;B,<sp/>&amp;iter_vars,<sp/>A_axes_val,<sp/>B_axes_val]</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>input_indices)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx_input<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>A_indices;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>A-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>axes_pos<sp/>=<sp/>std::find(A_axes_val.begin(),<sp/>A_axes_val.end(),<sp/>i);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axes_pos<sp/>==<sp/>A_axes_val.end())</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(input_indices[idx_input++]);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(iter_vars[axes_pos<sp/>-<sp/>A_axes_val.begin()]);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>B_indices;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>B-&gt;shape.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>axes_pos<sp/>=<sp/>std::find(B_axes_val.begin(),<sp/>B_axes_val.end(),<sp/>i);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axes_pos<sp/>==<sp/>B_axes_val.end())</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(input_indices[idx_input++]);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(iter_vars[axes_pos<sp/>-<sp/>B_axes_val.begin()]);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetopi_1a21ec078212b70fdbf3ff44188d9e2ee9" kindref="member">sum</ref>(A(A_indices)<sp/>*<sp/>B(B_indices),<sp/>iter_vars);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(output_shape,<sp/>func,<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223" refid="namespacetopi_1a894a6c11751558fa1ea5f1f3a9340ee9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a894a6c11751558fa1ea5f1f3a9340ee9" kindref="member">arange</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref>&amp;<sp/>start,</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref>&amp;<sp/>stop,</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref>&amp;<sp/>step,</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1DataType" kindref="compound">DataType</ref><sp/>dtype,</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_arange&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref><sp/>num_elem<sp/>=<sp/><ref refid="namespacetvm_1aa058caeda9deceda3d6ffeda347be442" kindref="member">tvm::cast</ref>(<ref refid="classtvm_1_1runtime_1_1DataType_1ab45f13dd70d982d9f977c79b6f7fac98" kindref="member">tvm::DataType::Int</ref>(32),<sp/><ref refid="namespacetvm_1a530307f2fad9f6d196c441309af777b9" kindref="member">tvm::ceil</ref>(</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetvm_1aa058caeda9deceda3d6ffeda347be442" kindref="member">tvm::cast</ref>(<ref refid="classtvm_1_1runtime_1_1DataType_1a237a714a6a16e14aa01fa4ac52426551" kindref="member">tvm::DataType::Float</ref>(32),<sp/>stop<sp/>-<sp/>start)<sp/>/<sp/>step));</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/><ref refid="namespacetopi_1a649c66231bc50f3ed98ac8bb6b6e2518" kindref="member">shape</ref>;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>({num_elem},<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1aa058caeda9deceda3d6ffeda347be442" kindref="member">tvm::cast</ref>(dtype,<sp/>start<sp/>+<sp/>step<sp/>*<sp/>indices[0]);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246" refid="namespacetopi_1a2d6d01958fc4ae971259a37e4402703a" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a2d6d01958fc4ae971259a37e4402703a" kindref="member">layout_transform</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>src,</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>src_layout,</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dst_layout,</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_layout_trans&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1tir_1_1Layout" kindref="compound">Layout</ref><sp/>src_layout_struct<sp/>=<sp/><ref refid="classtvm_1_1tir_1_1LayoutNode_1a8347e996d26d9d7e4988bccf7292b3b5" kindref="member">LayoutNode::make</ref>(src_layout);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1tir_1_1Layout" kindref="compound">Layout</ref><sp/>dst_layout_struct<sp/>=<sp/><ref refid="classtvm_1_1tir_1_1LayoutNode_1a8347e996d26d9d7e4988bccf7292b3b5" kindref="member">LayoutNode::make</ref>(dst_layout);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src_layout_struct.<ref refid="classtvm_1_1tir_1_1Layout_1a2edd48a0abe23330747e815e9598b62e" kindref="member">Equals</ref>(dst_layout_struct))<sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>src;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>CHECK(src_layout_struct.defined()<sp/>&amp;&amp;<sp/>dst_layout_struct.defined())</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>convert<sp/>from/to<sp/>undefined<sp/>layout&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layout_converter<sp/>=<sp/><ref refid="classtvm_1_1tir_1_1BijectiveLayout" kindref="compound">tir::BijectiveLayout</ref>(src_layout_struct,<sp/>dst_layout_struct);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>CHECK(layout_converter.defined())</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>convert<sp/>from<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>src_layout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dst_layout;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>dst_shape<sp/>=<sp/>layout_converter.ForwardShape(src-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>dst_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>dst_indices)<sp/>{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>dst_indices_expr(dst_indices.<ref refid="classtvm_1_1Array_1a5db0d3faad39ca865162e50d555a25fa" kindref="member">begin</ref>(),<sp/>dst_indices.<ref refid="classtvm_1_1Array_1a6f05e6a14eca3ea865da0f293b4a5325" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>src_indices<sp/>=<sp/>layout_converter.BackwardIndex(dst_indices_expr);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>src(src_indices);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283" refid="namespacetopi_1a649c66231bc50f3ed98ac8bb6b6e2518" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a649c66231bc50f3ed98ac8bb6b6e2518" kindref="member">shape</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>src,</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1DataType" kindref="compound">DataType</ref><sp/>dtype,</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_shape&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(src-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size());</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>out_shape{ndim};</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(out_shape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>indices[0];</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="namespacetvm_1ad400409d87dc337f8b5fe13e18d363f9" kindref="member">tvm::if_then_else</ref>(idx<sp/>==<sp/>i,<sp/>src-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i],<sp/>ret);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1aa058caeda9deceda3d6ffeda347be442" kindref="member">tvm::cast</ref>(dtype,<sp/>ret);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307" refid="namespacetopi_1a8d3203bcbca982300cfdfce1918e05ab" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a8d3203bcbca982300cfdfce1918e05ab" kindref="member">ndarray_size</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>src,</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1DataType" kindref="compound">DataType</ref>&amp;<sp/>dtype,</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ndarray_size&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(src-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size());</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>out_ndarray_size<sp/>=<sp/>{1};</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(out_ndarray_size,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref><sp/>ret<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>*=<sp/>src-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[i];</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1aa058caeda9deceda3d6ffeda347be442" kindref="member">tvm::cast</ref>(dtype,<sp/>ret);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335" refid="namespacetopi_1a08d4963de8afe8fdb543c012066537a9" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref><sp/><ref refid="namespacetopi_1a08d4963de8afe8fdb543c012066537a9" kindref="member">one_hot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref><sp/>on_value,</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref><sp/>off_value,</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth,</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis,</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1DataType" kindref="compound">DataType</ref>&amp;<sp/>dtype,</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;T_one_hot&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>tag<sp/>=<sp/><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;PrimExpr&gt;</ref><sp/>oshape;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>indices-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indices_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>true_axis<sp/>=<sp/>(axis<sp/>==<sp/>-1)<sp/>?<sp/>indices-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>.size()<sp/>:<sp/>axis;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>true_axis)<sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oshape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(<ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref>(depth));</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oshape.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(indices-&gt;<ref refid="classtvm_1_1te_1_1TensorNode_1a0ba732bc2def0d467854585752911351" kindref="member">shape</ref>[indices_index++]);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref><sp/>on_value_cast<sp/>=<sp/><ref refid="namespacetopi_1acfc3df84ca997ccac0f57d50e96c1c06" kindref="member">cast</ref>(dtype,<sp/>on_value);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref><sp/>off_value_cast<sp/>=<sp/><ref refid="namespacetopi_1acfc3df84ca997ccac0f57d50e96c1c06" kindref="member">cast</ref>(dtype,<sp/>off_value);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1te_1aeacae1afc9dd1267cbb5779f9daa4671" kindref="member">compute</ref>(oshape,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref>&amp;<sp/>iter_vars)<sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1Array" kindref="compound">Array&lt;Var&gt;</ref><sp/>indices_indices;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>iter_vars.<ref refid="classtvm_1_1Array_1a6c150ee7d3e46117b099d2052b19aec5" kindref="member">size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;int&gt;(i)<sp/>==<sp/>true_axis)<sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indices_indices.<ref refid="classtvm_1_1Array_1a24d5ac1f6730d46cb1a6d16729f0a7bb" kindref="member">push_back</ref>(iter_vars[i]);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>iter_vars[true_axis];</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1tir_1_1SelectNode_1ae0809a88c56d20faceba05184b6e793b" kindref="member">tir::SelectNode::make</ref>(indices(indices_indices)<sp/>==<sp/>idx,<sp/>on_value_cast,<sp/>off_value_cast);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/>},<sp/>name,<sp/>tag);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>topi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>TOPI_TRANSFORM_H_</highlight></codeline>
    </programlisting>
    <location file="topi/include/topi/transform.h"/>
  </compounddef>
</doxygen>
