<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1runtime_1_1vm_1_1Executable" kind="class" language="C++" prot="public">
    <compoundname>tvm::runtime::vm::Executable</compoundname>
    <basecompoundref refid="classtvm_1_1runtime_1_1ModuleNode" prot="public" virt="non-virtual">tvm::runtime::ModuleNode</basecompoundref>
    <includes refid="vm_8h" local="no">vm.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1Executable_1a0d69e974364e3f2eb643c25b77c74015" prot="public" static="no" mutable="no">
        <type><ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">runtime::Module</ref></type>
        <definition>runtime::Module tvm::runtime::vm::Executable::lib</definition>
        <argsstring></argsstring>
        <name>lib</name>
        <briefdescription>
<para>The runtime module/library that contains both the host and also the device code when executing on non-CPU devices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="568" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1Executable_1a64a56d507939eee688f485057a2c7d2e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">ObjectRef</ref> &gt;</type>
        <definition>std::vector&lt;ObjectRef&gt; tvm::runtime::vm::Executable::constants</definition>
        <argsstring></argsstring>
        <name>constants</name>
        <briefdescription>
<para>The global constant pool. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="570" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="570" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1Executable_1a9a808f0c63ae0d65ad8d625e3a7cb749" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, <ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref> &gt;</type>
        <definition>std::unordered_map&lt;std::string, Index&gt; tvm::runtime::vm::Executable::global_map</definition>
        <argsstring></argsstring>
        <name>global_map</name>
        <briefdescription>
<para>A map from globals (as strings) to their index in the function map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="572" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1Executable_1ab5a31e8670a4f20564abc48610a90e8c" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, <ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref> &gt;</type>
        <definition>std::unordered_map&lt;std::string, Index&gt; tvm::runtime::vm::Executable::primitive_map</definition>
        <argsstring></argsstring>
        <name>primitive_map</name>
        <briefdescription>
<para>A mapping from the packed function (as string) to the index that corresponds to the position of the <computeroutput>packed_funcs</computeroutput> list in a <computeroutput><ref refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine" kindref="compound">VirtualMachine</ref></computeroutput> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="576" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="576" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1Executable_1af7d75150b6a98a7766a552d7e7e34a11" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structtvm_1_1runtime_1_1vm_1_1VMFunction" kindref="compound">VMFunction</ref> &gt;</type>
        <definition>std::vector&lt;VMFunction&gt; tvm::runtime::vm::Executable::functions</definition>
        <argsstring></argsstring>
        <name>functions</name>
        <briefdescription>
<para>The virtual machine&apos;s function table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="578" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="578" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1Executable_1a4af3179909b56ca0316300e152abec10" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string tvm::runtime::vm::Executable::code_</definition>
        <argsstring></argsstring>
        <name>code_</name>
        <briefdescription>
<para>The serialized bytecode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="638" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="638" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1af052de1610aae050d4363b6625265e86" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref></type>
        <definition>PackedFunc tvm::runtime::vm::Executable::GetFunction</definition>
        <argsstring>(const std::string &amp;name, const ObjectPtr&lt; Object &gt; &amp;sptr_to_self) final</argsstring>
        <name>GetFunction</name>
        <reimplements refid="classtvm_1_1runtime_1_1ModuleNode_1af16bc90e6265eb5492b028308dbb1a25">GetFunction</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1ObjectPtr" kindref="compound">ObjectPtr</ref>&lt; <ref refid="classtvm_1_1runtime_1_1Object" kindref="compound">Object</ref> &gt; &amp;</type>
          <declname>sptr_to_self</declname>
        </param>
        <briefdescription>
<para>Get a <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> from an executable module. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sptr_to_self</parametername>
</parameternamelist>
<parameterdescription>
<para>The shared_ptr that points to this module node.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> or nullptr when it is not available. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1af949a66ffb86ea941dec43fe95f8d898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structTVMByteArray" kindref="compound">TVMByteArray</ref></type>
        <definition>TVMByteArray tvm::runtime::vm::Executable::Save</definition>
        <argsstring>()</argsstring>
        <name>Save</name>
        <briefdescription>
<para>Serialize the executable into global section, constant section, and code section. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The binary representation of the VM. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="485" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1a83307b4609d46297dfd7fd81e143ea38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tvm::runtime::vm::Executable::GetBytecode</definition>
        <argsstring>() const </argsstring>
        <name>GetBytecode</name>
        <briefdescription>
<para>Get the serialized form of the <computeroutput>functions</computeroutput>. This is essentially bytecode serialization. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The serialized vm bytecode.</para></simplesect>
<simplesect kind="note"><para>The bytecode is in the following format: func_name reg_file_size num_instructions param1 param2 ... paramM instruction1 instruction2 ... instructionN</para></simplesect>
Each instruction is printed in the following format: opcode num_fields field1 ... fieldX # The text format.</para><para>Serializing an <computeroutput><ref refid="structtvm_1_1runtime_1_1vm_1_1Instruction" kindref="compound">Instruction</ref></computeroutput> requires us to deal with the bytecode. Each line of the instructions could be serialized as the following format: hash, opcode, f1, f2, ..., fX, field with variable length<orderedlist>
<listitem><para>hash: the hash of the instruction. This number will be used to help us validate if an instruction is well-formed during deserialization.</para></listitem><listitem><para>opcode: the opcode code of the instruction.</para></listitem><listitem><para>f1, f2, ..., fX. These fields together represent the fixed fields in an instruction, e.g., <computeroutput>from</computeroutput> and <computeroutput>dst</computeroutput> fields of a <computeroutput>Move</computeroutput> instruction. For example, <computeroutput>DLDataType</computeroutput> will be unpacked into three fields (code, bits, lanes).</para></listitem><listitem><para>The rest of the line indicates the field with variable length, e.g., the shape of a tensor, the args used by an <computeroutput>InvokPacked</computeroutput> instruction, etc.</para></listitem></orderedlist>
</para><para>The field starting from # is only used for debugging. The serialized code doesn&apos;t contain it, therefore the deserializer doens&apos;t need to handle it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1a43cc6b3ccb971d2ddf39e2d969d8a43e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tvm::runtime::vm::Executable::Stats</definition>
        <argsstring>() const </argsstring>
        <name>Stats</name>
        <briefdescription>
<para>Print the detailed statistics of the given code, i.e. number of globls and constants, etc. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1ae02ad73c98dd82f842796bfaa1d018a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">runtime::Module</ref></type>
        <definition>runtime::Module tvm::runtime::vm::Executable::GetLib</definition>
        <argsstring>() const </argsstring>
        <name>GetLib</name>
        <briefdescription>
<para>Get the <computeroutput>lib</computeroutput> module in an executable. Users have the flexibility to call <computeroutput>export_library</computeroutput> from the frontend to save the library to disk. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The runtime module that contains the hardwre dependent code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="543" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="543" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1a3a970ab4d5a437c367f960824e5df685" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tvm::runtime::vm::Executable::GetFunctionArity</definition>
        <argsstring>(std::string func) const </argsstring>
        <name>GetFunctionArity</name>
        <param>
          <type>std::string</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Get the arity of the VM Fucntion. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function name. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of parameters. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="550" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1a8f438b473ed27c3fe3a1bc95fbb79b69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tvm::runtime::vm::Executable::GetFunctionParameterName</definition>
        <argsstring>(std::string func, uint32_t index) const </argsstring>
        <name>GetFunctionParameterName</name>
        <param>
          <type>std::string</type>
          <declname>func</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the parameter name given the function name and parameter index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter index. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The parameter name. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="558" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1a99432cdf9ce74de84f08feec9b08ed5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual tvm::runtime::vm::Executable::~Executable</definition>
        <argsstring>()</argsstring>
        <name>~Executable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="560" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="560" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1aef4f3663ee57fcbdf2d775f4dbbe79dc" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>const char *</type>
        <definition>const char* tvm::runtime::vm::Executable::type_key</definition>
        <argsstring>() const final</argsstring>
        <name>type_key</name>
        <reimplements refid="classtvm_1_1runtime_1_1ModuleNode_1a5834549180e1c668e7126562cea9a557">type_key</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The per module type key. </para></simplesect>
<simplesect kind="note"><para>This key is used to for serializing custom modules. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="562" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="562" bodyend="564"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1a4eeb4c5cfb8830d32d96756fd1dc58d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">runtime::Module</ref></type>
        <definition>static runtime::Module tvm::runtime::vm::Executable::Load</definition>
        <argsstring>(const std::string &amp;code, const runtime::Module lib)</argsstring>
        <name>Load</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">runtime::Module</ref></type>
          <declname>lib</declname>
        </param>
        <briefdescription>
<para>Load the saved VM executable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>The bytecode in string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lib</parametername>
</parameternamelist>
<parameterdescription>
<para>The compiled runtime library.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>exe The constructed executable. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="495" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1ad0189c5dedab983061c16a3c7070ecee" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::runtime::vm::Executable::SaveGlobalSection</definition>
        <argsstring>(dmlc::Stream *strm)</argsstring>
        <name>SaveGlobalSection</name>
        <param>
          <type>dmlc::Stream *</type>
          <declname>strm</declname>
        </param>
        <briefdescription>
<para>Save the globals. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The input stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="586" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1af2a769793d44284ed6b2f0b35e76da94" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::runtime::vm::Executable::SaveConstantSection</definition>
        <argsstring>(dmlc::Stream *strm)</argsstring>
        <name>SaveConstantSection</name>
        <param>
          <type>dmlc::Stream *</type>
          <declname>strm</declname>
        </param>
        <briefdescription>
<para>Save the constant pool. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The input stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="593" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1a5b494e9db91383046f71b474f76c188e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::runtime::vm::Executable::SavePrimitiveOpNames</definition>
        <argsstring>(dmlc::Stream *strm)</argsstring>
        <name>SavePrimitiveOpNames</name>
        <param>
          <type>dmlc::Stream *</type>
          <declname>strm</declname>
        </param>
        <briefdescription>
<para>Save primitive op names. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The input stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1a62b02296cbda9ab38fdf634fd6d392d2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::runtime::vm::Executable::SaveCodeSection</definition>
        <argsstring>(dmlc::Stream *strm)</argsstring>
        <name>SaveCodeSection</name>
        <param>
          <type>dmlc::Stream *</type>
          <declname>strm</declname>
        </param>
        <briefdescription>
<para>Save the vm functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The input stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="607" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1a3beed64d0a7fe1166b16815f38ff298d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::runtime::vm::Executable::LoadGlobalSection</definition>
        <argsstring>(dmlc::Stream *strm)</argsstring>
        <name>LoadGlobalSection</name>
        <param>
          <type>dmlc::Stream *</type>
          <declname>strm</declname>
        </param>
        <briefdescription>
<para>Load the globals. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The input stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="614" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1ab0889912c33d3e961094a7da62f24b07" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::runtime::vm::Executable::LoadConstantSection</definition>
        <argsstring>(dmlc::Stream *strm)</argsstring>
        <name>LoadConstantSection</name>
        <param>
          <type>dmlc::Stream *</type>
          <declname>strm</declname>
        </param>
        <briefdescription>
<para>Load the constant pool. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The input stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="621" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1aa3d95067219ce7af4b9d15e4a5e681ad" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::runtime::vm::Executable::LoadPrimitiveOpNames</definition>
        <argsstring>(dmlc::Stream *strm)</argsstring>
        <name>LoadPrimitiveOpNames</name>
        <param>
          <type>dmlc::Stream *</type>
          <declname>strm</declname>
        </param>
        <briefdescription>
<para>Load primitive op names. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The input stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1Executable_1aa6f0834e6460fa9bb4d1beed7e4ed5fb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::runtime::vm::Executable::LoadCodeSection</definition>
        <argsstring>(dmlc::Stream *strm)</argsstring>
        <name>LoadCodeSection</name>
        <param>
          <type>dmlc::Stream *</type>
          <declname>strm</declname>
        </param>
        <briefdescription>
<para>Load the vm functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The input stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="635" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The executable emitted by the VM compiler. </para>    </briefdescription>
    <detaileddescription>
<para>The executable contains information (e.g. data in different memory regions) to run in a virtual machine.</para><para><itemizedlist>
<listitem><para>Global section, containing all globals.</para></listitem><listitem><para>Constant section, storing the constant pool.</para></listitem><listitem><para>Primitive name section, containing the function name of the primitive ops used by the virtual machine.</para></listitem><listitem><para>Code section, handling the VM functions and bytecode. </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="4966">
        <label>tvm::runtime::Object</label>
        <link refid="classtvm_1_1runtime_1_1Object"/>
      </node>
      <node id="4964">
        <label>tvm::runtime::vm::Executable</label>
        <link refid="classtvm_1_1runtime_1_1vm_1_1Executable"/>
        <childnode refid="4965" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4965">
        <label>tvm::runtime::ModuleNode</label>
        <link refid="classtvm_1_1runtime_1_1ModuleNode"/>
        <childnode refid="4966" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4970">
        <label>tvm::runtime::Module</label>
        <link refid="classtvm_1_1runtime_1_1Module"/>
        <childnode refid="4971" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4969">
        <label>tvm::runtime::Object</label>
        <link refid="classtvm_1_1runtime_1_1Object"/>
        <childnode refid="4969" relation="usage">
          <edgelabel>#deleter_</edgelabel>
        </childnode>
      </node>
      <node id="4971">
        <label>tvm::runtime::ObjectRef</label>
        <link refid="classtvm_1_1runtime_1_1ObjectRef"/>
        <childnode refid="4972" relation="usage">
          <edgelabel>#data_</edgelabel>
        </childnode>
      </node>
      <node id="4972">
        <label>tvm::runtime::ObjectPtr&lt; tvm::runtime::Object &gt;</label>
        <link refid="classtvm_1_1runtime_1_1ObjectPtr"/>
      </node>
      <node id="4967">
        <label>tvm::runtime::vm::Executable</label>
        <link refid="classtvm_1_1runtime_1_1vm_1_1Executable"/>
        <childnode refid="4968" relation="public-inheritance">
        </childnode>
        <childnode refid="4970" relation="usage">
          <edgelabel>+lib</edgelabel>
        </childnode>
      </node>
      <node id="4968">
        <label>tvm::runtime::ModuleNode</label>
        <link refid="classtvm_1_1runtime_1_1ModuleNode"/>
        <childnode refid="4969" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tvm/runtime/vm.h" line="466" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="466" bodyend="639"/>
    <listofallmembers>
      <member refid="classtvm_1_1runtime_1_1Object_1a5fbebc47be111ecc1d5869bcc0476e21" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>_GetOrAllocRuntimeTypeIndex</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a14b234a745215da158b2386bbb34bd70" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>_type_child_slots</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a05ece7bcb6bf73e88765c1f193a489ce" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>_type_child_slots_can_overflow</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a55cb618bd4bbcd49317b35ea8e2996be" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>_type_final</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a92fe62494027b70af1f7696d611c21b6" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>_type_has_method_sequal_reduce</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ac97054694d03dc5eac58315fb569ef88" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>_type_has_method_shash_reduce</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a74e9f076b50b8b335b4a321e9b0bf03c" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>_type_has_method_visit_attrs</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1a56e23ef9427bd055c4868135cc1f38bd" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>_type_index</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1a9346e3758203ca87d500e65de0445e01" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>_type_key</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1a4af3179909b56ca0316300e152abec10" prot="private" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>code_</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1a64a56d507939eee688f485057a2c7d2e" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>constants</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a70fb5361147634605d6595bb89381f03" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>DecRef</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1af4407d2b59132e803ff791482dbe0145" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>deleter_</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a9e84841ca982bff376a978ade0132631" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>FDeleter</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1af7d75150b6a98a7766a552d7e7e34a11" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>functions</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1a83307b4609d46297dfd7fd81e143ea38" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>GetBytecode</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1aa2820340181ff4a9eaa149f89ac706ec" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>GetFuncFromEnv</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1af052de1610aae050d4363b6625265e86" prot="public" virt="virtual"><scope>tvm::runtime::vm::Executable</scope><name>GetFunction</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1abd6d000714e0ed2b3b2f435ea5bd9a43" prot="public" virt="non-virtual" ambiguityscope="tvm::runtime::ModuleNode::"><scope>tvm::runtime::vm::Executable</scope><name>GetFunction</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1a3a970ab4d5a437c367f960824e5df685" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>GetFunctionArity</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1a8f438b473ed27c3fe3a1bc95fbb79b69" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>GetFunctionParameterName</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1ae02ad73c98dd82f842796bfaa1d018a4" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>GetLib</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a726972ff315c446192df94027ddea032" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>GetOrAllocRuntimeTypeIndex</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1a73ac521892f4263554116261303e7e44" prot="public" virt="virtual"><scope>tvm::runtime::vm::Executable</scope><name>GetSource</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a9581610ea91e0e38f57edc82e264a1b0" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>GetTypeKey</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ac9a7d8d3d562803c9cf91271c462b61d" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>GetTypeKeyHash</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1a9a808f0c63ae0d65ad8d625e3a7cb749" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>global_map</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1a79b98521b484d1c672b7ce2ae2aed2b5" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>Import</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1abb10abf603900cbd0bfd51eeb44eb949" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>imports</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1af05db5c6d76f9b4dbf0631815170c5a7" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>imports_</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ac9e5eed7719e322117bde996a171e33a" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>IncRef</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1af1359ebff2c328ff0bb80083937c95dd" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>IsInstance</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1a0d69e974364e3f2eb643c25b77c74015" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>lib</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1a4eeb4c5cfb8830d32d96756fd1dc58d0" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>Load</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1aa6f0834e6460fa9bb4d1beed7e4ed5fb" prot="private" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>LoadCodeSection</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1ab0889912c33d3e961094a7da62f24b07" prot="private" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>LoadConstantSection</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1a3beed64d0a7fe1166b16815f38ff298d" prot="private" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>LoadGlobalSection</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1aa3d95067219ce7af4b9d15e4a5e681ad" prot="private" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>LoadPrimitiveOpNames</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a133436a9ec5c4a768b94102bf95a660b" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>Object</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ab7968feb6ad38ecaffc320e13819d826" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>Object</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1aa1612f69ea5b4225d4cda759cd517323" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>Object</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a69c32fbd96181f5c21d2c878ab285e4f" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>operator=</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ae341e561272ff43cdcbc927bc29ac50d" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>operator=</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1ab5a31e8670a4f20564abc48610a90e8c" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>primitive_map</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a0d492efee331e2239a093f4b2017c10f" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>ref_counter_</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a55549a6c23987890246248682560a03d" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>RefCounterType</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ad94d79729ac85aa7c976e23d39066383" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>RuntimeTypeIndex</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1af949a66ffb86ea941dec43fe95f8d898" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>Save</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1a62b02296cbda9ab38fdf634fd6d392d2" prot="private" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>SaveCodeSection</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1af2a769793d44284ed6b2f0b35e76da94" prot="private" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>SaveConstantSection</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1ad0189c5dedab983061c16a3c7070ecee" prot="private" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>SaveGlobalSection</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1a5b494e9db91383046f71b474f76c188e" prot="private" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>SavePrimitiveOpNames</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1acd613ea7faf2fc100d1e8b0fd80020c3" prot="public" virt="virtual"><scope>tvm::runtime::vm::Executable</scope><name>SaveToBinary</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1ad06785ce4a9daf8602748f1b9cff5b90" prot="public" virt="virtual"><scope>tvm::runtime::vm::Executable</scope><name>SaveToFile</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1a43cc6b3ccb971d2ddf39e2d969d8a43e" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>Stats</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1ac44750d06e11a275b10072b982ef4b13" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>TVM_DECLARE_FINAL_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a594c0d786dbc567ff6774ab11b45958a" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>type_index</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a4bfc2586cb55f2af47728187b3256255" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>type_index_</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1aef4f3663ee57fcbdf2d775f4dbbe79dc" prot="public" virt="virtual"><scope>tvm::runtime::vm::Executable</scope><name>type_key</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a817ba6c23b7ee1821c48a75edf255a30" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>TypeIndex2Key</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a6ee32a02dd44257da105fbbe5d9c8622" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>TypeIndex2KeyHash</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a6841f97e06e6614dd7e82c6dd41b818a" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::Executable</scope><name>TypeKey2Index</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1Executable_1a99432cdf9ce74de84f08feec9b08ed5e" prot="public" virt="virtual"><scope>tvm::runtime::vm::Executable</scope><name>~Executable</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1add6c8e6967c6906ea5346b2ccd30afb4" prot="public" virt="virtual"><scope>tvm::runtime::vm::Executable</scope><name>~ModuleNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
