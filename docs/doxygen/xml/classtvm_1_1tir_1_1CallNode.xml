<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1tir_1_1CallNode" kind="class" language="C++" prot="public">
    <compoundname>tvm::tir::CallNode</compoundname>
    <basecompoundref refid="classtvm_1_1PrimExprNode" prot="public" virt="non-virtual">tvm::PrimExprNode</basecompoundref>
    <includes refid="tir_2expr_8h" local="no">expr.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97a" prot="public" static="no">
        <name>CallType</name>
        <enumvalue id="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97aab7045868cb47d7cb16471faab2a04af4" prot="public">
          <name>Extern</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Extern &quot;C&quot; function. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97aae9b7420c5efa76da58ce83ea64c47a5d" prot="public">
          <name>ExternCPlusPlus</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Extern CXX function. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97aa28d0e2a1d6e2553b9c0c70151efb9927" prot="public">
          <name>PureExtern</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Extern &quot;C&quot; without side-effect. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97aa57993161c871dc15a052154594845514" prot="public">
          <name>Halide</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Halide-style call, evaluates func(args). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97aa53257cce64e712a51504dc56287f9bce" prot="public">
          <name>Intrinsic</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>Intrinsic functions. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97aa2403c0f0c0f7bef7f60d06918d8d39ac" prot="public">
          <name>PureIntrinsic</name>
          <initializer>= 5</initializer>
          <briefdescription>
<para>Intrinsic functions that are pure. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible types of calls. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="937" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="937" bodyend="950"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1a3bd9e0b7cdea76a46815d6c175f682e0" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string tvm::tir::CallNode::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>The name of the function/intrinsic. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="952" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="952" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1a7ca077747fdb2bcb63ca1cac4a49017f" prot="public" static="no" mutable="no">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt;</type>
        <definition>Array&lt;PrimExpr&gt; tvm::tir::CallNode::args</definition>
        <argsstring></argsstring>
        <name>args</name>
        <briefdescription>
<para>The arguments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="954" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="954" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1aa0fadf83d2540a578ffbc6a673a94fb5" prot="public" static="no" mutable="no">
        <type><ref refid="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97a" kindref="member">CallType</ref></type>
        <definition>CallType tvm::tir::CallNode::call_type</definition>
        <argsstring></argsstring>
        <name>call_type</name>
        <briefdescription>
<para><ref refid="classtvm_1_1Type" kindref="compound">Type</ref> of calls. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="956" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="956" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1afbdbda11e2bc1c47c3bcbaed9a9983e4" prot="public" static="no" mutable="no">
        <type><ref refid="classtvm_1_1tir_1_1FunctionRef" kindref="compound">FunctionRef</ref></type>
        <definition>FunctionRef tvm::tir::CallNode::func</definition>
        <argsstring></argsstring>
        <name>func</name>
        <briefdescription>
<para>The function to be called. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="958" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="958" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1a399d6e07f8a5b8a9b15b8596fb548205" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int tvm::tir::CallNode::value_index</definition>
        <argsstring></argsstring>
        <name>value_index</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>The output value index if func&apos;s value is a tuple. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="960" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="960" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1a7b4d801def85ed1955a018cfb655a434" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::CallNode::_type_key</definition>
        <argsstring></argsstring>
        <name>_type_key</name>
        <initializer>= &quot;Call&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1018" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1018" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1afd029e12c4b28b7d6fea4a8bf27c6e50" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::CallNode::reinterpret</definition>
        <argsstring></argsstring>
        <name>reinterpret</name>
        <initializer>= &quot;reinterpret&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1022" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1022" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1a45ce5bd93c09588f4961bf0683f8ec17" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::CallNode::bitwise_and</definition>
        <argsstring></argsstring>
        <name>bitwise_and</name>
        <initializer>= &quot;bitwise_and&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1023" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1023" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1a0a1a5c29a08482fe66ff955f35bde07b" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::CallNode::bitwise_not</definition>
        <argsstring></argsstring>
        <name>bitwise_not</name>
        <initializer>= &quot;bitwise_not&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1024" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1024" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1a615ddb84f79dfdf60b2bebba0e9c98fe" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::CallNode::bitwise_xor</definition>
        <argsstring></argsstring>
        <name>bitwise_xor</name>
        <initializer>= &quot;bitwise_xor&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1025" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1025" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1abba6095e415d3cfd5006406c0f68758e" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::CallNode::bitwise_or</definition>
        <argsstring></argsstring>
        <name>bitwise_or</name>
        <initializer>= &quot;bitwise_or&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1026" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1026" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1a1a0078e5ee30ba236b8634e9aed8db24" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::CallNode::shift_left</definition>
        <argsstring></argsstring>
        <name>shift_left</name>
        <initializer>= &quot;shift_left&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1027" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1027" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1a4e768da713db6bcff8d7e6f51e4468e4" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::CallNode::shift_right</definition>
        <argsstring></argsstring>
        <name>shift_right</name>
        <initializer>= &quot;shift_right&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1028" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1028" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1a2fbfd414c61e8d2cf749882789625f16" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::CallNode::popcount</definition>
        <argsstring></argsstring>
        <name>popcount</name>
        <initializer>= &quot;popcount&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1029" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1029" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1aa5557c1a8bf82ab81b5e916670583ba3" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::CallNode::likely</definition>
        <argsstring></argsstring>
        <name>likely</name>
        <initializer>= &quot;likely&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1030" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1030" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1adaa0f8782aaa0affe1b98e4353811149" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::CallNode::glsl_texture_store</definition>
        <argsstring></argsstring>
        <name>glsl_texture_store</name>
        <initializer>= &quot;glsl_texture_store&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1031" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1031" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1a747a64efc4f4a67067486f047de1c51a" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::CallNode::prefetch</definition>
        <argsstring></argsstring>
        <name>prefetch</name>
        <initializer>= &quot;prefetch&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1032" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1032" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1af9579b5cc850ea3d2b5d0e5cd88c4c9a" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::CallNode::isnan</definition>
        <argsstring></argsstring>
        <name>isnan</name>
        <initializer>= &quot;isnan&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1033" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1033" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1ababe5c5ec515672f90018263dd186cd1" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::CallNode::isfinite</definition>
        <argsstring></argsstring>
        <name>isfinite</name>
        <initializer>= &quot;isfinite&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1034" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1034" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1ac302718e33b936c727233696982cc52d" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::tir::CallNode::isinf</definition>
        <argsstring></argsstring>
        <name>isinf</name>
        <initializer>= &quot;isinf&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1035" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1035" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1tir_1_1CallNode_1a33a7c5928493a7206f3efc0e43c7fc88" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* tvm::tir::CallNode::vectorizable_intrinsics[]</definition>
        <argsstring>[]</argsstring>
        <name>vectorizable_intrinsics</name>
        <briefdescription>
<para>Vectorizable intrinsic list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1038" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1038" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1tir_1_1CallNode_1ab16f6a3e97ab7e8ec0d2e906fd5a2f71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::CallNode::VisitAttrs</definition>
        <argsstring>(AttrVisitor *v)</argsstring>
        <name>VisitAttrs</name>
        <param>
          <type><ref refid="classtvm_1_1AttrVisitor" kindref="compound">AttrVisitor</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="962" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="962" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1CallNode_1a4e631c0b21801e30d92d23a1c3de23bc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::tir::CallNode::SEqualReduce</definition>
        <argsstring>(const CallNode *other, SEqualReducer equal) const </argsstring>
        <name>SEqualReduce</name>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1CallNode" kindref="compound">CallNode</ref> *</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1SEqualReducer" kindref="compound">SEqualReducer</ref></type>
          <declname>equal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="971" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="971" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1CallNode_1a0e9eb68c0dc275f789e4794b582ad13f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::tir::CallNode::SHashReduce</definition>
        <argsstring>(SHashReducer hash_reduce) const </argsstring>
        <name>SHashReduce</name>
        <param>
          <type><ref refid="classtvm_1_1SHashReducer" kindref="compound">SHashReducer</ref></type>
          <declname>hash_reduce</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="981" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="981" bodyend="988"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1CallNode_1a2399dd87487b9bbbd6f56cdfd88b15a7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::tir::CallNode::is_pure</definition>
        <argsstring>() const </argsstring>
        <name>is_pure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether call node is pure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="998" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="998" bodyend="1002"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1CallNode_1ab3854cf20af3de0b892f2255ee734239" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::tir::CallNode::is_intrinsic</definition>
        <argsstring>(const char *intrin_name) const </argsstring>
        <name>is_intrinsic</name>
        <param>
          <type>const char *</type>
          <declname>intrin_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether call node corresponds to a defined intrinsic. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>intrin_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the intrinsic. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1008" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="1008" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1CallNode_1ac99b7e0c7a43bbc8ba9fbc341ec91f99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::tir::CallNode::is_vectorizable</definition>
        <argsstring>() const </argsstring>
        <name>is_vectorizable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether call node can be vectorized. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1016" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1tir_1_1CallNode_1a7fc7aec73f8c704f165d3026fa732e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tvm::tir::CallNode::TVM_DECLARE_FINAL_OBJECT_INFO</definition>
        <argsstring>(CallNode, PrimExprNode)</argsstring>
        <name>TVM_DECLARE_FINAL_OBJECT_INFO</name>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1CallNode" kindref="compound">CallNode</ref></type>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExprNode" kindref="compound">PrimExprNode</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="1019" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtvm_1_1tir_1_1CallNode_1ab08f0f3e992f1adea539deac89f63ada" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>static PrimExpr tvm::tir::CallNode::make</definition>
        <argsstring>(DataType dtype, std::string name, Array&lt; PrimExpr &gt; args, CallType call_type, FunctionRef func=FunctionRef(), int value_index=0)</argsstring>
        <name>make</name>
        <param>
          <type><ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref></type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt;</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97a" kindref="member">CallType</ref></type>
          <declname>call_type</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1FunctionRef" kindref="compound">FunctionRef</ref></type>
          <declname>func</declname>
          <defval><ref refid="classtvm_1_1tir_1_1FunctionRef" kindref="compound">FunctionRef</ref>()</defval>
        </param>
        <param>
          <type>int</type>
          <declname>value_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/tir/expr.h" line="990" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Call node. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4517">
        <label>tvm::BaseExprNode</label>
        <link refid="classtvm_1_1BaseExprNode"/>
        <childnode refid="4518" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4515">
        <label>tvm::tir::CallNode</label>
        <link refid="classtvm_1_1tir_1_1CallNode"/>
        <childnode refid="4516" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4518">
        <label>Object</label>
      </node>
      <node id="4516">
        <label>tvm::PrimExprNode</label>
        <link refid="classtvm_1_1PrimExprNode"/>
        <childnode refid="4517" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4525">
        <label>ObjectRef</label>
      </node>
      <node id="4524">
        <label>tvm::tir::FunctionRef</label>
        <link refid="classtvm_1_1tir_1_1FunctionRef"/>
        <childnode refid="4525" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4521">
        <label>tvm::BaseExprNode</label>
        <link refid="classtvm_1_1BaseExprNode"/>
        <childnode refid="4522" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4519">
        <label>tvm::tir::CallNode</label>
        <link refid="classtvm_1_1tir_1_1CallNode"/>
        <childnode refid="4520" relation="public-inheritance">
        </childnode>
        <childnode refid="4524" relation="usage">
          <edgelabel>+func</edgelabel>
        </childnode>
        <childnode refid="4526" relation="usage">
          <edgelabel>+args</edgelabel>
        </childnode>
      </node>
      <node id="4522">
        <label>Object</label>
      </node>
      <node id="4523">
        <label>tvm::runtime::DataType</label>
        <link refid="classtvm_1_1runtime_1_1DataType"/>
      </node>
      <node id="4520">
        <label>tvm::PrimExprNode</label>
        <link refid="classtvm_1_1PrimExprNode"/>
        <childnode refid="4521" relation="public-inheritance">
        </childnode>
        <childnode refid="4523" relation="usage">
          <edgelabel>+dtype</edgelabel>
        </childnode>
      </node>
      <node id="4526">
        <label>tvm::Array&lt; tvm::PrimExpr &gt;</label>
        <link refid="classtvm_1_1Array"/>
        <childnode refid="4525" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tvm/tir/expr.h" line="934" column="1" bodyfile="include/tvm/tir/expr.h" bodystart="934" bodyend="1039"/>
    <listofallmembers>
      <member refid="classtvm_1_1BaseExprNode_1a905dcf65204e877b6ccb977cf375f2a0" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>_type_has_method_sequal_reduce</name></member>
      <member refid="classtvm_1_1BaseExprNode_1a13d7d1f1e6f790951caf200cd59c3620" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>_type_has_method_shash_reduce</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a7b4d801def85ed1955a018cfb655a434" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>_type_key</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a7ca077747fdb2bcb63ca1cac4a49017f" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>args</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a45ce5bd93c09588f4961bf0683f8ec17" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>bitwise_and</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a0a1a5c29a08482fe66ff955f35bde07b" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>bitwise_not</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1abba6095e415d3cfd5006406c0f68758e" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>bitwise_or</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a615ddb84f79dfdf60b2bebba0e9c98fe" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>bitwise_xor</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1aa0fadf83d2540a578ffbc6a673a94fb5" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>call_type</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97a" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>CallType</name></member>
      <member refid="classtvm_1_1PrimExprNode_1a95af9234514ec5f11355db41524be7f9" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>dtype</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97aab7045868cb47d7cb16471faab2a04af4" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>Extern</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97aae9b7420c5efa76da58ce83ea64c47a5d" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>ExternCPlusPlus</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1afbdbda11e2bc1c47c3bcbaed9a9983e4" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>func</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1adaa0f8782aaa0affe1b98e4353811149" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>glsl_texture_store</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97aa57993161c871dc15a052154594845514" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>Halide</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97aa53257cce64e712a51504dc56287f9bce" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>Intrinsic</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1ab3854cf20af3de0b892f2255ee734239" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>is_intrinsic</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a2399dd87487b9bbbd6f56cdfd88b15a7" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>is_pure</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1ac99b7e0c7a43bbc8ba9fbc341ec91f99" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>is_vectorizable</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1ababe5c5ec515672f90018263dd186cd1" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>isfinite</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1ac302718e33b936c727233696982cc52d" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>isinf</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1af9579b5cc850ea3d2b5d0e5cd88c4c9a" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>isnan</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1aa5557c1a8bf82ab81b5e916670583ba3" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>likely</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1ab08f0f3e992f1adea539deac89f63ada" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>make</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a3bd9e0b7cdea76a46815d6c175f682e0" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>name</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a2fbfd414c61e8d2cf749882789625f16" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>popcount</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a747a64efc4f4a67067486f047de1c51a" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>prefetch</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97aa28d0e2a1d6e2553b9c0c70151efb9927" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>PureExtern</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a13e1f0f48f488fd085ca2684738fa97aa2403c0f0c0f7bef7f60d06918d8d39ac" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>PureIntrinsic</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1afd029e12c4b28b7d6fea4a8bf27c6e50" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>reinterpret</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a4e631c0b21801e30d92d23a1c3de23bc" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>SEqualReduce</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a0e9eb68c0dc275f789e4794b582ad13f" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>SHashReduce</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a1a0078e5ee30ba236b8634e9aed8db24" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>shift_left</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a4e768da713db6bcff8d7e6f51e4468e4" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>shift_right</name></member>
      <member refid="classtvm_1_1PrimExprNode_1afcf4654378d65e0200b33e43194d0490" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>TVM_DECLARE_BASE_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1BaseExprNode_1a831794c879d47c30cdd9cefd4f05d533" prot="public" virt="non-virtual" ambiguityscope="tvm::BaseExprNode::"><scope>tvm::tir::CallNode</scope><name>TVM_DECLARE_BASE_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a7fc7aec73f8c704f165d3026fa732e07" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>TVM_DECLARE_FINAL_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a399d6e07f8a5b8a9b15b8596fb548205" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>value_index</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1a33a7c5928493a7206f3efc0e43c7fc88" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>vectorizable_intrinsics</name></member>
      <member refid="classtvm_1_1tir_1_1CallNode_1ab16f6a3e97ab7e8ec0d2e906fd5a2f71" prot="public" virt="non-virtual"><scope>tvm::tir::CallNode</scope><name>VisitAttrs</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
