<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespacetvm_1_1target" kind="namespace" language="C++">
    <compoundname>tvm::target</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacetvm_1_1target_1a8d851f48166f0f7ccf3c709e6271cb7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1Target" kindref="compound">Target</ref></type>
        <definition>Target tvm::target::llvm</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;options=std::vector&lt; std::string &gt;())</argsstring>
        <name>llvm</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>options</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A target for LLVM </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/target.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1target_1ae035a32c24d135c0ba65303bdbd87416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1Target" kindref="compound">Target</ref></type>
        <definition>Target tvm::target::cuda</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;options=std::vector&lt; std::string &gt;())</argsstring>
        <name>cuda</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>options</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A target for CUDA </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/target.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1target_1afd36efca8e3ce77399559195d9e79a4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1Target" kindref="compound">Target</ref></type>
        <definition>Target tvm::target::rocm</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;options=std::vector&lt; std::string &gt;())</argsstring>
        <name>rocm</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>options</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A target for ROCm </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/target.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1target_1a34d788fb3230e4631e0a90430063c5d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1Target" kindref="compound">Target</ref></type>
        <definition>Target tvm::target::opencl</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;options=std::vector&lt; std::string &gt;())</argsstring>
        <name>opencl</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>options</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A target for OpenCL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/target.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1target_1a95b77120d71f2fde84f95f9d01252834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1Target" kindref="compound">Target</ref></type>
        <definition>Target tvm::target::metal</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;options=std::vector&lt; std::string &gt;())</argsstring>
        <name>metal</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>options</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A target for Metal </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/target.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1target_1a020e427a235a2cc54c1c997a5567e595" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1Target" kindref="compound">Target</ref></type>
        <definition>Target tvm::target::rasp</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;options=std::vector&lt; std::string &gt;())</argsstring>
        <name>rasp</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>options</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A target for rasp </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/target.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1target_1ae53344656c8a18717e2b75823a4e7308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1Target" kindref="compound">Target</ref></type>
        <definition>Target tvm::target::mali</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;options=std::vector&lt; std::string &gt;())</argsstring>
        <name>mali</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>options</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A target for Mali </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/target.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1target_1aaa091303c33c4a354097be9ac7e2e4f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1Target" kindref="compound">Target</ref></type>
        <definition>Target tvm::target::intel_graphics</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;options=std::vector&lt; std::string &gt;())</argsstring>
        <name>intel_graphics</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>options</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A target for Intel Graphics </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/target.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1target_1a786980129073f38d1f1355f92da2b8da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1Target" kindref="compound">Target</ref></type>
        <definition>Target tvm::target::stackvm</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;options=std::vector&lt; std::string &gt;())</argsstring>
        <name>stackvm</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>options</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A target for stackvm </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/target.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1target_1a1fece6d42e0638ab5cd4b6c364c47984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1Target" kindref="compound">Target</ref></type>
        <definition>Target tvm::target::ext_dev</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;options=std::vector&lt; std::string &gt;())</argsstring>
        <name>ext_dev</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>options</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A target for external device </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/target.h" line="178" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This namespace provides functions to construct <ref refid="classtvm_1_1Target" kindref="compound">Target</ref> instances. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/tvm/target/target.h" line="139" column="1"/>
  </compounddef>
</doxygen>
