<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1TypeReporterNode" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>tvm::TypeReporterNode</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Object</basecompoundref>
    <includes refid="type__relation_8h" local="no">type_relation.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classtvm_1_1TypeReporterNode_1a853b7e3e33f77af4d95860e161495ce3" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::TypeReporterNode::_type_key</definition>
        <argsstring></argsstring>
        <name>_type_key</name>
        <initializer>= &quot;TypeReporter&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_relation.h" line="133" column="1" bodyfile="include/tvm/ir/type_relation.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1TypeReporterNode_1a27933fa9205a2e6f46ae82b6dbe98e50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual tvm::TypeReporterNode::~TypeReporterNode</definition>
        <argsstring>()</argsstring>
        <name>~TypeReporterNode</name>
        <briefdescription>
<para>virtual destructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_relation.h" line="91" column="1" bodyfile="include/tvm/ir/type_relation.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeReporterNode_1aa974c8cddd300c1345f91f91da837087" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void tvm::TypeReporterNode::Assign</definition>
        <argsstring>(const Type &amp;dst, const Type &amp;src)=0</argsstring>
        <name>Assign</name>
        <param>
          <type>const <ref refid="classtvm_1_1Type" kindref="compound">Type</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Type" kindref="compound">Type</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Create a type equality constraint. </para>        </briefdescription>
        <detaileddescription>
<para>The &quot;assign direction&quot; acts as a hint to the solver showing that it is more likely to resolve dst by src. But it is possible for the solver to resolve src by dst as well. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_relation.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeReporterNode_1a45f573e694c0d74b655564d8250e99be" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool tvm::TypeReporterNode::Assert</definition>
        <argsstring>(const PrimExpr &amp;cond)=0</argsstring>
        <name>Assert</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>assert shape expression comparison. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use assert only if any of the condition input is symbolic. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition of operation. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if assertation can be proven to have failed true if solver can still proceed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_relation.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeReporterNode_1aeea573240a4b4a3c73f63724ea1120aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool tvm::TypeReporterNode::AssertEQ</definition>
        <argsstring>(const PrimExpr &amp;lhs, const PrimExpr &amp;rhs)=0</argsstring>
        <name>AssertEQ</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>assert shape expression equals each other. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The left operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The right operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if assertation can be proven to have failed true if solver can still proceed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_relation.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeReporterNode_1a413a90b6800010533a99118e22108217" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void tvm::TypeReporterNode::SetLocation</definition>
        <argsstring>(const ObjectRef &amp;ref)=0</argsstring>
        <name>SetLocation</name>
        <param>
          <type>const ObjectRef &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>Set the location at which to report unification errors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The program node to report the error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_relation.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeReporterNode_1aff8186cce55fcfd0823b7b135b7db1e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classtvm_1_1IRModule" kindref="compound">IRModule</ref></type>
        <definition>virtual IRModule tvm::TypeReporterNode::GetModule</definition>
        <argsstring>()=0</argsstring>
        <name>GetModule</name>
        <briefdescription>
<para>Retrieve the current global module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The global module. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_relation.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeReporterNode_1a198f1301787886f56d5719ee4b070ade" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::TypeReporterNode::VisitAttrs</definition>
        <argsstring>(AttrVisitor *v)</argsstring>
        <name>VisitAttrs</name>
        <param>
          <type><ref refid="classtvm_1_1AttrVisitor" kindref="compound">AttrVisitor</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_relation.h" line="131" column="1" bodyfile="include/tvm/ir/type_relation.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeReporterNode_1aefb026f4302f5fafad0410c2db2178c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tvm::TypeReporterNode::TVM_DECLARE_FINAL_OBJECT_INFO</definition>
        <argsstring>(TypeReporterNode, Object)</argsstring>
        <name>TVM_DECLARE_FINAL_OBJECT_INFO</name>
        <param>
          <type><ref refid="classtvm_1_1TypeReporterNode" kindref="compound">TypeReporterNode</ref></type>
        </param>
        <param>
          <type>Object</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_relation.h" line="134" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>reporter that reports back to the type resolution information. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="7485">
        <label>tvm::TypeReporterNode</label>
        <link refid="classtvm_1_1TypeReporterNode"/>
        <childnode refid="7486" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7486">
        <label>Object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7487">
        <label>tvm::TypeReporterNode</label>
        <link refid="classtvm_1_1TypeReporterNode"/>
        <childnode refid="7488" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7488">
        <label>Object</label>
      </node>
    </collaborationgraph>
    <location file="include/tvm/ir/type_relation.h" line="88" column="1" bodyfile="include/tvm/ir/type_relation.h" bodystart="88" bodyend="135"/>
    <listofallmembers>
      <member refid="classtvm_1_1TypeReporterNode_1a853b7e3e33f77af4d95860e161495ce3" prot="public" virt="non-virtual"><scope>tvm::TypeReporterNode</scope><name>_type_key</name></member>
      <member refid="classtvm_1_1TypeReporterNode_1a45f573e694c0d74b655564d8250e99be" prot="public" virt="pure-virtual"><scope>tvm::TypeReporterNode</scope><name>Assert</name></member>
      <member refid="classtvm_1_1TypeReporterNode_1aeea573240a4b4a3c73f63724ea1120aa" prot="public" virt="pure-virtual"><scope>tvm::TypeReporterNode</scope><name>AssertEQ</name></member>
      <member refid="classtvm_1_1TypeReporterNode_1aa974c8cddd300c1345f91f91da837087" prot="public" virt="pure-virtual"><scope>tvm::TypeReporterNode</scope><name>Assign</name></member>
      <member refid="classtvm_1_1TypeReporterNode_1aff8186cce55fcfd0823b7b135b7db1e8" prot="public" virt="pure-virtual"><scope>tvm::TypeReporterNode</scope><name>GetModule</name></member>
      <member refid="classtvm_1_1TypeReporterNode_1a413a90b6800010533a99118e22108217" prot="public" virt="pure-virtual"><scope>tvm::TypeReporterNode</scope><name>SetLocation</name></member>
      <member refid="classtvm_1_1TypeReporterNode_1aefb026f4302f5fafad0410c2db2178c3" prot="public" virt="non-virtual"><scope>tvm::TypeReporterNode</scope><name>TVM_DECLARE_FINAL_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1TypeReporterNode_1a198f1301787886f56d5719ee4b070ade" prot="public" virt="non-virtual"><scope>tvm::TypeReporterNode</scope><name>VisitAttrs</name></member>
      <member refid="classtvm_1_1TypeReporterNode_1a27933fa9205a2e6f46ae82b6dbe98e50" prot="public" virt="virtual"><scope>tvm::TypeReporterNode</scope><name>~TypeReporterNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
