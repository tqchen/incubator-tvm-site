<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine" kind="class" language="C++" prot="public">
    <compoundname>tvm::runtime::vm::VirtualMachine</compoundname>
    <basecompoundref refid="classtvm_1_1runtime_1_1ModuleNode" prot="public" virt="non-virtual">tvm::runtime::ModuleNode</basecompoundref>
    <includes refid="vm_8h" local="no">vm.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1ae2e5377a5dbf7335ed8989512457a2f5" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> &gt;</type>
        <definition>std::vector&lt;PackedFunc&gt; tvm::runtime::vm::VirtualMachine::packed_funcs_</definition>
        <argsstring></argsstring>
        <name>packed_funcs_</name>
        <briefdescription>
<para>The virtual machine&apos;s packed function table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="690" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="690" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a4a268dec17fdd0942fe7dce78974783f" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structtvm_1_1runtime_1_1vm_1_1VMFrame" kindref="compound">VMFrame</ref> &gt;</type>
        <definition>std::vector&lt;VMFrame&gt; tvm::runtime::vm::VirtualMachine::frames_</definition>
        <argsstring></argsstring>
        <name>frames_</name>
        <briefdescription>
<para>The current stack of call frames. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="692" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="692" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1af9d51023b5d6451dac20d1a146ce5d38" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref></type>
        <definition>Index tvm::runtime::vm::VirtualMachine::func_index_</definition>
        <argsstring></argsstring>
        <name>func_index_</name>
        <briefdescription>
<para>The fuction table index of the current function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="694" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="694" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1ab220bfa34c9abb2935c3b622d9bc03b2" prot="protected" static="no" mutable="no">
        <type>const <ref refid="structtvm_1_1runtime_1_1vm_1_1Instruction" kindref="compound">Instruction</ref> *</type>
        <definition>const Instruction* tvm::runtime::vm::VirtualMachine::code_</definition>
        <argsstring></argsstring>
        <name>code_</name>
        <briefdescription>
<para>The current pointer to the code section. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="696" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="696" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a583f4afb3292882df571a4fdf3cbf947" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref></type>
        <definition>Index tvm::runtime::vm::VirtualMachine::pc_</definition>
        <argsstring></argsstring>
        <name>pc_</name>
        <briefdescription>
<para>The virtual machine PC. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="698" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1afd0505002da7e7f86f82b2f3325ff127" prot="protected" static="no" mutable="no">
        <type><ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">ObjectRef</ref></type>
        <definition>ObjectRef tvm::runtime::vm::VirtualMachine::return_register_</definition>
        <argsstring></argsstring>
        <name>return_register_</name>
        <briefdescription>
<para>The special return register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="700" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1ad478992798013d0e3a72d220003c8881" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classtvm_1_1runtime_1_1vm_1_1Executable" kindref="compound">Executable</ref> *</type>
        <definition>const Executable* tvm::runtime::vm::VirtualMachine::exec_</definition>
        <argsstring></argsstring>
        <name>exec_</name>
        <briefdescription>
<para>The executable the VM will operate on. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="702" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="702" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a7d46e436c01133647cd303719752f456" prot="protected" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, std::vector&lt; <ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">ObjectRef</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;std::string, std::vector&lt;ObjectRef&gt; &gt; tvm::runtime::vm::VirtualMachine::inputs_</definition>
        <argsstring></argsstring>
        <name>inputs_</name>
        <briefdescription>
<para>The function name to inputs mapping. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="704" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="704" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1ae52ecf76ef854f8288ca2baa8f9d01ed" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="c__runtime__api_8h_1a9363bb701f16ce5bbb381f2a013d25b4" kindref="member">TVMContext</ref> &gt;</type>
        <definition>std::vector&lt;TVMContext&gt; tvm::runtime::vm::VirtualMachine::ctxs_</definition>
        <argsstring></argsstring>
        <name>ctxs_</name>
        <briefdescription>
<para>The set of TVM contexts the VM is currently executing on. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="706" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="706" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a50557c8e0398599341c1a8539c528860" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">ObjectRef</ref> &gt;</type>
        <definition>std::vector&lt;ObjectRef&gt; tvm::runtime::vm::VirtualMachine::const_pool_</definition>
        <argsstring></argsstring>
        <name>const_pool_</name>
        <briefdescription>
<para>The constant pool for runtime. It caches the device dependent object to avoid rellocation of constants during inference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="796" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="796" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a8d1e7cdc6412eae8dea9c2c08c7f48ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref></type>
        <definition>virtual PackedFunc tvm::runtime::vm::VirtualMachine::GetFunction</definition>
        <argsstring>(const std::string &amp;name, const ObjectPtr&lt; Object &gt; &amp;sptr_to_self)</argsstring>
        <name>GetFunction</name>
        <reimplements refid="classtvm_1_1runtime_1_1ModuleNode_1af16bc90e6265eb5492b028308dbb1a25">GetFunction</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1ObjectPtr" kindref="compound">ObjectPtr</ref>&lt; <ref refid="classtvm_1_1runtime_1_1Object" kindref="compound">Object</ref> &gt; &amp;</type>
          <declname>sptr_to_self</declname>
        </param>
        <briefdescription>
<para>Get a <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> from module. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> may not be fully initialized, there might still be first time running overhead when executing the function on certain devices. For benchmarking, use prepare to eliminate</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sptr_to_self</parametername>
</parameternamelist>
<parameterdescription>
<para>The shared_ptr that points to this module node.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PackedFunc(nullptr) when it is not available.</para></simplesect>
<simplesect kind="note"><para>The function will always remain valid. If the function needs resource from the module(e.g. late linking), it should capture sptr_to_self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="671" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a62dead74c40c1a6ac03aec56918d98c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual tvm::runtime::vm::VirtualMachine::~VirtualMachine</definition>
        <argsstring>()</argsstring>
        <name>~VirtualMachine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="674" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="674" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a00f035566a720dbac56f5dea042fb0ec" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>const char *</type>
        <definition>const char* tvm::runtime::vm::VirtualMachine::type_key</definition>
        <argsstring>() const final</argsstring>
        <name>type_key</name>
        <reimplements refid="classtvm_1_1runtime_1_1ModuleNode_1a5834549180e1c668e7126562cea9a557">type_key</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The per module type key. </para></simplesect>
<simplesect kind="note"><para>This key is used to for serializing custom modules. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="676" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="676" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a6edbbbb71000617f644232de37d53338" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::runtime::vm::VirtualMachine::VirtualMachine</definition>
        <argsstring>()</argsstring>
        <name>VirtualMachine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="680" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="680" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1aae578b4bd354bdd1ab12e91a65ec6fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void tvm::runtime::vm::VirtualMachine::LoadExecutable</definition>
        <argsstring>(const Executable *exec)</argsstring>
        <name>LoadExecutable</name>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1vm_1_1Executable" kindref="compound">Executable</ref> *</type>
          <declname>exec</declname>
        </param>
        <briefdescription>
<para>load the executable for the virtual machine. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>The executable. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="686" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a05f2bc216da23c035522d5dde356a920" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::runtime::vm::VirtualMachine::PushFrame</definition>
        <argsstring>(Index arg_count, Index ret_pc, const VMFunction &amp;vm_func)</argsstring>
        <name>PushFrame</name>
        <param>
          <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref></type>
          <declname>arg_count</declname>
        </param>
        <param>
          <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref></type>
          <declname>ret_pc</declname>
        </param>
        <param>
          <type>const <ref refid="structtvm_1_1runtime_1_1vm_1_1VMFunction" kindref="compound">VMFunction</ref> &amp;</type>
          <declname>vm_func</declname>
        </param>
        <briefdescription>
<para>Push a call frame on to the call stack. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="709" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a5a60fe06f720e26c749a80211f1ee620" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref></type>
        <definition>Index tvm::runtime::vm::VirtualMachine::PopFrame</definition>
        <argsstring>()</argsstring>
        <name>PopFrame</name>
        <briefdescription>
<para>Pop a frame off the call stack. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of frames left. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="715" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a670a5e3f3d9c22bb822efface955bf17" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::runtime::vm::VirtualMachine::WriteRegister</definition>
        <argsstring>(RegName reg, const ObjectRef &amp;obj)</argsstring>
        <name>WriteRegister</name>
        <param>
          <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3bbbf700719e9dc3dda2bc25210c18ae" kindref="member">RegName</ref></type>
          <declname>reg</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">ObjectRef</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Write to a VM register. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>The register to write to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to write to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="722" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a75220f7f8173d1d43502ab8198a7ebb3" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">ObjectRef</ref></type>
        <definition>ObjectRef tvm::runtime::vm::VirtualMachine::ReadRegister</definition>
        <argsstring>(RegName reg) const </argsstring>
        <name>ReadRegister</name>
        <param>
          <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3bbbf700719e9dc3dda2bc25210c18ae" kindref="member">RegName</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Read a VM register. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>The register to read from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The read object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="729" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a9ce5f01c75078e6ea312500e20385999" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t tvm::runtime::vm::VirtualMachine::LoadScalarInt</definition>
        <argsstring>(RegName reg) const </argsstring>
        <name>LoadScalarInt</name>
        <param>
          <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3bbbf700719e9dc3dda2bc25210c18ae" kindref="member">RegName</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Read a VM register and cast it to int32_t. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>The register to read from. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The read scalar. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="736" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1aa5f4724e2e702ef9d5c34e85dec53b02" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">ObjectRef</ref></type>
        <definition>ObjectRef tvm::runtime::vm::VirtualMachine::Invoke</definition>
        <argsstring>(const VMFunction &amp;func, const std::vector&lt; ObjectRef &gt; &amp;args)</argsstring>
        <name>Invoke</name>
        <param>
          <type>const <ref refid="structtvm_1_1runtime_1_1vm_1_1VMFunction" kindref="compound">VMFunction</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">ObjectRef</ref> &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Invoke a VM function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to the function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The object representing the result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="744" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a1094291352e07e4c827a88b1167b89ad" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">ObjectRef</ref></type>
        <definition>ObjectRef tvm::runtime::vm::VirtualMachine::Invoke</definition>
        <argsstring>(const std::string &amp;name, const std::vector&lt; ObjectRef &gt; &amp;args)</argsstring>
        <name>Invoke</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">ObjectRef</ref> &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Invoke a VM function by name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The function&apos;s name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to the function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The object representing the result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="753" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a89bc186467de25e51802e0ce739f436b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void tvm::runtime::vm::VirtualMachine::InvokePacked</definition>
        <argsstring>(Index packed_index, const PackedFunc &amp;func, Index arg_count, Index output_size, const std::vector&lt; ObjectRef &gt; &amp;args)</argsstring>
        <name>InvokePacked</name>
        <param>
          <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref></type>
          <declname>packed_index</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref></type>
          <declname>arg_count</declname>
        </param>
        <param>
          <type><ref refid="namespacetvm_1_1runtime_1_1vm_1a3597867d2db714bf760876a23d6b7d3d" kindref="member">Index</ref></type>
          <declname>output_size</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">ObjectRef</ref> &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Invoke a PackedFunction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packed_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the PackedFunction in all functions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The PackedFunction to be invoked. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of arguments to the PackedFunction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of outputs of the PackedFunction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments to the PackedFunction.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The return value will be stored in the last output_size slots of args. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="766" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1ade6ed373d6af91fe813f6f98f9e59244" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::runtime::vm::VirtualMachine::Init</definition>
        <argsstring>(const std::vector&lt; TVMContext &gt; &amp;contexts)</argsstring>
        <name>Init</name>
        <param>
          <type>const std::vector&lt; <ref refid="c__runtime__api_8h_1a9363bb701f16ce5bbb381f2a013d25b4" kindref="member">TVMContext</ref> &gt; &amp;</type>
          <declname>contexts</declname>
        </param>
        <briefdescription>
<para>Initialize the virtual machine for a set of contexts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>contexts</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of TVM contexts. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="776" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1ad83dfc94ba5e62875df9e780c750487b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::runtime::vm::VirtualMachine::RunLoop</definition>
        <argsstring>()</argsstring>
        <name>RunLoop</name>
        <briefdescription>
<para>Run VM dispatch loop. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="779" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1aa85f2bba2f829a2976a68035151ff590" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="c__runtime__api_8h_1a9363bb701f16ce5bbb381f2a013d25b4" kindref="member">TVMContext</ref></type>
        <definition>TVMContext tvm::runtime::vm::VirtualMachine::GetParamsContext</definition>
        <argsstring>() const </argsstring>
        <name>GetParamsContext</name>
        <briefdescription>
<para>Get device context for params. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="782" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a33df7df2ae3019ae1d6bd11427acb747" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::runtime::vm::VirtualMachine::InvokeGlobal</definition>
        <argsstring>(const VMFunction &amp;func, const std::vector&lt; ObjectRef &gt; &amp;args)</argsstring>
        <name>InvokeGlobal</name>
        <param>
          <type>const <ref refid="structtvm_1_1runtime_1_1vm_1_1VMFunction" kindref="compound">VMFunction</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">ObjectRef</ref> &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Invoke a global setting up the VM state to execute. </para>        </briefdescription>
        <detaileddescription>
<para>This does not begin execution of the VM. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/vm.h" line="790" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The virtual machine. </para>    </briefdescription>
    <detaileddescription>
<para>The virtual machine contains all the current execution state, as well as the executable.</para><para>The goal is to have a single self-contained object, enabling one to easily pass around VMs, execute them on multiple threads, or serialize them to disk or over the wire. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="7570">
        <label>tvm::runtime::Object</label>
        <link refid="classtvm_1_1runtime_1_1Object"/>
      </node>
      <node id="7568">
        <label>tvm::runtime::vm::VirtualMachine</label>
        <link refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine"/>
        <childnode refid="7569" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7569">
        <label>tvm::runtime::ModuleNode</label>
        <link refid="classtvm_1_1runtime_1_1ModuleNode"/>
        <childnode refid="7570" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7575">
        <label>tvm::runtime::Module</label>
        <link refid="classtvm_1_1runtime_1_1Module"/>
        <childnode refid="7576" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7573">
        <label>tvm::runtime::Object</label>
        <link refid="classtvm_1_1runtime_1_1Object"/>
        <childnode refid="7573" relation="usage">
          <edgelabel>#deleter_</edgelabel>
        </childnode>
      </node>
      <node id="7576">
        <label>tvm::runtime::ObjectRef</label>
        <link refid="classtvm_1_1runtime_1_1ObjectRef"/>
        <childnode refid="7577" relation="usage">
          <edgelabel>#data_</edgelabel>
        </childnode>
      </node>
      <node id="7577">
        <label>tvm::runtime::ObjectPtr&lt; tvm::runtime::Object &gt;</label>
        <link refid="classtvm_1_1runtime_1_1ObjectPtr"/>
      </node>
      <node id="7571">
        <label>tvm::runtime::vm::VirtualMachine</label>
        <link refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine"/>
        <childnode refid="7572" relation="public-inheritance">
        </childnode>
        <childnode refid="7574" relation="usage">
          <edgelabel>#exec_</edgelabel>
        </childnode>
        <childnode refid="7576" relation="usage">
          <edgelabel>#return_register_</edgelabel>
        </childnode>
        <childnode refid="7578" relation="usage">
          <edgelabel>#code_</edgelabel>
        </childnode>
      </node>
      <node id="7574">
        <label>tvm::runtime::vm::Executable</label>
        <link refid="classtvm_1_1runtime_1_1vm_1_1Executable"/>
        <childnode refid="7572" relation="public-inheritance">
        </childnode>
        <childnode refid="7575" relation="usage">
          <edgelabel>+lib</edgelabel>
        </childnode>
      </node>
      <node id="7572">
        <label>tvm::runtime::ModuleNode</label>
        <link refid="classtvm_1_1runtime_1_1ModuleNode"/>
        <childnode refid="7573" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7578">
        <label>tvm::runtime::vm::Instruction</label>
        <link refid="structtvm_1_1runtime_1_1vm_1_1Instruction"/>
      </node>
    </collaborationgraph>
    <location file="include/tvm/runtime/vm.h" line="652" column="1" bodyfile="include/tvm/runtime/vm.h" bodystart="652" bodyend="797"/>
    <listofallmembers>
      <member refid="classtvm_1_1runtime_1_1Object_1a5fbebc47be111ecc1d5869bcc0476e21" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>_GetOrAllocRuntimeTypeIndex</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a14b234a745215da158b2386bbb34bd70" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>_type_child_slots</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a05ece7bcb6bf73e88765c1f193a489ce" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>_type_child_slots_can_overflow</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a55cb618bd4bbcd49317b35ea8e2996be" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>_type_final</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a92fe62494027b70af1f7696d611c21b6" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>_type_has_method_sequal_reduce</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ac97054694d03dc5eac58315fb569ef88" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>_type_has_method_shash_reduce</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a74e9f076b50b8b335b4a321e9b0bf03c" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>_type_has_method_visit_attrs</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1a56e23ef9427bd055c4868135cc1f38bd" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>_type_index</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1a9346e3758203ca87d500e65de0445e01" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>_type_key</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1ab220bfa34c9abb2935c3b622d9bc03b2" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>code_</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a50557c8e0398599341c1a8539c528860" prot="private" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>const_pool_</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1ae52ecf76ef854f8288ca2baa8f9d01ed" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>ctxs_</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a70fb5361147634605d6595bb89381f03" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>DecRef</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1af4407d2b59132e803ff791482dbe0145" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>deleter_</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1ad478992798013d0e3a72d220003c8881" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>exec_</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a9e84841ca982bff376a978ade0132631" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>FDeleter</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a4a268dec17fdd0942fe7dce78974783f" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>frames_</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1af9d51023b5d6451dac20d1a146ce5d38" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>func_index_</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1aa2820340181ff4a9eaa149f89ac706ec" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>GetFuncFromEnv</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a8d1e7cdc6412eae8dea9c2c08c7f48ec" prot="public" virt="virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>GetFunction</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1abd6d000714e0ed2b3b2f435ea5bd9a43" prot="public" virt="non-virtual" ambiguityscope="tvm::runtime::ModuleNode::"><scope>tvm::runtime::vm::VirtualMachine</scope><name>GetFunction</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a726972ff315c446192df94027ddea032" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>GetOrAllocRuntimeTypeIndex</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1aa85f2bba2f829a2976a68035151ff590" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>GetParamsContext</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1a73ac521892f4263554116261303e7e44" prot="public" virt="virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>GetSource</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a9581610ea91e0e38f57edc82e264a1b0" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>GetTypeKey</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ac9a7d8d3d562803c9cf91271c462b61d" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>GetTypeKeyHash</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1a79b98521b484d1c672b7ce2ae2aed2b5" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>Import</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1abb10abf603900cbd0bfd51eeb44eb949" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>imports</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1af05db5c6d76f9b4dbf0631815170c5a7" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>imports_</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ac9e5eed7719e322117bde996a171e33a" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>IncRef</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1ade6ed373d6af91fe813f6f98f9e59244" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>Init</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a7d46e436c01133647cd303719752f456" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>inputs_</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1aa5f4724e2e702ef9d5c34e85dec53b02" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>Invoke</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a1094291352e07e4c827a88b1167b89ad" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>Invoke</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a33df7df2ae3019ae1d6bd11427acb747" prot="private" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>InvokeGlobal</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a89bc186467de25e51802e0ce739f436b" prot="protected" virt="virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>InvokePacked</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1af1359ebff2c328ff0bb80083937c95dd" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>IsInstance</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1aae578b4bd354bdd1ab12e91a65ec6fbf" prot="public" virt="virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>LoadExecutable</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a9ce5f01c75078e6ea312500e20385999" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>LoadScalarInt</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a133436a9ec5c4a768b94102bf95a660b" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>Object</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ab7968feb6ad38ecaffc320e13819d826" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>Object</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1aa1612f69ea5b4225d4cda759cd517323" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>Object</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a69c32fbd96181f5c21d2c878ab285e4f" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>operator=</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ae341e561272ff43cdcbc927bc29ac50d" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>operator=</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1ae2e5377a5dbf7335ed8989512457a2f5" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>packed_funcs_</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a583f4afb3292882df571a4fdf3cbf947" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>pc_</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a5a60fe06f720e26c749a80211f1ee620" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>PopFrame</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a05f2bc216da23c035522d5dde356a920" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>PushFrame</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a75220f7f8173d1d43502ab8198a7ebb3" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>ReadRegister</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a0d492efee331e2239a093f4b2017c10f" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>ref_counter_</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a55549a6c23987890246248682560a03d" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>RefCounterType</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1afd0505002da7e7f86f82b2f3325ff127" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>return_register_</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1ad83dfc94ba5e62875df9e780c750487b" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>RunLoop</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ad94d79729ac85aa7c976e23d39066383" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>RuntimeTypeIndex</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1acd613ea7faf2fc100d1e8b0fd80020c3" prot="public" virt="virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>SaveToBinary</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1ad06785ce4a9daf8602748f1b9cff5b90" prot="public" virt="virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>SaveToFile</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1ac44750d06e11a275b10072b982ef4b13" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>TVM_DECLARE_FINAL_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a594c0d786dbc567ff6774ab11b45958a" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>type_index</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a4bfc2586cb55f2af47728187b3256255" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>type_index_</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a00f035566a720dbac56f5dea042fb0ec" prot="public" virt="virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>type_key</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a817ba6c23b7ee1821c48a75edf255a30" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>TypeIndex2Key</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a6ee32a02dd44257da105fbbe5d9c8622" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>TypeIndex2KeyHash</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a6841f97e06e6614dd7e82c6dd41b818a" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>TypeKey2Index</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a6edbbbb71000617f644232de37d53338" prot="public" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>VirtualMachine</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a670a5e3f3d9c22bb822efface955bf17" prot="protected" virt="non-virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>WriteRegister</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1add6c8e6967c6906ea5346b2ccd30afb4" prot="public" virt="virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>~ModuleNode</name></member>
      <member refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a62dead74c40c1a6ac03aec56918d98c7" prot="public" virt="virtual"><scope>tvm::runtime::vm::VirtualMachine</scope><name>~VirtualMachine</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
