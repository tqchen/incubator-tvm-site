<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1te_1_1Stage" kind="class" language="C++" prot="public">
    <compoundname>tvm::te::Stage</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ObjectRef</basecompoundref>
    <includes refid="schedule_8h" local="no">schedule.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtvm_1_1te_1_1Stage_1abf9765aa226d6ec0930cb202a392e041" prot="public" static="no">
        <type><ref refid="classtvm_1_1te_1_1StageNode" kindref="compound">StageNode</ref></type>
        <definition>using tvm::te::Stage::ContainerType =  StageNode</definition>
        <argsstring></argsstring>
        <name>ContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="273" column="1" bodyfile="include/tvm/te/schedule.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1afec82602b9321c489b88632a005335f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::te::Stage::Stage</definition>
        <argsstring>()</argsstring>
        <name>Stage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="59" column="1" bodyfile="include/tvm/te/schedule.h" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1aa6ace38b6312e42aaf9389c8749ae0a4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::te::Stage::Stage</definition>
        <argsstring>(ObjectPtr&lt; Object &gt; n)</argsstring>
        <name>Stage</name>
        <param>
          <type>ObjectPtr&lt; Object &gt;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="60" column="1" bodyfile="include/tvm/te/schedule.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a1ecdc9a000be62c9cc26a96d4c33e36e" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>tvm::te::Stage::Stage</definition>
        <argsstring>(Operation op)</argsstring>
        <name>Stage</name>
        <param>
          <type><ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>create a new schedule for op. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>The operator in the schedule </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1adb81d41e9f0722f4b49cf1175814cc37" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtvm_1_1te_1_1StageNode" kindref="compound">StageNode</ref> *</type>
        <definition>const StageNode * tvm::te::Stage::operator-&gt;</definition>
        <argsstring>() const </argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>access the internal node container </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the pointer to the internal node container </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="70" column="1" bodyfile="include/tvm/te/schedule.h" bodystart="795" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a427ef4fef2edf15624be2c87bdad9505" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1StageNode" kindref="compound">StageNode</ref> *</type>
        <definition>StageNode * tvm::te::Stage::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>access the internal node container </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the pointer to the internal node container </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="75" column="1" bodyfile="include/tvm/te/schedule.h" bodystart="798" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a0dc42f190125f0cf63e8d749ae66af7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::set_scope</definition>
        <argsstring>(std::string scope)</argsstring>
        <name>set_scope</name>
        <param>
          <type>std::string</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
<para>set the memory scope of the stage </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory scope. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a071545484de7a894c01ccf0e77183730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::compute_at</definition>
        <argsstring>(Stage parent, IterVar scope)</argsstring>
        <name>compute_at</name>
        <param>
          <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref></type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>scope</declname>
        </param>
        <briefdescription>
<para>specify the schedule to be computed at the parent schedule&apos;s scope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>The parent schedule. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>The iteration point to carry the schedule. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a1c58b35e37561739440b322c29d30c3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::compute_inline</definition>
        <argsstring>()</argsstring>
        <name>compute_inline</name>
        <briefdescription>
<para>Compute the function inline. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a95b58b2d2ec034ecd0bdb99f95c0b0ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::compute_root</definition>
        <argsstring>()</argsstring>
        <name>compute_root</name>
        <briefdescription>
<para>Compute the function at group root. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1aa9ace0034447b461610ebc1c2de69a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::bind</definition>
        <argsstring>(IterVar ivar, IterVar thread_ivar)</argsstring>
        <name>bind</name>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>ivar</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>thread_ivar</declname>
        </param>
        <briefdescription>
<para>Bind the IterVar to thread index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ivar</parametername>
</parameternamelist>
<parameterdescription>
<para>The IterVar to be bound. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_ivar</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread axis to be bound. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a0056636228aed23f71eecc0810731436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::set_store_predicate</definition>
        <argsstring>(PrimExpr predicate)</argsstring>
        <name>set_store_predicate</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Set the predicate to determine whether a store to the array should be performed. Use this when there are multiple threads performing the same store and we only need one of them to do the store. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is a dangerous scheduling primitive that can change behavior of program. Only do when we are certain that thare are duplicated stores. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predicate</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition to be checked. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1aba3eb6be98bdb18da51a31bbf4af4617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::env_threads</definition>
        <argsstring>(Array&lt; IterVar &gt; threads)</argsstring>
        <name>env_threads</name>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> &gt;</type>
          <declname>threads</declname>
        </param>
        <briefdescription>
<para>Specify environment threads that launched around the group&apos;s scope. This can only be used in group stage. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threads</parametername>
</parameternamelist>
<parameterdescription>
<para>The threads to be launched around the scope. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Each thread can only appear in one env_threads. This is a beta feature. </para></simplesect>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a5a7cd562be59b68a187ad97085a3425d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::split</definition>
        <argsstring>(IterVar parent, PrimExpr factor, IterVar *p_outer, IterVar *p_inner)</argsstring>
        <name>split</name>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> *</type>
          <declname>p_outer</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> *</type>
          <declname>p_inner</declname>
        </param>
        <briefdescription>
<para>Split the parent by factor, generate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>The parent iteration domain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>The split factor of the loop. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_outer</parametername>
</parameternamelist>
<parameterdescription>
<para>The result outer domain </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_inner</parametername>
</parameternamelist>
<parameterdescription>
<para>The result inner domain. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a51432f38d9ec4792a2525023179ae604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::split_by_nparts</definition>
        <argsstring>(IterVar parent, PrimExpr nparts, IterVar *p_outer, IterVar *p_inner)</argsstring>
        <name>split_by_nparts</name>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>parent</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>nparts</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> *</type>
          <declname>p_outer</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> *</type>
          <declname>p_inner</declname>
        </param>
        <briefdescription>
<para>Split the iteration with given number of parts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>The parent domain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nparts</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of parts in the outer domain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_outer</parametername>
</parameternamelist>
<parameterdescription>
<para>The result outer domain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_inner</parametername>
</parameternamelist>
<parameterdescription>
<para>The result inner domain. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a5658065d9cbbee620bbd107d30c4ae72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::fuse</definition>
        <argsstring>(IterVar outer, IterVar inner, IterVar *p_target)</argsstring>
        <name>fuse</name>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>outer</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>inner</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> *</type>
          <declname>p_target</declname>
        </param>
        <briefdescription>
<para>Fuse the inner outer domain to the target. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outer</parametername>
</parameternamelist>
<parameterdescription>
<para>The outer domain to be fused. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inner</parametername>
</parameternamelist>
<parameterdescription>
<para>The inner domain to be fused </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_target</parametername>
</parameternamelist>
<parameterdescription>
<para>The result target domain. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a07b721494aa3c0c79e8a8654c433708f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::fuse</definition>
        <argsstring>(const Array&lt; IterVar &gt; &amp;axes, IterVar *p_target)</argsstring>
        <name>fuse</name>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> &gt; &amp;</type>
          <declname>axes</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> *</type>
          <declname>p_target</declname>
        </param>
        <briefdescription>
<para>Fuse all the axes together into a single axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axes</parametername>
</parameternamelist>
<parameterdescription>
<para>All the axes to be fused. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_target</parametername>
</parameternamelist>
<parameterdescription>
<para>The result target domain.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>axes can be an empty array, in that case, a singleton IterVar is created and inserted to the outermost loop. The fuse of empty array is used to support zero-dimension tensors.</para></simplesect>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1ad96cd240a92df9cafae89cdf2a7e302e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::reorder</definition>
        <argsstring>(const Array&lt; IterVar &gt; &amp;order)</argsstring>
        <name>reorder</name>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> &gt; &amp;</type>
          <declname>order</declname>
        </param>
        <briefdescription>
<para>Reorder the iteration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>The order of iteration variable. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a7a42ba3166c506fcacf596ac13553b67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::tile</definition>
        <argsstring>(IterVar x_parent, IterVar y_parent, PrimExpr x_factor, PrimExpr y_factor, IterVar *p_x_outer, IterVar *p_y_outer, IterVar *p_x_inner, IterVar *p_y_inner)</argsstring>
        <name>tile</name>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>x_parent</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>y_parent</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>x_factor</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>y_factor</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> *</type>
          <declname>p_x_outer</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> *</type>
          <declname>p_y_outer</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> *</type>
          <declname>p_x_inner</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> *</type>
          <declname>p_y_inner</declname>
        </param>
        <briefdescription>
<para>Perform tiling on two dimensions The final loop order from outmost to inner most are [x_outer, y_outer, x_inner, y_inner]. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x_parent</parametername>
</parameternamelist>
<parameterdescription>
<para>The original x dimension </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y_parent</parametername>
</parameternamelist>
<parameterdescription>
<para>The original y dimension </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>The stride factor on x axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>The stride factor on y axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_x_outer</parametername>
</parameternamelist>
<parameterdescription>
<para>Outer axis of x dimension </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_y_outer</parametername>
</parameternamelist>
<parameterdescription>
<para>Outer axis of y dimension </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_x_inner</parametername>
</parameternamelist>
<parameterdescription>
<para>Inner axis of x dimension </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_y_inner</parametername>
</parameternamelist>
<parameterdescription>
<para>Inner axis of y dimension </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a44d33e3920106e75dc7c68272f880812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::vectorize</definition>
        <argsstring>(IterVar var)</argsstring>
        <name>vectorize</name>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Vectorize iteration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to be vectorized. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1ab5fe485e1d730c36b096c060b8d2ef9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::tensorize</definition>
        <argsstring>(IterVar var, TensorIntrin f)</argsstring>
        <name>tensorize</name>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1te_1_1TensorIntrin" kindref="compound">TensorIntrin</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Replace computation of the current stage by tensor intrinsic f. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis marks beginning of tensorization. Every operations inside the axis(include axis itself is tensorized). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> compute intrinsics. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1af83ad8672660403504f472228b044b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::unroll</definition>
        <argsstring>(IterVar var)</argsstring>
        <name>unroll</name>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Unroll iteration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to be unrolled. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a60a6be10a1a96cb594c1399efabafef3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::parallel</definition>
        <argsstring>(IterVar var)</argsstring>
        <name>parallel</name>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Parallelize iteration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to be parallelized. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a7045099f180e5cdcf9b1959b280a2d35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::pragma</definition>
        <argsstring>(IterVar var, const std::string &amp;pragma_type, const PrimExpr &amp;pragma_value=PrimExpr())</argsstring>
        <name>pragma</name>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>var</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>pragma_type</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>pragma_value</declname>
          <defval><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref>()</defval>
        </param>
        <briefdescription>
<para>Annotate the iteration with pragma. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to be parallelized. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pragma_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The pragma type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pragma_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The pragma value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a611327890918fb641a8e65396ab9c5f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::prefetch</definition>
        <argsstring>(const Tensor &amp;domain, IterVar var, PrimExpr offset)</argsstring>
        <name>prefetch</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Fetch data in advance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>the tensor to be prefetched </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>the iteration point at which to apply prefetching </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of iterations be to fetched in advance </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1aa73e3a269d84c3b4f0a1994371d67bab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::storage_align</definition>
        <argsstring>(IterVar axis, int factor, int offset)</argsstring>
        <name>storage_align</name>
        <param>
          <type><ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref></type>
          <declname>axis</declname>
        </param>
        <param>
          <type>int</type>
          <declname>factor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Set alignment requirement for specific dimension. </para>        </briefdescription>
        <detaileddescription>
<para>Such that stride[axis] == k * factor + offset for some k.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension to be specified for alignment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>The factor multiple of alignment </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The required offset factor. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a0cdea4d4b25b730c44d86e6c57505000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::double_buffer</definition>
        <argsstring>()</argsstring>
        <name>double_buffer</name>
        <briefdescription>
<para>Compute current stage with double buffering. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a0728134ed00dd97169d4e6cec6fe0e8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
        <definition>Stage&amp; tvm::te::Stage::opengl</definition>
        <argsstring>()</argsstring>
        <name>opengl</name>
        <briefdescription>
<para><ref refid="classtvm_1_1te_1_1Schedule" kindref="compound">Schedule</ref> for OpenGL fragment shader. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1af6aa745f05336b8afcd5b0b6d2fd9cb6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::te::Stage::is_scheduled</definition>
        <argsstring>() const </argsstring>
        <name>is_scheduled</name>
        <briefdescription>
<para>whether the stage has been scheduled. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether the stage has been scheduled. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Stage_1a9431049e6573f40af10b02e7cd8d8efc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref></type>
        <definition>Stage tvm::te::Stage::GetAttachSpec</definition>
        <argsstring>() const </argsstring>
        <name>GetAttachSpec</name>
        <briefdescription>
<para>Get attachment spec of current stage. If the stage compute at Group root, this function will traverse the group function to get the final spec from the group. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A stage representing the attach spec of the group. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/schedule.h" line="271" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref>, contains scheduling for a stage of computation. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="6943">
        <label>ObjectRef</label>
      </node>
      <node id="6942">
        <label>tvm::te::Stage</label>
        <link refid="classtvm_1_1te_1_1Stage"/>
        <childnode refid="6943" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6945">
        <label>ObjectRef</label>
      </node>
      <node id="6944">
        <label>tvm::te::Stage</label>
        <link refid="classtvm_1_1te_1_1Stage"/>
        <childnode refid="6945" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tvm/te/schedule.h" line="57" column="1" bodyfile="include/tvm/te/schedule.h" bodystart="57" bodyend="274"/>
    <listofallmembers>
      <member refid="classtvm_1_1te_1_1Stage_1aa9ace0034447b461610ebc1c2de69a26" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>bind</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a071545484de7a894c01ccf0e77183730" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>compute_at</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a1c58b35e37561739440b322c29d30c3b" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>compute_inline</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a95b58b2d2ec034ecd0bdb99f95c0b0ba" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>compute_root</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1abf9765aa226d6ec0930cb202a392e041" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>ContainerType</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a0cdea4d4b25b730c44d86e6c57505000" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>double_buffer</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1aba3eb6be98bdb18da51a31bbf4af4617" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>env_threads</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a5658065d9cbbee620bbd107d30c4ae72" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>fuse</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a07b721494aa3c0c79e8a8654c433708f" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>fuse</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a9431049e6573f40af10b02e7cd8d8efc" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>GetAttachSpec</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1af6aa745f05336b8afcd5b0b6d2fd9cb6" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>is_scheduled</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a0728134ed00dd97169d4e6cec6fe0e8f" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>opengl</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1adb81d41e9f0722f4b49cf1175814cc37" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>operator-&gt;</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a427ef4fef2edf15624be2c87bdad9505" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>operator-&gt;</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a60a6be10a1a96cb594c1399efabafef3" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>parallel</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a7045099f180e5cdcf9b1959b280a2d35" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>pragma</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a611327890918fb641a8e65396ab9c5f6" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>prefetch</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1ad96cd240a92df9cafae89cdf2a7e302e" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>reorder</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a0dc42f190125f0cf63e8d749ae66af7c" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>set_scope</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a0056636228aed23f71eecc0810731436" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>set_store_predicate</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a5a7cd562be59b68a187ad97085a3425d" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>split</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a51432f38d9ec4792a2525023179ae604" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>split_by_nparts</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1afec82602b9321c489b88632a005335f8" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>Stage</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1aa6ace38b6312e42aaf9389c8749ae0a4" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>Stage</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a1ecdc9a000be62c9cc26a96d4c33e36e" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>Stage</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1aa73e3a269d84c3b4f0a1994371d67bab" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>storage_align</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1ab5fe485e1d730c36b096c060b8d2ef9d" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>tensorize</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a7a42ba3166c506fcacf596ac13553b67" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>tile</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1af83ad8672660403504f472228b044b33" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>unroll</name></member>
      <member refid="classtvm_1_1te_1_1Stage_1a44d33e3920106e75dc7c68272f880812" prot="public" virt="non-virtual"><scope>tvm::te::Stage</scope><name>vectorize</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
