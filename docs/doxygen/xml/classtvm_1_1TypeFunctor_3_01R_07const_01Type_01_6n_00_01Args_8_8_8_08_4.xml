<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4" kind="class" language="C++" prot="public">
    <compoundname>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</compoundname>
    <includes refid="type__functor_8h" local="no">type_functor.h</includes>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1ac8cfffcb8f63459fcc22a04fb658272a" prot="private" static="no">
        <type><ref refid="classtvm_1_1TypeFunctor" kindref="compound">TypeFunctor</ref>&lt; R(const <ref refid="classtvm_1_1Type" kindref="compound">Type</ref> &amp;n, Args...)&gt;</type>
        <definition>using tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::TSelf =  TypeFunctor&lt;R(const Type&amp; n, Args...)&gt;</definition>
        <argsstring></argsstring>
        <name>TSelf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="54" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1aa80d98c12efe05ed43a74dd7c3adb159" prot="private" static="no">
        <type><ref refid="classtvm_1_1NodeFunctor" kindref="compound">tvm::NodeFunctor</ref>&lt; R(const ObjectRef &amp;n, <ref refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4" kindref="compound">TSelf</ref> *self, Args...)&gt;</type>
        <definition>using tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::FType =  tvm::NodeFunctor&lt;R(const ObjectRef&amp; n, TSelf* self, Args...)&gt;</definition>
        <argsstring></argsstring>
        <name>FType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="55" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a24d4a3522ee6c4cdeed80dcdcc1424ad" prot="public" static="no">
        <type>R</type>
        <definition>using tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::result_type =  R</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <briefdescription>
<para>the result type of this functor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="59" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a0a74cb61bb79cae0115553ed9a0ebc3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::~TypeFunctor</definition>
        <argsstring>()</argsstring>
        <name>~TypeFunctor</name>
        <briefdescription>
<para>virtual destructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="61" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1abfc4d68a848ae2b0b374885dabe156c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>R</type>
        <definition>R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::operator()</definition>
        <argsstring>(const Type &amp;n, Args...args)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classtvm_1_1Type" kindref="compound">Type</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Same as call. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The expression node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the call </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="68" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1ab35d51c50343319187daf8dddb31b3a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::VisitType</definition>
        <argsstring>(const Type &amp;n, Args...args)</argsstring>
        <name>VisitType</name>
        <param>
          <type>const <ref refid="classtvm_1_1Type" kindref="compound">Type</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>The functor call. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The expression node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the call </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="77" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a2226d3d6677ef90628ce9d989a4b0f3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::VisitType_</definition>
        <argsstring>(const TensorTypeNode *op, Args...args)</argsstring>
        <name>VisitType_</name>
        <param>
          <type>const <ref refid="classtvm_1_1TensorTypeNode" kindref="compound">TensorTypeNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="83" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="83" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a2d12e6b82d879dd6ec1614f592486401" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::VisitType_</definition>
        <argsstring>(const TypeVarNode *op, Args...args)</argsstring>
        <name>VisitType_</name>
        <param>
          <type>const <ref refid="classtvm_1_1TypeVarNode" kindref="compound">TypeVarNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="85" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a02a16c27881cb2ab3532cca9ae68c1f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::VisitType_</definition>
        <argsstring>(const TypeConstraintNode *op, Args...args)</argsstring>
        <name>VisitType_</name>
        <param>
          <type>const <ref refid="classtvm_1_1TypeConstraintNode" kindref="compound">TypeConstraintNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="86" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1af63866f6e7377bb74f393740bbc1b492" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::VisitType_</definition>
        <argsstring>(const FuncTypeNode *op, Args...args)</argsstring>
        <name>VisitType_</name>
        <param>
          <type>const <ref refid="classtvm_1_1FuncTypeNode" kindref="compound">FuncTypeNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="87" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a59f150c83a601663d0f56ca14afba603" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::VisitType_</definition>
        <argsstring>(const TypeRelationNode *op, Args...args)</argsstring>
        <name>VisitType_</name>
        <param>
          <type>const <ref refid="classtvm_1_1TypeRelationNode" kindref="compound">TypeRelationNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="88" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1ad1b38cf92f6a8400d0e0c9d7480ccbf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::VisitType_</definition>
        <argsstring>(const TupleTypeNode *op, Args...args)</argsstring>
        <name>VisitType_</name>
        <param>
          <type>const <ref refid="classtvm_1_1TupleTypeNode" kindref="compound">TupleTypeNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="89" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1aa74b61efd6210a7d95e07086827297e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::VisitType_</definition>
        <argsstring>(const IncompleteTypeNode *op, Args...args)</argsstring>
        <name>VisitType_</name>
        <param>
          <type>const <ref refid="classtvm_1_1IncompleteTypeNode" kindref="compound">IncompleteTypeNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="90" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a4ed63aa95ed7c6a03f12bb0fd13ba868" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::VisitType_</definition>
        <argsstring>(const RelayRefTypeNode *op, Args...args)</argsstring>
        <name>VisitType_</name>
        <param>
          <type>const <ref refid="classtvm_1_1RelayRefTypeNode" kindref="compound">RelayRefTypeNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="91" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1ac080f078b2964af61b7bd4fb6f1c3339" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::VisitType_</definition>
        <argsstring>(const GlobalTypeVarNode *op, Args...args)</argsstring>
        <name>VisitType_</name>
        <param>
          <type>const <ref refid="classtvm_1_1GlobalTypeVarNode" kindref="compound">GlobalTypeVarNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="92" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a8964508f42a85ccc9e2c9dcd23e1e58d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::VisitType_</definition>
        <argsstring>(const TypeCallNode *op, Args...args)</argsstring>
        <name>VisitType_</name>
        <param>
          <type>const <ref refid="classtvm_1_1TypeCallNode" kindref="compound">TypeCallNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="93" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a91bc40008f698329ac0a908b2c9f02c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::VisitType_</definition>
        <argsstring>(const TypeDataNode *op, Args...args)</argsstring>
        <name>VisitType_</name>
        <param>
          <type>const <ref refid="classtvm_1_1TypeDataNode" kindref="compound">TypeDataNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="94" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1ad542e58430966e853bdef0ec2e01f379" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::VisitType_</definition>
        <argsstring>(const PrimTypeNode *op, Args...args)</argsstring>
        <name>VisitType_</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimTypeNode" kindref="compound">PrimTypeNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="95" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1aff7dbebbf8fd2fdd5ce9dd23a85fa36f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::VisitType_</definition>
        <argsstring>(const PointerTypeNode *op, Args...args)</argsstring>
        <name>VisitType_</name>
        <param>
          <type>const <ref refid="classtvm_1_1PointerTypeNode" kindref="compound">PointerTypeNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="96" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a91553f9e04c39b3821a70ae4f7b0c597" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::VisitTypeDefault_</definition>
        <argsstring>(const Object *op, Args...)</argsstring>
        <name>VisitTypeDefault_</name>
        <param>
          <type>const Object *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="97" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="97" bodyend="100"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1ac507da2445cad208b7117d28a0e4c85c" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1NodeFunctor" kindref="compound">FType</ref></type>
        <definition>static FType tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;::InitVTable</definition>
        <argsstring>()</argsstring>
        <name>InitVTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/type_functor.h" line="104" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="104" bodyend="121"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="7419">
        <label>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</label>
        <link refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4"/>
      </node>
    </collaborationgraph>
    <location file="include/tvm/ir/type_functor.h" line="52" column="1" bodyfile="include/tvm/ir/type_functor.h" bodystart="52" bodyend="122"/>
    <listofallmembers>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1aa80d98c12efe05ed43a74dd7c3adb159" prot="private" virt="non-virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>FType</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1ac507da2445cad208b7117d28a0e4c85c" prot="private" virt="non-virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>InitVTable</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1abfc4d68a848ae2b0b374885dabe156c4" prot="public" virt="non-virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>operator()</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a24d4a3522ee6c4cdeed80dcdcc1424ad" prot="public" virt="non-virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>result_type</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1ac8cfffcb8f63459fcc22a04fb658272a" prot="private" virt="non-virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>TSelf</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1ab35d51c50343319187daf8dddb31b3a2" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>VisitType</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a2226d3d6677ef90628ce9d989a4b0f3e" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>VisitType_</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a2d12e6b82d879dd6ec1614f592486401" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>VisitType_</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a02a16c27881cb2ab3532cca9ae68c1f5" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>VisitType_</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1af63866f6e7377bb74f393740bbc1b492" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>VisitType_</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a59f150c83a601663d0f56ca14afba603" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>VisitType_</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1ad1b38cf92f6a8400d0e0c9d7480ccbf7" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>VisitType_</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1aa74b61efd6210a7d95e07086827297e0" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>VisitType_</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a4ed63aa95ed7c6a03f12bb0fd13ba868" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>VisitType_</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1ac080f078b2964af61b7bd4fb6f1c3339" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>VisitType_</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a8964508f42a85ccc9e2c9dcd23e1e58d" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>VisitType_</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a91bc40008f698329ac0a908b2c9f02c1" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>VisitType_</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1ad542e58430966e853bdef0ec2e01f379" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>VisitType_</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1aff7dbebbf8fd2fdd5ce9dd23a85fa36f" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>VisitType_</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a91553f9e04c39b3821a70ae4f7b0c597" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>VisitTypeDefault_</name></member>
      <member refid="classtvm_1_1TypeFunctor_3_01R_07const_01Type_01_6n_00_01Args_8_8_8_08_4_1a0a74cb61bb79cae0115553ed9a0ebc3e" prot="public" virt="virtual"><scope>tvm::TypeFunctor&lt; R(const Type &amp;n, Args...)&gt;</scope><name>~TypeFunctor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
