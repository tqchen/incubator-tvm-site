<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1ErrorReporter" kind="class" language="C++" prot="public">
    <compoundname>tvm::ErrorReporter</compoundname>
    <includes refid="error_8h" local="no">error.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtvm_1_1ErrorReporter_1af3fee3e5548b39d315eb0e1889e3c8b6" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classtvm_1_1Error" kindref="compound">Error</ref> &gt;</type>
        <definition>std::vector&lt;Error&gt; tvm::ErrorReporter::errors_</definition>
        <argsstring></argsstring>
        <name>errors_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/error.h" line="181" column="1" bodyfile="include/tvm/ir/error.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1ErrorReporter_1a4d107670ed8defb9386302c8464bc873" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; ObjectRef, std::vector&lt; size_t &gt;, ObjectHash, ObjectEqual &gt;</type>
        <definition>std::unordered_map&lt;ObjectRef, std::vector&lt;size_t&gt;, ObjectHash, ObjectEqual&gt; tvm::ErrorReporter::node_to_error_</definition>
        <argsstring></argsstring>
        <name>node_to_error_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/error.h" line="182" column="1" bodyfile="include/tvm/ir/error.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1ErrorReporter_1a92ddfaafdb7637180a050f5b3eeb8f77" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; ObjectRef, <ref refid="classtvm_1_1GlobalVar" kindref="compound">GlobalVar</ref>, ObjectHash, ObjectEqual &gt;</type>
        <definition>std::unordered_map&lt;ObjectRef, GlobalVar, ObjectHash, ObjectEqual&gt; tvm::ErrorReporter::node_to_gv_</definition>
        <argsstring></argsstring>
        <name>node_to_gv_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/error.h" line="183" column="1" bodyfile="include/tvm/ir/error.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1ErrorReporter_1aed0af73c114daa93db994ce2cfdc3fda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::ErrorReporter::ErrorReporter</definition>
        <argsstring>()</argsstring>
        <name>ErrorReporter</name>
        <briefdescription>
<para>default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/error.h" line="115" column="1" bodyfile="include/tvm/ir/error.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1ErrorReporter_1ae2ec8c3bc8f31aa8495e81847981ed98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::ErrorReporter::Report</definition>
        <argsstring>(const Error &amp;err)</argsstring>
        <name>Report</name>
        <param>
          <type>const <ref refid="classtvm_1_1Error" kindref="compound">Error</ref> &amp;</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>Report a <ref refid="classtvm_1_1Error" kindref="compound">tvm::Error</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This API is useful for reporting spanned errors.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>The error to report. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/error.h" line="124" column="1" bodyfile="include/tvm/ir/error.h" bodystart="124" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1ErrorReporter_1a3e1c300e60077c38bc9540dddcd1a019" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::ErrorReporter::ReportAt</definition>
        <argsstring>(const GlobalVar &amp;global, const ObjectRef &amp;node, std::stringstream &amp;err)</argsstring>
        <name>ReportAt</name>
        <param>
          <type>const <ref refid="classtvm_1_1GlobalVar" kindref="compound">GlobalVar</ref> &amp;</type>
          <declname>global</declname>
        </param>
        <param>
          <type>const ObjectRef &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::stringstream &amp;</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>Report an error against a program, using the full program error reporting strategy. </para>        </briefdescription>
        <detaileddescription>
<para>This error reporting method requires the global function in which to report an error, the expression to report the error on, and the error object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global</parametername>
</parameternamelist>
<parameterdescription>
<para>The global function in which the expression is contained. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The expression or type to report the error at. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>The error message to report. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/error.h" line="144" column="1" bodyfile="include/tvm/ir/error.h" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1ErrorReporter_1a844e1046cde72f227948f429852cde3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::ErrorReporter::ReportAt</definition>
        <argsstring>(const GlobalVar &amp;global, const ObjectRef &amp;node, const Error &amp;err)</argsstring>
        <name>ReportAt</name>
        <param>
          <type>const <ref refid="classtvm_1_1GlobalVar" kindref="compound">GlobalVar</ref> &amp;</type>
          <declname>global</declname>
        </param>
        <param>
          <type>const ObjectRef &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Error" kindref="compound">Error</ref> &amp;</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>Report an error against a program, using the full program error reporting strategy. </para>        </briefdescription>
        <detaileddescription>
<para>This error reporting method requires the global function in which to report an error, the expression to report the error on, and the error object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global</parametername>
</parameternamelist>
<parameterdescription>
<para>The global function in which the expression is contained. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The expression or type to report the error at. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>The error to report. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/error.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1ErrorReporter_1a54699ec5f538bd207b5aa4e3f55181c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::ErrorReporter::RenderErrors</definition>
        <argsstring>(const IRModule &amp;module, bool use_color=true)</argsstring>
        <name>RenderErrors</name>
        <param>
          <type>const <ref refid="classtvm_1_1IRModule" kindref="compound">IRModule</ref> &amp;</type>
          <declname>module</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_color</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Render all reported errors and exit the program. </para>        </briefdescription>
        <detaileddescription>
<para>This function should be used after executing a pass to render reported errors.</para><para>It will build an error message from the set of errors, depending on the error reporting strategy.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>module</parametername>
</parameternamelist>
<parameterdescription>
<para>The module to report errors on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_color</parametername>
</parameternamelist>
<parameterdescription>
<para>Controls whether to colorize the output. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/error.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1ErrorReporter_1a7ec11efb5e9680cfd57e05d573fc0927" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::ErrorReporter::AnyErrors</definition>
        <argsstring>()</argsstring>
        <name>AnyErrors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/error.h" line="176" column="1" bodyfile="include/tvm/ir/error.h" bodystart="176" bodyend="178"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An abstraction around how errors are stored and reported. Designed to be opaque to users, so we can support a robust and simpler error reporting mode, as well as a more complex mode. </para>    </briefdescription>
    <detaileddescription>
<para>The first mode is the most accurate: we report a Relay error at a specific <ref refid="classtvm_1_1Span" kindref="compound">Span</ref>, and then render the error message directly against a textual representation of the program, highlighting the exact lines in which it occurs. This mode is not implemented in this PR and will not work.</para><para>The second mode is a general-purpose mode, which attempts to annotate the program&apos;s textual format with errors.</para><para>The final mode represents the old mode, if we report an error that has no span or expression, we will default to throwing an exception with a textual representation of the error and no indication of where it occurred in the original program.</para><para>The latter mode is not ideal, and the goal of the new error reporting machinery is to avoid ever reporting errors in this style. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="4954">
        <label>tvm::ErrorReporter</label>
        <link refid="classtvm_1_1ErrorReporter"/>
      </node>
    </collaborationgraph>
    <location file="include/tvm/ir/error.h" line="112" column="1" bodyfile="include/tvm/ir/error.h" bodystart="112" bodyend="184"/>
    <listofallmembers>
      <member refid="classtvm_1_1ErrorReporter_1a7ec11efb5e9680cfd57e05d573fc0927" prot="public" virt="non-virtual"><scope>tvm::ErrorReporter</scope><name>AnyErrors</name></member>
      <member refid="classtvm_1_1ErrorReporter_1aed0af73c114daa93db994ce2cfdc3fda" prot="public" virt="non-virtual"><scope>tvm::ErrorReporter</scope><name>ErrorReporter</name></member>
      <member refid="classtvm_1_1ErrorReporter_1af3fee3e5548b39d315eb0e1889e3c8b6" prot="private" virt="non-virtual"><scope>tvm::ErrorReporter</scope><name>errors_</name></member>
      <member refid="classtvm_1_1ErrorReporter_1a4d107670ed8defb9386302c8464bc873" prot="private" virt="non-virtual"><scope>tvm::ErrorReporter</scope><name>node_to_error_</name></member>
      <member refid="classtvm_1_1ErrorReporter_1a92ddfaafdb7637180a050f5b3eeb8f77" prot="private" virt="non-virtual"><scope>tvm::ErrorReporter</scope><name>node_to_gv_</name></member>
      <member refid="classtvm_1_1ErrorReporter_1a54699ec5f538bd207b5aa4e3f55181c6" prot="public" virt="non-virtual"><scope>tvm::ErrorReporter</scope><name>RenderErrors</name></member>
      <member refid="classtvm_1_1ErrorReporter_1ae2ec8c3bc8f31aa8495e81847981ed98" prot="public" virt="non-virtual"><scope>tvm::ErrorReporter</scope><name>Report</name></member>
      <member refid="classtvm_1_1ErrorReporter_1a3e1c300e60077c38bc9540dddcd1a019" prot="public" virt="non-virtual"><scope>tvm::ErrorReporter</scope><name>ReportAt</name></member>
      <member refid="classtvm_1_1ErrorReporter_1a844e1046cde72f227948f429852cde3e" prot="public" virt="non-virtual"><scope>tvm::ErrorReporter</scope><name>ReportAt</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
