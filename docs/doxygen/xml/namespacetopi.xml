<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespacetopi" kind="namespace" language="C++">
    <compoundname>topi</compoundname>
    <innernamespace refid="namespacetopi_1_1contrib">topi::contrib</innernamespace>
    <innernamespace refid="namespacetopi_1_1cuda">topi::cuda</innernamespace>
    <innernamespace refid="namespacetopi_1_1generic">topi::generic</innernamespace>
    <innernamespace refid="namespacetopi_1_1nn">topi::nn</innernamespace>
    <innernamespace refid="namespacetopi_1_1rocm">topi::rocm</innernamespace>
    <innernamespace refid="namespacetopi_1_1vision">topi::vision</innernamespace>
    <innernamespace refid="namespacetopi_1_1x86">topi::x86</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacetopi_1a4d0f5ddce836d926393ac3d154170ef6" prot="public" static="no">
        <type>std::function&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref>(<ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> source, const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> &gt; &amp;axis)&gt;</type>
        <definition>using topi::FReduce = typedef std::function&lt;PrimExpr(PrimExpr source, const Array&lt;IterVar&gt;&amp; axis)&gt;</definition>
        <argsstring></argsstring>
        <name>FReduce</name>
        <briefdescription>
<para>The operation to use for CommReduce. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="45" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetopi_1a8baac534d5ff12a20f089736a0e60f14" prot="public" static="no">
        <type>std::function&lt; <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt;(<ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt; exprs, const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> &gt; &amp;axis, <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> *condition)&gt;</type>
        <definition>using topi::FCommReduce = typedef std::function&lt; Array&lt;PrimExpr&gt;(Array&lt;PrimExpr&gt; exprs, const Array&lt;IterVar&gt;&amp; axis, PrimExpr* condition)&gt;</definition>
        <argsstring></argsstring>
        <name>FCommReduce</name>
        <briefdescription>
<para>The operation to use for CommReduceIdx. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="48" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetopi_1afa9b3b014bd552948f6fd671465901fa" prot="public" static="no">
        <type>std::function&lt; <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt;(<ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> &gt; lhs, <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> &gt; rhs)&gt;</type>
        <definition>using topi::FCombine = typedef std::function&lt;Array&lt;PrimExpr&gt;(Array&lt;Var&gt; lhs, Array&lt;Var&gt; rhs)&gt;</definition>
        <argsstring></argsstring>
        <name>FCombine</name>
        <briefdescription>
<para>A combiner function for a reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="265" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetopi_1a180676c7dc5c5716056719a58b60ca2c" prot="public" static="no">
        <type>std::function&lt; <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt;(std::vector&lt; <ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref> &gt; types)&gt;</type>
        <definition>using topi::FIdentity = typedef std::function&lt;Array&lt;PrimExpr&gt;(std::vector&lt;DataType&gt; types)&gt;</definition>
        <argsstring></argsstring>
        <name>FIdentity</name>
        <briefdescription>
<para>An initializer function for a reduction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="268" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" prot="public" static="no" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto topi::kElementWise</definition>
        <argsstring></argsstring>
        <name>kElementWise</name>
        <initializer>= &quot;elemwise&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/tags.h" line="31" column="1" bodyfile="topi/include/topi/tags.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" prot="public" static="no" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto topi::kInjective</definition>
        <argsstring></argsstring>
        <name>kInjective</name>
        <initializer>= &quot;injective&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/tags.h" line="32" column="1" bodyfile="topi/include/topi/tags.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetopi_1ae57dced7232a8ef1f94cd669c72e0093" prot="public" static="no" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto topi::kCommReduce</definition>
        <argsstring></argsstring>
        <name>kCommReduce</name>
        <initializer>= &quot;comm_reduce&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/tags.h" line="33" column="1" bodyfile="topi/include/topi/tags.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetopi_1aaf18db0af5abc7dd13818115bac402bc" prot="public" static="no" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto topi::kCommReduceIdx</definition>
        <argsstring></argsstring>
        <name>kCommReduceIdx</name>
        <initializer>= &quot;comm_reduce_idx&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/tags.h" line="34" column="1" bodyfile="topi/include/topi/tags.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" prot="public" static="no" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto topi::kBroadcast</definition>
        <argsstring></argsstring>
        <name>kBroadcast</name>
        <initializer>= &quot;broadcast&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/tags.h" line="35" column="1" bodyfile="topi/include/topi/tags.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetopi_1a06a6892f5e4681142f0c08b0af32499d" prot="public" static="no" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto topi::kMatMul</definition>
        <argsstring></argsstring>
        <name>kMatMul</name>
        <initializer>= &quot;matmul&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/tags.h" line="36" column="1" bodyfile="topi/include/topi/tags.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetopi_1a8e842c3723b0ad6b2fb82ecb98b8a1c2" prot="public" static="no" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto topi::kConv2dNCHW</definition>
        <argsstring></argsstring>
        <name>kConv2dNCHW</name>
        <initializer>= &quot;conv2d_nchw&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/tags.h" line="37" column="1" bodyfile="topi/include/topi/tags.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetopi_1a0a63c3748ea82acd5eef2b608c83e165" prot="public" static="no" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto topi::kConv2dHWCN</definition>
        <argsstring></argsstring>
        <name>kConv2dHWCN</name>
        <initializer>= &quot;conv2d_hwcn&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/tags.h" line="38" column="1" bodyfile="topi/include/topi/tags.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetopi_1a12dcb067885b89c536ae094569e8e3fb" prot="public" static="no" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto topi::kDepthwiseConv2dNCHW</definition>
        <argsstring></argsstring>
        <name>kDepthwiseConv2dNCHW</name>
        <initializer>= &quot;depthwise_conv2d_nchw&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/tags.h" line="39" column="1" bodyfile="topi/include/topi/tags.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetopi_1a00fa259c7a4c72504f9ac906062e9ebc" prot="public" static="no" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto topi::kDepthwiseConv2dNHWC</definition>
        <argsstring></argsstring>
        <name>kDepthwiseConv2dNHWC</name>
        <initializer>= &quot;depthwise_conv2d_nhwc&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/tags.h" line="40" column="1" bodyfile="topi/include/topi/tags.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetopi_1a5c20df4059bd823e003dfede11762473" prot="public" static="no" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto topi::kDepthwiseConv2dBackInputNHWC</definition>
        <argsstring></argsstring>
        <name>kDepthwiseConv2dBackInputNHWC</name>
        <initializer>= &quot;depthwise_conv2d_back_input_nhwc&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/tags.h" line="41" column="1" bodyfile="topi/include/topi/tags.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetopi_1a1676476ab91b608188918f5d267f1d07" prot="public" static="no" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto topi::kDepthwiseConv2dBackWeightNHWC</definition>
        <argsstring></argsstring>
        <name>kDepthwiseConv2dBackWeightNHWC</name>
        <initializer>= &quot;depthwise_conv2d_back_weight_nhwc&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/tags.h" line="42" column="1" bodyfile="topi/include/topi/tags.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetopi_1a4147e63b5ce67e3340ed5096bf6b9455" prot="public" static="no" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto topi::kGroupConv2d</definition>
        <argsstring></argsstring>
        <name>kGroupConv2d</name>
        <initializer>= &quot;group_conv2d&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/tags.h" line="43" column="1" bodyfile="topi/include/topi/tags.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacetopi_1abab02d4352666a313c80a1cf73bdec26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::broadcast_to</definition>
        <argsstring>(const tvm::te::Tensor &amp;t, const tvm::Array&lt; tvm::PrimExpr &gt; &amp;output_shape, std::string name=&quot;T_broadcast_to&quot;, std::string tag=kBroadcast)</argsstring>
        <name>broadcast_to</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">tvm::Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &gt; &amp;</type>
          <declname>output_shape</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_broadcast_to&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that broadcasts a tensor into a compatible shape according to numpy&apos;s rules. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The target output shape, must be compatible </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is a broadcast operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="47" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="47" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a663f04b71464b8bb32a9498a71733200" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::logical_and</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>logical_and</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="126" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a941e2e9f9494ab3e52017c3e1ea8b257" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::logical_and</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;logical_and&quot;, std::string tag=kBroadcast)</argsstring>
        <name>logical_and</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;logical_and&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="126" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a587cfeafa2eafa93be14e246779054fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::logical_and</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;logical_and&quot;, std::string tag=kElementWise)</argsstring>
        <name>logical_and</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;logical_and&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="126" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1abfd4456eb091b8150cd8e324b276e8b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::logical_and</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;logical_and&quot;, std::string tag=kElementWise)</argsstring>
        <name>logical_and</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;logical_and&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="126" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aa0ee9998fef4c3e13bce7e73291617e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator&amp;&amp;</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="127" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a8f0608df533871f5ee5d941f74b2d202" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator&amp;&amp;</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="127" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a1c7800d681e491b45954820baf249ae4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator&amp;&amp;</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B)</argsstring>
        <name>operator&amp;&amp;</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="127" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ac1866543337af365604bc7215a7cf30b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::logical_or</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>logical_or</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="140" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a28985bec49b9d1ba6dee9544d87553a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::logical_or</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;logical_or&quot;, std::string tag=kBroadcast)</argsstring>
        <name>logical_or</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;logical_or&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="140" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aa9bfdd6e73160efc632abc0a3c17c601" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::logical_or</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;logical_or&quot;, std::string tag=kElementWise)</argsstring>
        <name>logical_or</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;logical_or&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="140" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a2facc2b601530e674e5dd903ed5dcc83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::logical_or</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;logical_or&quot;, std::string tag=kElementWise)</argsstring>
        <name>logical_or</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;logical_or&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="140" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a291b2f1db6f4072190a3c0100069f3cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator||</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="141" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1af5aeed86f0e3adba1c78778e04692190" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator||</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="141" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a7eb1ec922ee948b74be83603601801df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator||</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B)</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="141" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1adb0b26a18049c20f4c704ffdcfd9b26a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::bitwise_and</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>bitwise_and</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="154" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a4963bfc6eba6bab48c51bb8a1a492f0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::bitwise_and</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;bitwise_and&quot;, std::string tag=kBroadcast)</argsstring>
        <name>bitwise_and</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;bitwise_and&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="154" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aeb77b0e9c82f6c4845637b60e2d2a508" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::bitwise_and</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;bitwise_and&quot;, std::string tag=kElementWise)</argsstring>
        <name>bitwise_and</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;bitwise_and&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="154" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a1942bddbf6c9c1ca1be1aa49359f67ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::bitwise_and</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;bitwise_and&quot;, std::string tag=kElementWise)</argsstring>
        <name>bitwise_and</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;bitwise_and&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="154" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ab4549df75d9370cb59242a929d263a40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator&amp;</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="155" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1afa1f2ad2e107aec4303ea8d67e4106cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator&amp;</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="155" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a6b148b2746c34daba96f3cd914f50061" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator&amp;</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="155" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a8739fc442527f4063babae06a9b98c82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::bitwise_or</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>bitwise_or</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="168" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a942d7876a21c5fd9afaaf4f12b48490f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::bitwise_or</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;bitwise_or&quot;, std::string tag=kBroadcast)</argsstring>
        <name>bitwise_or</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;bitwise_or&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="168" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a5866fbecfd3d0e818b51675164d75589" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::bitwise_or</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;bitwise_or&quot;, std::string tag=kElementWise)</argsstring>
        <name>bitwise_or</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;bitwise_or&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="168" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a1cd6cd15c8db13b9a8bd5da9b2c543a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::bitwise_or</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;bitwise_or&quot;, std::string tag=kElementWise)</argsstring>
        <name>bitwise_or</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;bitwise_or&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="168" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a9ed8c13bf4a785bdfa4eee78c639ffae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator|</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="169" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a3f4843ae319362c30025db55bd9f88b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator|</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="169" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a8dc63da362b9f0a9f81d40e075e47997" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator|</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="169" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ad8c706a823afc470753cabb9007925ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::bitwise_xor</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>bitwise_xor</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="182" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1afab59c4a374a18e7bccfe730e308b747" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::bitwise_xor</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;bitwise_xor&quot;, std::string tag=kBroadcast)</argsstring>
        <name>bitwise_xor</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;bitwise_xor&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="182" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ad031c8302d5f3f8af44736623513847c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::bitwise_xor</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;bitwise_xor&quot;, std::string tag=kElementWise)</argsstring>
        <name>bitwise_xor</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;bitwise_xor&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="182" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a1dfdb80cfffa32f36e1c491c1b050688" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::bitwise_xor</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;bitwise_xor&quot;, std::string tag=kElementWise)</argsstring>
        <name>bitwise_xor</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;bitwise_xor&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="182" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a9b0a7209ba4948e2a93a0f4ef8cfff96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator^</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="183" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a35bf01e8dc4855d30b28c0818d6bf441" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator^</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="183" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a24c2f0fcea7e4d0160bbc1460aacb0ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator^</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="183" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aa894e21659f08e663915f88a16f64b2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::add</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="196" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a0beda9e0b06f230d7a9e7af6f1954fde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::add</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;add&quot;, std::string tag=kBroadcast)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;add&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="196" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ab5869dabbd57cf8dddd720a22f7c6ef0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::add</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;add&quot;, std::string tag=kElementWise)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;add&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="196" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ad0606e6f2b4fb7fa08ef1b3713b35ebc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::add</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;add&quot;, std::string tag=kElementWise)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;add&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="196" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a9421cf0b3bfbbc0ca254232def067aa7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator+</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="197" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a44be2986ea7f7649b18085966f21208b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator+</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="197" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ae695da6463ef2cc5f53595addc2eeb8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator+</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="197" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aae35ca7f2b19e58bfa1fe5af449380d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::subtract</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>subtract</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="210" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="210" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1abf2447034575fb315933905fb83e214e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::subtract</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;subtract&quot;, std::string tag=kBroadcast)</argsstring>
        <name>subtract</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;subtract&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="210" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="210" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a1790501ccce2bc4fc3b2349ce2ac47a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::subtract</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;subtract&quot;, std::string tag=kElementWise)</argsstring>
        <name>subtract</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;subtract&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="210" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="210" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a130a3a82be00c6e92bfb3091d950115d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::subtract</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;subtract&quot;, std::string tag=kElementWise)</argsstring>
        <name>subtract</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;subtract&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="210" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="210" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a2508d6ce372f5ea002854d0b55a56088" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator-</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="211" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aee9a45f2ccc19bb83a737d897dfb92c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator-</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="211" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a53d191aeb501d1518deef6fb240f9871" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator-</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="211" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ac3e9e4fa02b05853c13be69ec595aad7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::multiply</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>multiply</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="224" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="224" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a3ab00c6b819b503212be1c9c0f6253d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::multiply</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;multiply&quot;, std::string tag=kBroadcast)</argsstring>
        <name>multiply</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;multiply&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="224" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="224" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a4adfe523589e41a89d7a98aa56fb17b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::multiply</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;multiply&quot;, std::string tag=kElementWise)</argsstring>
        <name>multiply</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;multiply&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="224" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="224" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a91b5fb70ebd79ef901464795ef3abfc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::multiply</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;multiply&quot;, std::string tag=kElementWise)</argsstring>
        <name>multiply</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;multiply&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="224" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="224" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a65ef01a87472380d8fb282bc16061583" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator*</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="225" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a14b5d16d00a8b668c19e440a86a0244f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator*</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="225" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a33baa22e21f625b772b34cf99b234d6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator*</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="225" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ab98c1bef2250b920060a8d92f2db2d93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::divide</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="238" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="238" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a05b9306831fc8eba0b3796252129430e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::divide</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;divide&quot;, std::string tag=kBroadcast)</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;divide&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="238" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="238" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a5907acb7699792da001c148fc85390f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::divide</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;divide&quot;, std::string tag=kElementWise)</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;divide&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="238" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="238" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a6f29afd22f13ef5cec1c247c93381199" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::divide</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;divide&quot;, std::string tag=kElementWise)</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;divide&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="238" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="238" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a3927c7edf09081a9520e0d628b3cff5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::floor_divide</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>floor_divide</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="257" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="257" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a953e84d36db651582dfc937503977ab6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::floor_divide</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;floor_divide&quot;, std::string tag=kBroadcast)</argsstring>
        <name>floor_divide</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;floor_divide&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="257" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="257" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a2b87ca19eaf119df8ba4706311896e59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::floor_divide</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;floor_divide&quot;, std::string tag=kElementWise)</argsstring>
        <name>floor_divide</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;floor_divide&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="257" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="257" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a2d719758884cddb6a8ec9c96652364d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::floor_divide</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;floor_divide&quot;, std::string tag=kElementWise)</argsstring>
        <name>floor_divide</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;floor_divide&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="257" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="257" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ab32a7a76e3a94a1edba52436a1337cb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::mod</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>mod</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="270" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a2143f0a5c559d79ee01ec4272d0bab51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::mod</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;mod&quot;, std::string tag=kBroadcast)</argsstring>
        <name>mod</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;mod&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="270" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a41c5164cc0d0a150a73f5a08a3ee69de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::mod</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;mod&quot;, std::string tag=kElementWise)</argsstring>
        <name>mod</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;mod&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="270" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ad39f0ac84fdb807b897f937ca5c22794" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::mod</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;mod&quot;, std::string tag=kElementWise)</argsstring>
        <name>mod</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;mod&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="270" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a83fe39f90c5576ae3060e8a5489d2f39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::floor_mod</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>floor_mod</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="289" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="289" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a91e645518d03e0858c6ad492448fabbb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::floor_mod</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;floor_mod&quot;, std::string tag=kBroadcast)</argsstring>
        <name>floor_mod</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;floor_mod&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="289" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="289" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a2f063477e8aec5336ad04608557ebeac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::floor_mod</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;floor_mod&quot;, std::string tag=kElementWise)</argsstring>
        <name>floor_mod</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;floor_mod&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="289" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="289" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ae25ae66b5fc09f84349cd19408f7c9e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::floor_mod</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;floor_mod&quot;, std::string tag=kElementWise)</argsstring>
        <name>floor_mod</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;floor_mod&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="289" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="289" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a09126c7373a571b8f24e8206c24e6bf5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::maximum</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>maximum</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="302" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a5001dfca5d1dc9f53129e4f68f09e007" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::maximum</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;maximum&quot;, std::string tag=kBroadcast)</argsstring>
        <name>maximum</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;maximum&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="302" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1adad7c1ee8b41849ee87b48a8555f2fe9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::maximum</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;maximum&quot;, std::string tag=kElementWise)</argsstring>
        <name>maximum</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;maximum&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="302" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a4492e0c372c88ca8445ea287fb70f033" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::maximum</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;maximum&quot;, std::string tag=kElementWise)</argsstring>
        <name>maximum</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;maximum&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="302" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1afab96b6fc623d4bbb98bd381435d4dea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::minimum</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>minimum</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="315" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a95b143a6c45b5a4c0b6c7e2f091385a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::minimum</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;minimum&quot;, std::string tag=kBroadcast)</argsstring>
        <name>minimum</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;minimum&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="315" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a1108b5cf17036661a85858f3f746e6d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::minimum</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;minimum&quot;, std::string tag=kElementWise)</argsstring>
        <name>minimum</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;minimum&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="315" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a01fdc8ce8ff2295e10cb89de23c3da98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::minimum</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;minimum&quot;, std::string tag=kElementWise)</argsstring>
        <name>minimum</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;minimum&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="315" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a042879ca152f316c9d19f941dbdf7582" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::power</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>power</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="328" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ab097639aeae60327021acd270dc4d0d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::power</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;power&quot;, std::string tag=kBroadcast)</argsstring>
        <name>power</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;power&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="328" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ab8c5863a2b0ac76f71ef0004c04d4aa7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::power</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;power&quot;, std::string tag=kElementWise)</argsstring>
        <name>power</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;power&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="328" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1af600fbd4945257ba8de0ac4f17e89506" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::power</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;power&quot;, std::string tag=kElementWise)</argsstring>
        <name>power</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;power&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="328" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a78a4d7cbe5668db729e1acf831c79034" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::left_shift</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>left_shift</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="341" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="341" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a8364df3a53ff3b0cc8226bf6c45e529a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::left_shift</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;left_shift&quot;, std::string tag=kBroadcast)</argsstring>
        <name>left_shift</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;left_shift&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="341" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="341" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ac3e5c6f24dc7909af275a0d2e5e6e6d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::left_shift</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;left_shift&quot;, std::string tag=kElementWise)</argsstring>
        <name>left_shift</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;left_shift&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="341" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="341" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a6fe04cd61879c2114ce70eaaf4caa07c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::left_shift</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;left_shift&quot;, std::string tag=kElementWise)</argsstring>
        <name>left_shift</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;left_shift&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="341" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="341" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ad65b1595bb2397770a380e28b6a1f685" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator&lt;&lt;</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="342" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="342" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ab9753026296c10c822825be2f6db7179" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator&lt;&lt;</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="342" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="342" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a17214322c35cdcc16af23a1d7d37c50c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator&lt;&lt;</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="342" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="342" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a14301866288307e63c2ab414e67f6be3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::right_shift</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>right_shift</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="355" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="355" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a5ed12e6692ff6d2fda9b3b4b4cd15d32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::right_shift</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;right_shift&quot;, std::string tag=kBroadcast)</argsstring>
        <name>right_shift</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;right_shift&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="355" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="355" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a7d451c0ffc35dbe717f09342948853af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::right_shift</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;right_shift&quot;, std::string tag=kElementWise)</argsstring>
        <name>right_shift</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;right_shift&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="355" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="355" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ae7574a7a362e9ee9e4f0b5a2de12e908" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::right_shift</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;right_shift&quot;, std::string tag=kElementWise)</argsstring>
        <name>right_shift</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;right_shift&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="355" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="355" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a6d217675be3a42053c57aae4f65a299b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator&gt;&gt;</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="356" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="356" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aca0b19963be41f5643ecc0a8038a79f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator&gt;&gt;</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="356" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="356" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a276bae55f5c7dbf86196488820ef88bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::operator&gt;&gt;</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="356" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="356" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a9bdc92081dabc451c196060d72aab223" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::greater</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>greater</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="369" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="369" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a3a979d52d34e06216e681214d1131ab8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::greater</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;greater&quot;, std::string tag=kBroadcast)</argsstring>
        <name>greater</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;greater&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="369" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="369" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1abe01260ad1cf0d3e0d8605798cde1f82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::greater</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;greater&quot;, std::string tag=kElementWise)</argsstring>
        <name>greater</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;greater&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="369" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="369" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aa77b5534818ae7616e8c14fbb3ef1fad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::greater</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;greater&quot;, std::string tag=kElementWise)</argsstring>
        <name>greater</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;greater&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="369" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="369" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a6b003a9c4154ba0040d916918eecb7fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::less</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>less</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="382" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="382" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aa8c87beb1aa5b4f5554b63776a87f9de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::less</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;less&quot;, std::string tag=kBroadcast)</argsstring>
        <name>less</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;less&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="382" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="382" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a8a053740ae2ffedf46b89b88ac0beae4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::less</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;less&quot;, std::string tag=kElementWise)</argsstring>
        <name>less</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;less&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="382" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="382" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a83bebba2755a6399289bf9a2648c9498" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::less</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;less&quot;, std::string tag=kElementWise)</argsstring>
        <name>less</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;less&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="382" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="382" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ae10e1fb8c765a9ae15c12f45199375b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::equal</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="395" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="395" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a74898d56b1d5ef2c07812764242d6271" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::equal</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;equal&quot;, std::string tag=kBroadcast)</argsstring>
        <name>equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;equal&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="395" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="395" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1afde3cae32ad2ca96b5bd0b32d9706280" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::equal</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;equal&quot;, std::string tag=kElementWise)</argsstring>
        <name>equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;equal&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="395" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="395" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ae2d6d5ecbff7ee50dfa45a81e3b691c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::equal</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;equal&quot;, std::string tag=kElementWise)</argsstring>
        <name>equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;equal&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="395" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="395" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a19da66c62c01b4c51d8db2e35b075b09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::not_equal</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>not_equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="408" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="408" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a4e3a9e0cc46debf8668f8d58fe4b395f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::not_equal</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;not_equal&quot;, std::string tag=kBroadcast)</argsstring>
        <name>not_equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;not_equal&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="408" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="408" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1af9d75d4f33a429452fc55d34163e2c15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::not_equal</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;not_equal&quot;, std::string tag=kElementWise)</argsstring>
        <name>not_equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;not_equal&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="408" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="408" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a0042af518f55a13e0c08b6eef85ec477" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::not_equal</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;not_equal&quot;, std::string tag=kElementWise)</argsstring>
        <name>not_equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;not_equal&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="408" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="408" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a1b031e71272376edbdde858787b91b34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::greater_equal</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>greater_equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="421" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="421" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1af041ca602856c6fee22f5cc03add4f00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::greater_equal</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;greater_equal&quot;, std::string tag=kBroadcast)</argsstring>
        <name>greater_equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;greater_equal&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="421" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="421" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a7bae0803e356e565dfc1edf049748172" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::greater_equal</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;greater_equal&quot;, std::string tag=kElementWise)</argsstring>
        <name>greater_equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;greater_equal&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="421" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="421" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a4c9cd0d863c5d4cc9905deac1898164f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::greater_equal</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;greater_equal&quot;, std::string tag=kElementWise)</argsstring>
        <name>greater_equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;greater_equal&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="421" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="421" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a7ca4a60628a697c7e589d2fe78984650" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref></type>
        <definition>tvm::PrimExpr topi::less_equal</definition>
        <argsstring>(const tvm::PrimExpr &amp;a, const tvm::PrimExpr &amp;b)</argsstring>
        <name>less_equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="434" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="434" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a7606c738f17b2e3551ac1ae7ed9a1b1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::less_equal</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;less_equal&quot;, std::string tag=kBroadcast)</argsstring>
        <name>less_equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;less_equal&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="434" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="434" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a3f1327711603ec3e437e3bbf83ce543e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::less_equal</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::PrimExpr &amp;B, std::string name=&quot;T_&quot;&quot;less_equal&quot;, std::string tag=kElementWise)</argsstring>
        <name>less_equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;less_equal&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="434" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="434" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1adae651be9016267aab069698c2df1d78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::less_equal</definition>
        <argsstring>(const tvm::PrimExpr &amp;A, const tvm::te::Tensor &amp;B, std::string name=&quot;T_&quot;&quot;less_equal&quot;, std::string tag=kElementWise)</argsstring>
        <name>less_equal</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;less_equal&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/broadcast.h" line="434" column="1" bodyfile="topi/include/topi/broadcast.h" bodystart="434" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a6c81e9f70678673736d57a3951eb5a27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::exp</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;exp&quot;, std::string tag=kElementWise)</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;exp&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="47" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a53573f63480717b1d30c474c0ca4ec2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::erf</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;erf&quot;, std::string tag=kElementWise)</argsstring>
        <name>erf</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;erf&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="48" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a15b253d8fcbcef6ff51ed961e3335305" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::sigmoid</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;sigmoid&quot;, std::string tag=kElementWise)</argsstring>
        <name>sigmoid</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;sigmoid&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="49" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a99c914006a93f0a67619105c8a9c60dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::sqrt</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;sqrt&quot;, std::string tag=kElementWise)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;sqrt&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="50" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ac2472cb0d5b8deb69bde85866e712863" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::log</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;log&quot;, std::string tag=kElementWise)</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;log&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="51" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1acd86f6a79bf0f7cdb1296ae7829f8307" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::floor</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;floor&quot;, std::string tag=kElementWise)</argsstring>
        <name>floor</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;floor&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="52" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a4766e1050dc67d63cb8a945d1fbb4a27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::ceil</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;ceil&quot;, std::string tag=kElementWise)</argsstring>
        <name>ceil</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;ceil&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="53" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a52c0e224551415ba90fb1a3f5db288c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::round</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;round&quot;, std::string tag=kElementWise)</argsstring>
        <name>round</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;round&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="54" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aa1c0d966d270dcd7802f765886baf5b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::trunc</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;trunc&quot;, std::string tag=kElementWise)</argsstring>
        <name>trunc</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;trunc&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="55" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a2784fda0b30c6fdf925e92e246b10508" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::abs</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;abs&quot;, std::string tag=kElementWise)</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;abs&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="56" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a90f0c42afb12c3d7f1256154cb8e0b7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::cos</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;cos&quot;, std::string tag=kElementWise)</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;cos&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="57" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a003324fc758b6f65294aeb7a9b7ada9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::tan</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;tan&quot;, std::string tag=kElementWise)</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;tan&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="58" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a10ca4bd733a98424cef7953bc9236dfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::sin</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;sin&quot;, std::string tag=kElementWise)</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;sin&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="59" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a0b3d467c4c95817d68fd2887ca0ecd8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::atan</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;atan&quot;, std::string tag=kElementWise)</argsstring>
        <name>atan</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;atan&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="60" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a45876b65f453b816e8f136c749bb650b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::isnan</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;isnan&quot;, std::string tag=kElementWise)</argsstring>
        <name>isnan</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;isnan&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="61" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ab5cb2628d1686589c27254ce1767fa91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::tanh</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;tanh&quot;, std::string tag=kElementWise)</argsstring>
        <name>tanh</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;tanh&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="62" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a4568b2a7240a100189b391e2f968ccc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::isfinite</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;isfinite&quot;, std::string tag=kElementWise)</argsstring>
        <name>isfinite</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;isfinite&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="63" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a28ca1863f504edc2e0f8865ca608569e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::isinf</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_&quot;&quot;isinf&quot;, std::string tag=kElementWise)</argsstring>
        <name>isinf</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_&quot;&quot;isinf&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="64" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a1cfb51ba097f0249f1f81d03bdd52fe2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::fast_tanh_float</definition>
        <argsstring>(const Tensor &amp;in, std::string name, std::string tag)</argsstring>
        <name>fast_tanh_float</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="70" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="70" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ae013a4d1c692ba974eb4c49d53b1a7fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::fast_tanh</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_fast_tanh&quot;, std::string tag=kElementWise)</argsstring>
        <name>fast_tanh</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_fast_tanh&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that returns hyperbolic tanh of a given tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is tanh </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="120" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="120" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a4f5a29ac302ac31ce75e65f21ad60d41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::identity</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_identity&quot;, std::string tag=kElementWise)</argsstring>
        <name>identity</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_identity&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that returns identity of a given tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the identity operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="143" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="143" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a9953d63728137b5bba2ef2832963e411" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::negative</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_negative&quot;, std::string tag=kElementWise)</argsstring>
        <name>negative</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_negative&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that returns the negation of a given tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the negation operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="160" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="160" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a0fb4fd70e46944f4dbcc0cc0790b0146" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::logical_not</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_logical_not&quot;, std::string tag=kElementWise)</argsstring>
        <name>logical_not</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_logical_not&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that returns the logical NOT of a given tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the logical NOT operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="177" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="177" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ab6cd26e240ccecfe8fec12e8107ddc2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::bitwise_not</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_bitwise_not&quot;, std::string tag=kElementWise)</argsstring>
        <name>bitwise_not</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_bitwise_not&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that returns the bitwise NOT of a given tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the bitwise NOT operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="194" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="194" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a673e10ba936f6eafc4a516c95f63da71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::sign</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_sign&quot;, std::string tag=kElementWise)</argsstring>
        <name>sign</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_sign&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Returns the sign of the tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the sign </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="211" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="211" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a795309406565ae282d42f54462c3ece3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::rsqrt</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;tensor&quot;, std::string tag=kElementWise)</argsstring>
        <name>rsqrt</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;tensor&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that returns rsqrt of a given tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the rsqrt operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="233" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="233" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aea1d7c9456b658b57d97f80159ebe773" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::clip</definition>
        <argsstring>(const Tensor &amp;x, const PrimExpr &amp;a_min, const PrimExpr &amp;a_max, std::string name=&quot;T_clip&quot;, std::string tag=kElementWise)</argsstring>
        <name>clip</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a_min</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>a_max</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_clip&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that clips each element of a tensor to the interval [a_min, a_max]. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_min</parametername>
</parameternamelist>
<parameterdescription>
<para>The inclusive lower bound of the interval </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_max</parametername>
</parameternamelist>
<parameterdescription>
<para>The inclusive upper bound of the interval </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the clip operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="254" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="254" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1acfc3df84ca997ccac0f57d50e96c1c06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::cast</definition>
        <argsstring>(const Tensor &amp;x, DataType type, std::string name=&quot;T_cast&quot;, std::string tag=kElementWise)</argsstring>
        <name>cast</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_cast&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Cast each element of x to the given type. If expr is scalar and type is a corresponding vector type, a Broadcast is generated, otherwise a Cast is generated. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to cast to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the cast operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="278" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="278" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aef42f5cbf417ab34e319ff5a3ff7120f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::reinterpret</definition>
        <argsstring>(const Tensor &amp;x, DataType type, std::string name=&quot;tensor&quot;, std::string tag=kElementWise)</argsstring>
        <name>reinterpret</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;tensor&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Reinterpret each element of x to the given type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to cast to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the reinterpret operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="306" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="306" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ae5844b930680196ff3c9cbbedc8a57d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::elemwise_sum</definition>
        <argsstring>(const Array&lt; Tensor &gt; &amp;xs, std::string name=&quot;T_elemwise_sum&quot;, std::string tag=kElementWise)</argsstring>
        <name>elemwise_sum</name>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_elemwise_sum&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that sum each element of a tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the sum operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="325" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="325" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a951ea0de420a6464f5301296735d6980" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::full</definition>
        <argsstring>(const Array&lt; PrimExpr &gt; &amp;shape, DataType dtype, const PrimExpr fill_value, std::string name=&quot;T_full&quot;, std::string tag=kElementWise)</argsstring>
        <name>full</name>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref></type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>fill_value</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_full&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that fill a tensor with fill_value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape of a tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>The Type of fill_value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fill_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the full operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="349" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="349" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a7672df8583ba232093a90d44e337ab32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::full_like</definition>
        <argsstring>(const Tensor &amp;x, const PrimExpr fill_value, std::string name=&quot;T_full_like&quot;, std::string tag=kElementWise)</argsstring>
        <name>full_like</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>fill_value</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_full_like&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that construct a tensor with same shape as input tensor, then fill a tensor with fill_value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fill_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op memeber is the full_like operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="374" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="374" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a20d46dbd3d9b11811db853ee46f44e6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::fast_exp_float32</definition>
        <argsstring>(const Tensor &amp;_x, std::string name, std::string tag)</argsstring>
        <name>fast_exp_float32</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>_x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Fast exponential function implementation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is exponent operation</para></simplesect>
<simplesect kind="note"><para>Function computes: log2(e^x) = x * log2(e) * log2(2) =&gt; log2(e^x) = log2(2^(x*log2(e))) =&gt; e^x = 2^(x*log2(e)) Splitting power x*log2(e) into integer and fractional parts: e^(n+f) = e^n * e^f n = floor(x*log2(e) + 1/2) f = x - n * ln(2) exp(x) = 2^n * exp(y) Approximation for fractional part: y = exp(f) = 1 + 2 * P(x**2)/(Q(x**2) - P(x**2)) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="405" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="405" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ae6d188f262af775d79e3d409bb22045d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::fast_exp</definition>
        <argsstring>(const Tensor &amp;x, std::string name=&quot;T_fast_exp&quot;, std::string tag=kElementWise)</argsstring>
        <name>fast_exp</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_fast_exp&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Fast exponential function implementation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is exponent operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/elemwise.h" line="451" column="1" bodyfile="topi/include/topi/elemwise.h" bodystart="451" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a10d042035b5084fc91bff8ae4f1b0d86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::relu</definition>
        <argsstring>(const tvm::te::Tensor &amp;t, T threshold=static_cast&lt; T &gt;(0), std::string name=&quot;T_relu&quot;, std::string tag=kElementWise)</argsstring>
        <name>relu</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>T</type>
          <declname>threshold</declname>
          <defval>static_cast&lt; T &gt;(0)</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_relu&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that performs a rectified linear unit. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The relu threshold (default 0) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the relu operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/nn.h" line="65" column="1" bodyfile="topi/include/topi/nn.h" bodystart="65" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a21006707a9f93d8b2771b5a10668419f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::leaky_relu</definition>
        <argsstring>(const tvm::te::Tensor &amp;t, double alpha=0.1, std::string name=&quot;T_leaky_relu&quot;, std::string tag=kElementWise)</argsstring>
        <name>leaky_relu</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
          <defval>0.1</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_leaky_relu&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that performs a leaky rectified linear unit. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The slope for the small gradient when t &lt; 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the leaky relu operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/nn.h" line="89" column="1" bodyfile="topi/include/topi/nn.h" bodystart="89" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ab86aad9c64d4739dc541d87ee3904f9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::prelu</definition>
        <argsstring>(const tvm::te::Tensor &amp;x, const tvm::te::Tensor &amp;slope, const int axis=1, std::string name=&quot;T_prelu&quot;, std::string tag=kBroadcast)</argsstring>
        <name>prelu</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>axis</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_prelu&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that performs a parametric rectified linear unit. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input data tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slope</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel-wise slope tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis where the channel data needs to be applied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the parametric relu operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/nn.h" line="115" column="1" bodyfile="topi/include/topi/nn.h" bodystart="115" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a7d9e2d0f526ff451b6df91c6a673f440" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::pad</definition>
        <argsstring>(const tvm::te::Tensor &amp;t, const tvm::Array&lt; tvm::PrimExpr &gt; &amp;pad_before, tvm::Array&lt; tvm::PrimExpr &gt; pad_after=tvm::Array&lt; tvm::PrimExpr &gt;(), PrimExpr pad_value=PrimExpr(), std::string name=&quot;T_pad&quot;, std::string tag=kElementWise, std::string pad_mode=&quot;constant&quot;)</argsstring>
        <name>pad</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">tvm::Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &gt; &amp;</type>
          <declname>pad_before</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">tvm::Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &gt;</type>
          <declname>pad_after</declname>
          <defval><ref refid="classtvm_1_1Array" kindref="compound">tvm::Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>pad_value</declname>
          <defval><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref>()</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_pad&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1ac1b34ed59d38a5f5338bee6b2cad42be" kindref="member">kElementWise</ref></defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>pad_mode</declname>
          <defval>&quot;constant&quot;</defval>
        </param>
        <briefdescription>
<para>Creates an operation that performs padding. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_before</parametername>
</parameternamelist>
<parameterdescription>
<para>An Array of Expr describing the padding before the respective iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_after</parametername>
</parameternamelist>
<parameterdescription>
<para>An Array of Expr describing the padding after the respective iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to fill padding elements with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Padding type to use. &quot;constant&quot; pads with constant_value; &quot;edge&quot; pads using the edge values of the input array; &quot;reflect&quot; pads by reflecting values with respect to the edges. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the padding operation</para></simplesect>
<simplesect kind="note"><para>The pad_after Array must either be empty or have the same length as pad_before When pad_after is empty, it takes the same values as pad_before (symmetric padding) The pad Array applies from the leading dimensions and skips missing trailing dimensions: <verbatim>pad(t(i, j, k), {1}, {0}) returns the equivalent operation for
    the following pseudocode:
        for i in [1, t.shape[0] + 2]:
            for i in [1, t.shape[0] + 2]:
                for i in [1, t.shape[0] + 2]:
                   name(i,j,k) =
                       (1 &lt;= i &lt;= t.shape[0] + 1) ?
                           t(i-1, j, k) : 0;</verbatim> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/nn.h" line="175" column="1" bodyfile="topi/include/topi/nn.h" bodystart="175" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a8a735444c0de6d147a021755033b64dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::conv2d_nchw</definition>
        <argsstring>(const tvm::te::Tensor &amp;I, const tvm::te::Tensor &amp;W, int pad_h=0, int pad_w=0, int stride_h=1, int stride_w=1, std::string name=&quot;T_conv2d_nchw&quot;, std::string tag=kConv2dNCHW)</argsstring>
        <name>conv2d_nchw</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pad_h</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>pad_w</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>stride_h</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>stride_w</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_conv2d_nchw&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a8e842c3723b0ad6b2fb82ecb98b8a1c2" kindref="member">kConv2dNCHW</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that performs a 2-D convolution with an NCHW-layout. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>The 4-D input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>The 4-D weight tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_h</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant padding amount applied to the height of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_w</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant padding amount applied to the width of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_h</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant striding amount applied to the height of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_w</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant strindingamount applied to the width of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the 2-D convolution operation (NCHW layout) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/nn.h" line="278" column="1" bodyfile="topi/include/topi/nn.h" bodystart="278" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a727438671ef6d05e50edb4b01d556da8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::conv2d_hwcn</definition>
        <argsstring>(const tvm::te::Tensor &amp;I, const tvm::te::Tensor &amp;W, int pad_h=0, int pad_w=0, int stride_h=1, int stride_w=1, std::string name=&quot;T_conv2d_hwcn&quot;, std::string tag=kConv2dHWCN)</argsstring>
        <name>conv2d_hwcn</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pad_h</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>pad_w</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>stride_h</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>stride_w</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_conv2d_hwcn&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a0a63c3748ea82acd5eef2b608c83e165" kindref="member">kConv2dHWCN</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation for 2-D convolution layer with an HWCN-layout. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>The 4-D input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>The 4-D weight tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_h</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant padding amount applied to the height of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_w</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant padding amount applied to the width of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_h</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant striding amount applied to the height of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_w</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant strindingamount applied to the width of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the 2-D convolution operation (HWCN layout) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/nn.h" line="329" column="1" bodyfile="topi/include/topi/nn.h" bodystart="329" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a8f9fd494ac9bbb4d174d758b447037d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::depthwise_conv2d_nchw</definition>
        <argsstring>(const tvm::te::Tensor &amp;I, const tvm::te::Tensor &amp;W, int pad_h=0, int pad_w=0, int stride_h=1, int stride_w=1, std::string name=&quot;T_depthwise_conv2d_nchw&quot;, std::string tag=kDepthwiseConv2dNCHW)</argsstring>
        <name>depthwise_conv2d_nchw</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pad_h</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>pad_w</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>stride_h</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>stride_w</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_depthwise_conv2d_nchw&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a12dcb067885b89c536ae094569e8e3fb" kindref="member">kDepthwiseConv2dNCHW</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that performs a 2-D depthwise convolution with an NCHW-layout. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>The 4-D input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>The 4-D weight tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_h</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant padding amount applied to the height of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_w</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant padding amount applied to the width of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_h</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant striding amount applied to the height of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_w</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant strindingamount applied to the width of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the 2-D depthwise convolution operation (NCHW layout) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/nn.h" line="380" column="1" bodyfile="topi/include/topi/nn.h" bodystart="380" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a3bc090c96d064609982d155da4c7a9d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::depthwise_conv2d_nhwc</definition>
        <argsstring>(const tvm::te::Tensor &amp;I, const tvm::te::Tensor &amp;W, int pad_h=0, int pad_w=0, int stride_h=1, int stride_w=1, std::string name=&quot;T_depthwise_conv2d_nhwc&quot;, std::string tag=kDepthwiseConv2dNHWC)</argsstring>
        <name>depthwise_conv2d_nhwc</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pad_h</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>pad_w</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>stride_h</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>stride_w</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_depthwise_conv2d_nhwc&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a00fa259c7a4c72504f9ac906062e9ebc" kindref="member">kDepthwiseConv2dNHWC</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/nn.h" line="413" column="1" bodyfile="topi/include/topi/nn.h" bodystart="413" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aa6c2cdf56a7e63a41e964e91df6a01bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::group_conv2d_ngchw</definition>
        <argsstring>(const tvm::te::Tensor &amp;I, const tvm::te::Tensor &amp;W, int pad_h=0, int pad_w=0, int stride_h=1, int stride_w=1, std::string name=&quot;T_group_conv2d_ngchw&quot;, std::string tag=kGroupConv2d)</argsstring>
        <name>group_conv2d_ngchw</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pad_h</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>pad_w</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>stride_h</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>stride_w</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_group_conv2d_ngchw&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a4147e63b5ce67e3340ed5096bf6b9455" kindref="member">kGroupConv2d</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that performs a 2-D group convolution with an NGCHW-layout. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>The 5-D input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>The 5-D weight tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_h</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant padding amount applied to the height of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pad_w</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant padding amount applied to the width of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_h</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant striding amount applied to the height of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride_w</parametername>
</parameternamelist>
<parameterdescription>
<para>A static constant strindingamount applied to the width of the image, before and after (symmetric padding) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the 2-D groupconvolution operation (NCHW layout) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/nn.h" line="466" column="1" bodyfile="topi/include/topi/nn.h" bodystart="466" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a2c7364c2934ba1b64d9d9a5837e77497" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; topi::GetRealAxis</definition>
        <argsstring>(int ndim, const Array&lt; Integer &gt; &amp;axis)</argsstring>
        <name>GetRealAxis</name>
        <param>
          <type>int</type>
          <declname>ndim</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt; &amp;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>Convert a reduction axis which could be empty or have negative elements into a real axis with valid dimension indices. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ndim</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions in the target. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis parameter.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A non-empty sorted array of valid dimension indices, with no duplicates. If the input axis is empty, the result will be an axis including all dimensions. If any input element is negative, it will be treated as an offset from the last dimension (same as python indexing rules). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="63" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="63" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aa9ac5704585fb8f3592081e0833c9163" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> &gt;</type>
        <definition>Array&lt;IterVar&gt; topi::MakeReduceAxes</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;real_axis, const Tensor &amp;data)</argsstring>
        <name>MakeReduceAxes</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>real_axis</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Enumerate the axes for a reduce op. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="88" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="88" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ab69e23e61282f3e99cacf20b55c57d13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt;</type>
        <definition>Array&lt;PrimExpr&gt; topi::MakeReduceTargetShape</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;real_axis, const Tensor &amp;data, bool keepdims, bool atleast1d)</argsstring>
        <name>MakeReduceTargetShape</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>real_axis</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdims</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>atleast1d</declname>
        </param>
        <briefdescription>
<para>Calculate the target shape for a reduce op. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="99" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="99" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ab5ae1df78350ee84b7dc49922523365d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::DoCommReduce</definition>
        <argsstring>(const Tensor &amp;data, FReduce func, const Array&lt; PrimExpr &gt; &amp;target_shape, const std::vector&lt; int &gt; &amp;reduce_axes, const std::vector&lt; int &gt; &amp;squeeze_axes)</argsstring>
        <name>DoCommReduce</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespacetopi_1a4d0f5ddce836d926393ac3d154170ef6" kindref="member">FReduce</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt; &amp;</type>
          <declname>target_shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>reduce_axes</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>squeeze_axes</declname>
        </param>
        <briefdescription>
<para>Create a reduction operation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The reduction function eg. <ref refid="namespacetvm_1a5cea5eb708bfbfa08e285092e5afdc33" kindref="member">tvm::sum</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The output Tensor shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduce_axes</parametername>
</parameternamelist>
<parameterdescription>
<para>The real axes along which the reduction is performed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>squeeze_axes</parametername>
</parameternamelist>
<parameterdescription>
<para>The real axes to squeeze. Unsqueezed, reduced axes will have shape 1 in the output tensor.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result tensor. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="140" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="140" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a173c99250d923eff68fc63925b575497" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::CommReduce</definition>
        <argsstring>(const Tensor &amp;data, const Array&lt; Integer &gt; &amp;axis, FReduce func, bool keepdims, bool atleast1d)</argsstring>
        <name>CommReduce</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt; &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type><ref refid="namespacetopi_1a4d0f5ddce836d926393ac3d154170ef6" kindref="member">FReduce</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdims</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>atleast1d</declname>
        </param>
        <briefdescription>
<para>Create a reduction operation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axes along which the reduction is performed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The reduction function eg. <ref refid="namespacetvm_1a5cea5eb708bfbfa08e285092e5afdc33" kindref="member">tvm::sum</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keepdims</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is set to true, the axes which are reduced are left in the result as dimensions with size one. This enables the result to broadcast correctly against the input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atleast1d</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the output need to be atleast1d.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result tensor. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="185" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="185" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aa350ed41a0a28c5c90db8ec48b7c3bd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::CommReduceIdx</definition>
        <argsstring>(const Tensor &amp;data, const Array&lt; Integer &gt; &amp;axis, FCommReduce func, bool keepdims, bool atleast1d)</argsstring>
        <name>CommReduceIdx</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt; &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type><ref refid="namespacetopi_1a8baac534d5ff12a20f089736a0e60f14" kindref="member">FCommReduce</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdims</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>atleast1d</declname>
        </param>
        <briefdescription>
<para>Create an index reduction operation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axes along which the reduction is performed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The reduction function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keepdims</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is set to true, the axes which are reduced are left in the result as dimensions with size one. This enables the result to broadcast correctly against the input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atleast1d</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the output need to be atleast1d.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result tensor. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="211" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="211" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aad827ce961a0d2cbafd181974e05b12d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacetopi_1a8baac534d5ff12a20f089736a0e60f14" kindref="member">FCommReduce</ref></type>
        <definition>FCommReduce topi::MakeCommReducer</definition>
        <argsstring>(FCombine fcombine, FIdentity fidentity, std::string name=&quot;reduce&quot;)</argsstring>
        <name>MakeCommReducer</name>
        <param>
          <type><ref refid="namespacetopi_1afa9b3b014bd552948f6fd671465901fa" kindref="member">FCombine</ref></type>
          <declname>fcombine</declname>
        </param>
        <param>
          <type><ref refid="namespacetopi_1a180676c7dc5c5716056719a58b60ca2c" kindref="member">FIdentity</ref></type>
          <declname>fidentity</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;reduce&quot;</defval>
        </param>
        <briefdescription>
<para>Create a commutative reducer for a reduction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fcombine</parametername>
</parameternamelist>
<parameterdescription>
<para>A function to combine exprs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fidentity</parametername>
</parameternamelist>
<parameterdescription>
<para>A function to initialize elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reducer function which creates a reduce expression over an axis. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="279" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="279" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a6c5fe35d3ea473bad1b9bed302a52dd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr topi::MinOp</definition>
        <argsstring>(PrimExpr source, Array&lt; IterVar &gt; axis)</argsstring>
        <name>MinOp</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> &gt;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>Wrap <ref refid="namespacetvm_1a9da780393e228969f77aa7550520a582" kindref="member">tvm::min</ref> to ensure we get the correct overload. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="309" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="309" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1acb514e2dc2e6d45d6a4c5f0670b367e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr topi::MaxOp</definition>
        <argsstring>(PrimExpr source, Array&lt; IterVar &gt; axis)</argsstring>
        <name>MaxOp</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> &gt;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>Wrap <ref refid="namespacetvm_1ab49bad0808ba033343e72ba37b39af2e" kindref="member">tvm::max</ref> to ensure we get the correct overload. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="314" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="314" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1afef081e81c9674d23b70aeced0df44a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr topi::ProdOp</definition>
        <argsstring>(PrimExpr source, Array&lt; IterVar &gt; axis)</argsstring>
        <name>ProdOp</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> &gt;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
<para>Wrap <ref refid="namespacetvm_1afd8718fe1f413ab2850cdbb66adfbecc" kindref="member">tvm::prod</ref> to ensure we get the correct overload. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="319" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="319" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a21ec078212b70fdbf3ff44188d9e2ee9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::sum</definition>
        <argsstring>(const Tensor &amp;data, const Array&lt; Integer &gt; &amp;axis, bool keepdims=false, bool atleast1d=false)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt; &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdims</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>atleast1d</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates an operation that sums array elements over a given axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to sum over. If axis is empty, the operation will sum over all elements of the array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keepdims</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is set to true, the axes which are reduced are left in the result as dimensions with size one. This enables the result to broadcast correctly against the input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atleast1d</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the output need to be atleast1d.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the sum operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="336" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="336" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a858c40c2e8ee578219b11a7a50287e9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::collapse_sum</definition>
        <argsstring>(const Tensor &amp;data, Array&lt; PrimExpr &gt; target_shape)</argsstring>
        <name>collapse_sum</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt;</type>
          <declname>target_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="343" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="343" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a2c8bfc6d689aaa6408964342b30fcb29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::all</definition>
        <argsstring>(const Tensor &amp;data, const Array&lt; Integer &gt; &amp;axis, bool keepdims=false, bool atleast1d=false)</argsstring>
        <name>all</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt; &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdims</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>atleast1d</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates an operation that computes the logical AND of elements over a given axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The input boolean tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axes to reduce. If axis is empty, the operation will perform logical AND over all elements of the array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keepdims</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is set to true, the axes which are reduced are left in the result as dimensions with size one. This enables the result to broadcast correctly against the input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atleast1d</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the output need to be atleast1d.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the all operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="385" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="385" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a97cf9d42b53193d2c9d0e157a65d25db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::any</definition>
        <argsstring>(const Tensor &amp;data, const Array&lt; Integer &gt; &amp;axis, bool keepdims=false, bool atleast1d=false)</argsstring>
        <name>any</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt; &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdims</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>atleast1d</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates an operation that computes the logical OR of elements over a given axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The input boolean tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axes to reduce. If axis is empty, the operation will perform logical OR over all elements of the array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keepdims</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is set to true, the axes which are reduced are left in the result as dimensions with size one. This enables the result to broadcast correctly against the input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atleast1d</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the output need to be atleast1d.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the all operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="406" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="406" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a97ecde12740d0c191ac029080ba9a74b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::min</definition>
        <argsstring>(const Tensor &amp;data, const Array&lt; Integer &gt; &amp;axis, bool keepdims=false, bool atleast1d=false)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt; &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdims</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>atleast1d</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates an operation that finds the minimum of elements over a given axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to find the minimum over. If axis is empty, the operation will find the minimum over all elements of the array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keepdims</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is set to true, the axes which are reduced are left in the result as dimensions with size one. This enables the result to broadcast correctly against the input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atleast1d</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the output need to be atleast1d.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the min operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="427" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="427" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a0683dcc462033f8daf87f939b05f250d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::max</definition>
        <argsstring>(const Tensor &amp;data, const Array&lt; Integer &gt; &amp;axis, bool keepdims=false, bool atleast1d=false)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt; &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdims</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>atleast1d</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates an operation that finds the maximum of elements over a given axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to find the maximum over. If axis is empty, the operation will find the maximum over all elements of the array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keepdims</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is set to true, the axes which are reduced are left in the result as dimensions with size one. This enables the result to broadcast correctly against the input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atleast1d</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the output need to be atleast1d.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the max operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="448" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="448" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a9a022c65050aa8fdab162cfb6775b865" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::argmin</definition>
        <argsstring>(const Tensor &amp;data, const Array&lt; Integer &gt; &amp;axis, bool keepdims=false, bool atleast1d=false)</argsstring>
        <name>argmin</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt; &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdims</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>atleast1d</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates an operation that finds the indices of the minimum values over a given axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis along which the argmin is performed. If axis is empty, the operation will find the minimum index over all elements of the array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keepdims</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is set to true, the axes which are reduced are left in the result as dimensions with size one. This enables the result to broadcast correctly against the input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atleast1d</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the output need to be atleast1d.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the argmin operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="469" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="469" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1af82f23bc79d3ecca9919b45568192d07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacetopi_1a8baac534d5ff12a20f089736a0e60f14" kindref="member">FCommReduce</ref></type>
        <definition>FCommReduce topi::MakeArgmaxReducer</definition>
        <argsstring>()</argsstring>
        <name>MakeArgmaxReducer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="489" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="489" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a94f412c82e4225050328fae33a3342f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::argmax</definition>
        <argsstring>(const Tensor &amp;data, const Array&lt; Integer &gt; &amp;axis, bool keepdims=false, bool atleast1d=false)</argsstring>
        <name>argmax</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt; &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdims</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>atleast1d</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates an operation that finds the indices of the maximum values over a given axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis along which the argmax is performed. If axis is empty, the operation will find the maximum index over all elements of the array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keepdims</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is set to true, the axes which are reduced are left in the result as dimensions with size one. This enables the result to broadcast correctly against the input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atleast1d</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the output need to be atleast1d.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the argmax operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="519" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="519" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a6566893e24ac42a7704fac00efe59121" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::prod</definition>
        <argsstring>(const Tensor &amp;data, const Array&lt; Integer &gt; &amp;axis, bool keepdims=false, bool atleast1d=false)</argsstring>
        <name>prod</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt; &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdims</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>atleast1d</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates product operation over given axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to do product over. If axis is empty, the operation will do the product over all elements of the array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keepdims</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is set to true, the axes which are reduced are left in the result as dimensions with size one. This enables the result to broadcast correctly against the input array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atleast1d</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the output need to be atleast1d.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the prod operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/reduction.h" line="540" column="1" bodyfile="topi/include/topi/reduction.h" bodystart="540" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aeaf79d9b22b36fc51e7d1bb5ad331802" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool topi::is_broadcast</definition>
        <argsstring>(std::string tag)</argsstring>
        <name>is_broadcast</name>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/tags.h" line="45" column="1" bodyfile="topi/include/topi/tags.h" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a83c42e686c1268b3a5bca51ba88e45b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool topi::is_injective</definition>
        <argsstring>(std::string tag)</argsstring>
        <name>is_injective</name>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/tags.h" line="51" column="1" bodyfile="topi/include/topi/tags.h" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a43f5f5b2746b7a9075f66b0d477e8ffc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::expand_dims</definition>
        <argsstring>(const Tensor &amp;x, int axis, int num_newaxis=1, std::string name=&quot;T_expand_dims&quot;, std::string tag=kBroadcast)</argsstring>
        <name>expand_dims</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_newaxis</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_expand_dims&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation to insert new dimensions of length 1. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the first new dimension (allows negative indices as offsets from the last dimension) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_newaxis</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of new dimensions to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the dim expansion operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="58" column="1" bodyfile="topi/include/topi/transform.h" bodystart="58" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1adcf3c85d4cfd135e6270d4d722332107" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::transpose</definition>
        <argsstring>(const Tensor &amp;x, Array&lt; Integer &gt; axes, std::string name=&quot;T_transpose&quot;, std::string tag=kInjective)</argsstring>
        <name>transpose</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt;</type>
          <declname>axes</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_transpose&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Permute the dimensions of an array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axes</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the permutation. If this is empty, the dimensions will be reversed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the transpose operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="110" column="1" bodyfile="topi/include/topi/transform.h" bodystart="110" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1af09ea81ad65b99ed0c39ccd4511b1e2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::flip</definition>
        <argsstring>(const Tensor &amp;x, int axis=0, std::string name=&quot;T_flip&quot;, std::string tag=kInjective)</argsstring>
        <name>flip</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>axis</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_flip&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>flip/reverse elements of an array in a particular axis </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis along which the tensors will be reveresed (allows negative indices) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the reverse operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="166" column="1" bodyfile="topi/include/topi/transform.h" bodystart="166" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a52121ee19c0cb3a9fd11bbf11c866c47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::reshape</definition>
        <argsstring>(const Tensor &amp;x, Array&lt; PrimExpr &gt; newshape, std::string name=&quot;T_reshape&quot;, std::string tag=kInjective)</argsstring>
        <name>reshape</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt;</type>
          <declname>newshape</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_reshape&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Reshape a tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newshape</parametername>
</parameternamelist>
<parameterdescription>
<para>The new shape </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the reshape operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="206" column="1" bodyfile="topi/include/topi/transform.h" bodystart="206" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a9a7b635c754829e85c9595771218f1f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::unravel_index</definition>
        <argsstring>(const Tensor &amp;x, const Tensor &amp;shape, std::string name=&quot;T_unravel&quot;, std::string tag=kInjective)</argsstring>
        <name>unravel_index</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_unravel&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Converts a flat index or array of flat indices into a tuple of coordinate arrays. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor having indices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor of coordinate arrays. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="246" column="1" bodyfile="topi/include/topi/transform.h" bodystart="246" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aa218ed1a5ac7bfdee53f23781184eab5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::squeeze</definition>
        <argsstring>(const Tensor &amp;x, Array&lt; Integer &gt; axis, bool atleast1d=false, std::string name=&quot;T_squeeze&quot;, std::string tag=kInjective)</argsstring>
        <name>squeeze</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>atleast1d</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_squeeze&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Remove size 1 dimensions from the shape of a tensor. The removed dimensions must have a constant size of 1. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices of the dimensions to remove. If this is empty, all entries with a constant size of 1 will be removed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atleast1d</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the output need to be atleast1d. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the squeeze operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="296" column="1" bodyfile="topi/include/topi/transform.h" bodystart="296" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a3cbb849aef5a33e956412f696d7f2302" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::concatenate</definition>
        <argsstring>(const Array&lt; Tensor &gt; &amp;inputs, int axis=0, std::string name=&quot;T_concat&quot;, std::string tag=kInjective)</argsstring>
        <name>concatenate</name>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>axis</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_concat&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Join a sequence of tensors along an existing axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis along which the tensors will be joined </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the concatenate operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="359" column="1" bodyfile="topi/include/topi/transform.h" bodystart="359" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ad06b4b6ca055fa853c54903f6c2c7c5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::stack</definition>
        <argsstring>(const Array&lt; Tensor &gt; &amp;inputs, int axis=0, std::string name=&quot;T_stack&quot;, std::string tag=kInjective)</argsstring>
        <name>stack</name>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>axis</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_stack&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Join a sequence of tensors along a new axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis along which the tensors will be stacked </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the stack operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="423" column="1" bodyfile="topi/include/topi/transform.h" bodystart="423" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a26a5a9917dde52a5958fee4b98ef4876" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>Array&lt;Tensor&gt; topi::split</definition>
        <argsstring>(const Tensor &amp;x, Array&lt; Integer &gt; split_indices, int axis, std::string name=&quot;T_split&quot;, std::string tag=kInjective)</argsstring>
        <name>split</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt;</type>
          <declname>split_indices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_split&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Split a tensor into multiple sub-tensors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>split_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices to split the input at. This must be in ascending order. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to split along. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the split operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="475" column="1" bodyfile="topi/include/topi/transform.h" bodystart="475" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a9ab808d1f2133511b6d9aaa4d4438e4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::strided_slice</definition>
        <argsstring>(const Tensor &amp;x, const Array&lt; Integer &gt; &amp;begin, const Array&lt; Integer &gt; &amp;end, const Array&lt; Integer &gt; &amp;strides, std::string name=&quot;T_strided_slice&quot;, std::string tag=kInjective)</argsstring>
        <name>strided_slice</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt; &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt; &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt; &amp;</type>
          <declname>strides</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_strided_slice&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>strided_slice of a tensor </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices to begin with in the slicing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicies indicating end of the slice </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strides</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the stride values, it can be negative in that case, the input tensor will be reversed in that particular axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the split operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="552" column="1" bodyfile="topi/include/topi/transform.h" bodystart="552" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a286cebb686c9435f8f83cfc7b5ceaeff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>Array&lt;Tensor&gt; topi::split_sections</definition>
        <argsstring>(const Tensor &amp;x, int num_sections, int axis, std::string name=&quot;T_split_sections&quot;, std::string tag=kInjective)</argsstring>
        <name>split_sections</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_sections</declname>
        </param>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_split_sections&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Split a tensor into a number of sub-tensors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_sections</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of sections to split the tensor into. this must be an integer factor of the size of the axis being split. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to split along. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the split operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="652" column="1" bodyfile="topi/include/topi/transform.h" bodystart="652" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a00a3620077979f4234cac34ec21ab956" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::take</definition>
        <argsstring>(const Tensor &amp;a, const Tensor &amp;indices, std::string mode=&quot;clip&quot;, std::string name=&quot;T_take&quot;, std::string tag=kInjective)</argsstring>
        <name>take</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>mode</declname>
          <defval>&quot;clip&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_take&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Take elements from an flattened input array when axis is None. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The source array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the values to extract. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode of the operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode of to handle out of bound indices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the take operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="693" column="1" bodyfile="topi/include/topi/transform.h" bodystart="693" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1aa62a8900e1f0a3c48fcd81a5c591624f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::sequence_mask</definition>
        <argsstring>(const Tensor &amp;data, const Tensor &amp;valid_length, double mask_value, int axis, std::string name=&quot;T_sequence_mask&quot;, std::string tag=kInjective)</argsstring>
        <name>sequence_mask</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>valid_length</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mask_value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_sequence_mask&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Mask the out-of-boundary elements of each sequence. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The source array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The real length of each sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The masking value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis of the temporal dimension of the sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the sequence_mask operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="740" column="1" bodyfile="topi/include/topi/transform.h" bodystart="740" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a94bc3bef1d14c142405d7a3b29ec1657" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::take</definition>
        <argsstring>(const Tensor &amp;a, const Tensor &amp;indices, int axis, std::string mode=&quot;clip&quot;, std::string name=&quot;T_take&quot;, std::string tag=kInjective)</argsstring>
        <name>take</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>mode</declname>
          <defval>&quot;clip&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_take&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Take elements from an array along an axis. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The source array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the values to extract. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis over which to select values. By default, the flattened input array is used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode for handling out of bound indices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the take operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="778" column="1" bodyfile="topi/include/topi/transform.h" bodystart="778" bodyend="859"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a79f6a17e39e9f5cc3ec1f2e74bde3917" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::where</definition>
        <argsstring>(const Tensor &amp;condition, const Tensor &amp;x, const Tensor &amp;y, std::string name=&quot;T_where&quot;, std::string tag=kBroadcast)</argsstring>
        <name>where</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_where&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
<para>Return the elements, either from x or y, depending on the condition. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>First array to be selected. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Second array to be selected. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor selected from x or y depending on condition. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="872" column="1" bodyfile="topi/include/topi/transform.h" bodystart="872" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ad9915152471ce419d2f28e17c765b2d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::repeat</definition>
        <argsstring>(const Tensor &amp;x, int repeats, int axis, std::string name=&quot;T_repeat&quot;, std::string tag=kBroadcast)</argsstring>
        <name>repeat</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>repeats</declname>
        </param>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_repeat&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation to repeat elements of an array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>repeats</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of repetitions for each element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis along which to repeat values (allows negative indices as offsets from the last dimension) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the repeat operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="920" column="1" bodyfile="topi/include/topi/transform.h" bodystart="920" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ad9f589bd3dd30f423e09fc66bff4f5c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::tile</definition>
        <argsstring>(const Tensor &amp;x, Array&lt; Integer &gt; reps, std::string name=&quot;T_tile&quot;, std::string tag=kBroadcast)</argsstring>
        <name>tile</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1Integer" kindref="compound">Integer</ref> &gt;</type>
          <declname>reps</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_tile&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a794b9155e9ba9d1c9c42a1cff1fb645f" kindref="member">kBroadcast</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation to tile elements of an array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reps</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of times for repeating the tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the tile operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="970" column="1" bodyfile="topi/include/topi/transform.h" bodystart="970" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a2c6dddfadb41fdddcbefa37aaf28b5e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::gather_nd</definition>
        <argsstring>(const Tensor &amp;data, const Tensor &amp;indices, std::string name=&quot;T_gather_nd&quot;, std::string tag=kInjective)</argsstring>
        <name>gather_nd</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_gather_nd&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Gather elements from a n-dimension array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The source array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the values to extract. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the gather_nd operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="1033" column="1" bodyfile="topi/include/topi/transform.h" bodystart="1033" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1ac7762b21d678dc6398f9fb9df243c04d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref></type>
        <definition>tvm::te::Tensor topi::matmul</definition>
        <argsstring>(const tvm::te::Tensor &amp;A, const tvm::te::Tensor &amp;B, bool trans_a=false, bool trans_b=false, std::string name=&quot;T_matmul&quot;, std::string tag=kMatMul)</argsstring>
        <name>matmul</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>trans_a</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>trans_b</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_matmul&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a06a6892f5e4681142f0c08b0af32499d" kindref="member">kMatMul</ref></defval>
        </param>
        <briefdescription>
<para>Creates an operation that calculates a matrix multiplication (row-major notation): A(i, k) * B(k, j), if trans_a == trans_b the usual transposed combinations, otherwise. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix B </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trans_a</parametername>
</parameternamelist>
<parameterdescription>
<para>Is A&apos;s layout transposed? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trans_b</parametername>
</parameternamelist>
<parameterdescription>
<para>Is B&apos;s layout transposed? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor whose op member is the matmul operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="1092" column="1" bodyfile="topi/include/topi/transform.h" bodystart="1092" bodyend="1106"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a989014206b809ee5279f5ec37008a457" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::tensordot</definition>
        <argsstring>(const Tensor &amp;A, const tvm::te::Tensor &amp;B, int axes=2, std::string name=&quot;T_tensordot&quot;, std::string tag=kMatMul)</argsstring>
        <name>tensordot</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>int</type>
          <declname>axes</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_tensordot&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a06a6892f5e4681142f0c08b0af32499d" kindref="member">kMatMul</ref></defval>
        </param>
        <briefdescription>
<para>A generalization of matrix multiplication to tensors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The tensor A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The tensor B </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of the dimensions to reduce over </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor computing the result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="1119" column="1" bodyfile="topi/include/topi/transform.h" bodystart="1119" bodyend="1160"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a261c3dc04ec102c8174b1169bcefbbe1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::tensordot</definition>
        <argsstring>(const Tensor &amp;A, const tvm::te::Tensor &amp;B, Array&lt; PrimExpr &gt; A_axes, Array&lt; PrimExpr &gt; B_axes, std::string name=&quot;T_tensordot&quot;, std::string tag=kMatMul)</argsstring>
        <name>tensordot</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">tvm::te::Tensor</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt;</type>
          <declname>A_axes</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt;</type>
          <declname>B_axes</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_tensordot&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a06a6892f5e4681142f0c08b0af32499d" kindref="member">kMatMul</ref></defval>
        </param>
        <briefdescription>
<para>A generalization of matrix multiplication to tensors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The tensor A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The tensor B </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A_axes</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the dimensions of tensor A to reduce over </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B_axes</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of the dimensions of tensor B to reduce over </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to mark the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Tensor computing the result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="1174" column="1" bodyfile="topi/include/topi/transform.h" bodystart="1174" bodyend="1221"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a894a6c11751558fa1ea5f1f3a9340ee9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::arange</definition>
        <argsstring>(const PrimExpr &amp;start, const PrimExpr &amp;stop, const PrimExpr &amp;step, DataType dtype, std::string name=&quot;T_arange&quot;, std::string tag=kInjective)</argsstring>
        <name>arange</name>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &amp;</type>
          <declname>step</declname>
        </param>
        <param>
          <type><ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref></type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;T_arange&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="1223" column="1" bodyfile="topi/include/topi/transform.h" bodystart="1223" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a2d6d01958fc4ae971259a37e4402703a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::layout_transform</definition>
        <argsstring>(const Tensor &amp;src, const std::string &amp;src_layout, const std::string &amp;dst_layout, const std::string name=&quot;T_layout_trans&quot;, const std::string tag=kInjective)</argsstring>
        <name>layout_transform</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>src_layout</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dst_layout</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
          <defval>&quot;T_layout_trans&quot;</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Transform the layout according to <computeroutput>src_layout</computeroutput> and <computeroutput>dst_layout</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source input. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_layout</parametername>
</parameternamelist>
<parameterdescription>
<para>the source layout. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_layout</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination layout. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>output tensor name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>output tensor tag. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tensor with shape in <computeroutput>dst_layout</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="1246" column="1" bodyfile="topi/include/topi/transform.h" bodystart="1246" bodyend="1273"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a649c66231bc50f3ed98ac8bb6b6e2518" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::shape</definition>
        <argsstring>(const Tensor &amp;src, DataType dtype, const std::string name=&quot;T_shape&quot;, const std::string tag=kInjective)</argsstring>
        <name>shape</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref></type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
          <defval>&quot;T_shape&quot;</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Get the shape of input tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the input tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the elements in the tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>output tensor name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>output tensor tag. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tensor of input shape. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="1283" column="1" bodyfile="topi/include/topi/transform.h" bodystart="1283" bodyend="1297"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a8d3203bcbca982300cfdfce1918e05ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::ndarray_size</definition>
        <argsstring>(const Tensor &amp;src, const DataType &amp;dtype, const std::string &amp;name=&quot;ndarray_size&quot;, const std::string &amp;tag=kInjective)</argsstring>
        <name>ndarray_size</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref> &amp;</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>&quot;ndarray_size&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Get the size of input tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the input tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the elements in the tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>output tensor name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>output tensor tag. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tensor of input shape. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="1307" column="1" bodyfile="topi/include/topi/transform.h" bodystart="1307" bodyend="1320"/>
      </memberdef>
      <memberdef kind="function" id="namespacetopi_1a08d4963de8afe8fdb543c012066537a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor topi::one_hot</definition>
        <argsstring>(const Tensor &amp;indices, const PrimExpr on_value, const PrimExpr off_value, int depth, int axis, const DataType &amp;dtype, const std::string name=&quot;T_one_hot&quot;, const std::string tag=kInjective)</argsstring>
        <name>one_hot</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>on_value</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>off_value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref> &amp;</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
          <defval>&quot;T_one_hot&quot;</defval>
        </param>
        <param>
          <type>const std::string</type>
          <declname>tag</declname>
          <defval><ref refid="namespacetopi_1a60f05ec416e4618d25ad00dd9f536934" kindref="member">kInjective</ref></defval>
        </param>
        <briefdescription>
<para>Returns a one-hot tensor where the locations repsented by indices take value on_value, other locations take value off_value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>locations to set to on_value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on_value</parametername>
</parameternamelist>
<parameterdescription>
<para>value that locations represented by indices take on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off_value</parametername>
</parameternamelist>
<parameterdescription>
<para>value that other locations take on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth</parametername>
</parameternamelist>
<parameterdescription>
<para>depth of the one-hot dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>axis to fill. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>data type of the output tensor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>output tensor name. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>output tensor tag. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>one-hot tensor. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="topi/include/topi/transform.h" line="1335" column="1" bodyfile="topi/include/topi/transform.h" bodystart="1335" bodyend="1370"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="topi/include/topi/broadcast.h" line="34" column="1"/>
  </compounddef>
</doxygen>
