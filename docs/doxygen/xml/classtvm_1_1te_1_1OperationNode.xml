<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1te_1_1OperationNode" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>tvm::te::OperationNode</compoundname>
    <basecompoundref refid="classtvm_1_1tir_1_1FunctionBaseNode" prot="public" virt="non-virtual">tvm::tir::FunctionBaseNode</basecompoundref>
    <derivedcompoundref refid="classtvm_1_1te_1_1BaseComputeOpNode" prot="public" virt="non-virtual">tvm::te::BaseComputeOpNode</derivedcompoundref>
    <derivedcompoundref refid="classtvm_1_1te_1_1ExternOpNode" prot="public" virt="non-virtual">tvm::te::ExternOpNode</derivedcompoundref>
    <derivedcompoundref refid="classtvm_1_1te_1_1HybridOpNode" prot="public" virt="non-virtual">tvm::te::HybridOpNode</derivedcompoundref>
    <derivedcompoundref refid="classtvm_1_1te_1_1PlaceholderOpNode" prot="public" virt="non-virtual">tvm::te::PlaceholderOpNode</derivedcompoundref>
    <derivedcompoundref refid="classtvm_1_1te_1_1ScanOpNode" prot="public" virt="non-virtual">tvm::te::ScanOpNode</derivedcompoundref>
    <includes refid="operation_8h" local="no">operation.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classtvm_1_1te_1_1OperationNode_1ad2fd6f140257f7b3c311f88374fa74d2" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string tvm::te::OperationNode::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>optional name of the operation </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="61" column="1" bodyfile="include/tvm/te/operation.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1te_1_1OperationNode_1ae6ac4336e7dc2df84f128fc97a6cdb9b" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string tvm::te::OperationNode::tag</definition>
        <argsstring></argsstring>
        <name>tag</name>
        <briefdescription>
<para>optional tag of the operation </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="63" column="1" bodyfile="include/tvm/te/operation.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1te_1_1OperationNode_1a009ebd67a59953ec9a587f9724afd538" prot="public" static="no" mutable="no">
        <type><ref refid="classtvm_1_1Map" kindref="compound">Map</ref>&lt; std::string, ObjectRef &gt;</type>
        <definition>Map&lt;std::string, ObjectRef&gt; tvm::te::OperationNode::attrs</definition>
        <argsstring></argsstring>
        <name>attrs</name>
        <briefdescription>
<para>additional attributes of the operation </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="65" column="1" bodyfile="include/tvm/te/operation.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classtvm_1_1te_1_1OperationNode_1a934232055f50cbd8df33f06f990229c5" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::te::OperationNode::_type_key</definition>
        <argsstring></argsstring>
        <name>_type_key</name>
        <initializer>= &quot;Operation&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="152" column="1" bodyfile="include/tvm/te/operation.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1te_1_1OperationNode_1a03b4cec709aed13088b1127a5f90c382" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; tvm::te::OperationNode::func_name</definition>
        <argsstring>() const final</argsstring>
        <name>func_name</name>
        <reimplements refid="classtvm_1_1tir_1_1FunctionBaseNode_1aef4781fcdee32ca1b19929fd6a2fa090">func_name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>name of the operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="67" column="1" bodyfile="include/tvm/te/operation.h" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1OperationNode_1a8d15cfe7d0d721da305c1b36e9f5a914" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref> &gt;</type>
        <definition>virtual Array&lt;IterVar&gt; tvm::te::OperationNode::root_iter_vars</definition>
        <argsstring>() const =0</argsstring>
        <name>root_iter_vars</name>
        <reimplementedby refid="classtvm_1_1te_1_1PlaceholderOpNode_1aed3620e14c76716f976ffec15a68f074">root_iter_vars</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1BaseComputeOpNode_1aab7b5b43122ee14bb00640906267361a">root_iter_vars</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ScanOpNode_1a7a2670bdbf28281b2a8d977e43bc0add">root_iter_vars</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ExternOpNode_1a4e7c08092b2941fddbc2ad5e9c9584fc">root_iter_vars</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1HybridOpNode_1ade3fee4bd8fd9a06d27b533cc6e09ca2">root_iter_vars</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The list of iteration variable at root </para></simplesect>
<simplesect kind="note"><para>root_iter_vars decides the shape of the outputs. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1OperationNode_1a6bcb7f0c177c642d82a5a200d13369f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref></type>
        <definition>virtual DataType tvm::te::OperationNode::output_dtype</definition>
        <argsstring>(size_t i) const =0</argsstring>
        <name>output_dtype</name>
        <reimplementedby refid="classtvm_1_1te_1_1PlaceholderOpNode_1a84d9963cba34ebe035091c15f10d3bff">output_dtype</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ComputeOpNode_1a308edf04ade47c1365c9f8460858fdd6">output_dtype</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1TensorComputeOpNode_1a36de23d9964e78fb0adc8c6e4c7efa7f">output_dtype</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ScanOpNode_1a397b086940fe3115acdb83c3ce61a0cc">output_dtype</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ExternOpNode_1aeb736e912b0379e8e1f888ed9fcbad4f">output_dtype</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1HybridOpNode_1abb20d82f9d23c18d29b216e2ab836646">output_dtype</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get data type. i-th output tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The output index. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>type of i-th output. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1OperationNode_1a7c4fc476de1543ea65c83e02631bfd09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt;</type>
        <definition>virtual Array&lt;PrimExpr&gt; tvm::te::OperationNode::output_shape</definition>
        <argsstring>(size_t i) const =0</argsstring>
        <name>output_shape</name>
        <reimplementedby refid="classtvm_1_1te_1_1PlaceholderOpNode_1a22624cba74f79b3fa5a6ac2a4b986c79">output_shape</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1BaseComputeOpNode_1acdd22cc7c737d4dc8b6bf86d2f11a0db">output_shape</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ScanOpNode_1af7070bd5acff34504792421f2abab32c">output_shape</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ExternOpNode_1a9d2a9f96da44f3a777913a76703e3dbc">output_shape</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1HybridOpNode_1ad4a0684999336bce0e8762d0aa15196e">output_shape</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get shape of i-th output tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The output index. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>shape of i-th output. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1OperationNode_1a9675fbb905d62de5b86624388acec4b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>virtual Array&lt;Tensor&gt; tvm::te::OperationNode::InputTensors</definition>
        <argsstring>() const =0</argsstring>
        <name>InputTensors</name>
        <reimplementedby refid="classtvm_1_1te_1_1PlaceholderOpNode_1a598ce6ccf1c0c5b68263f2f6b0434b50">InputTensors</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ComputeOpNode_1a9a2ce85d831b05fd11a525647132b81f">InputTensors</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1TensorComputeOpNode_1aa08974f313719690d7db3f0f89e8db2e">InputTensors</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ScanOpNode_1ac204a6af379204229fc74a7aadc988a9">InputTensors</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ExternOpNode_1ae637420eeb8dc47d6587f570d8f56eb7">InputTensors</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1HybridOpNode_1ab65b2fc27a5574a15ccbfc99849db8a1">InputTensors</reimplementedby>
        <briefdescription>
<para>List all the input Tensors. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>List of input tensors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1OperationNode_1a9a876a433cfbe32215c3802ef520016e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref></type>
        <definition>virtual Operation tvm::te::OperationNode::ReplaceInputs</definition>
        <argsstring>(const Operation &amp;self, const std::unordered_map&lt; Tensor, Tensor &gt; &amp;rmap) const =0</argsstring>
        <name>ReplaceInputs</name>
        <reimplementedby refid="classtvm_1_1te_1_1PlaceholderOpNode_1a8fe0700318a8292c45faeca6c992bc4e">ReplaceInputs</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ComputeOpNode_1abd13cd58b1d9754ad708fe47e9379b33">ReplaceInputs</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1TensorComputeOpNode_1ad71a45eb73a872cd38e865e4800816db">ReplaceInputs</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ScanOpNode_1aca04ce0320a08cbec1c71c30c968c9ab">ReplaceInputs</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ExternOpNode_1a24e420a11a0b08e6aa02e21732ecc3ed">ReplaceInputs</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1HybridOpNode_1ab46e8dcafa08f1733f9f3f8ebd786100">ReplaceInputs</reimplementedby>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>, <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>rmap</declname>
        </param>
        <briefdescription>
<para>Replace the input of the operation by pattern specified by rmap. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference to self. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The replacement map. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>self if nothing is replaced, otherwise return replaced op. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1OperationNode_1a3c32a93264e0d627d8389b703edcaf49" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void tvm::te::OperationNode::PropBoundToInputs</definition>
        <argsstring>(const Operation &amp;self, arith::Analyzer *analyzer, const std::unordered_map&lt; const VarNode *, IntSet &gt; &amp;dom_map, std::unordered_map&lt; Tensor, TensorDom &gt; *out_dom_map) const =0</argsstring>
        <name>PropBoundToInputs</name>
        <reimplementedby refid="classtvm_1_1te_1_1PlaceholderOpNode_1aa7c4daa391954629cbc0eb9d91ed0ed3">PropBoundToInputs</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ComputeOpNode_1a316aeec37888f4f4e0906743b1a7f0b5">PropBoundToInputs</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1TensorComputeOpNode_1ad24f571d7120ea926f77226b9773edcb">PropBoundToInputs</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ScanOpNode_1a457c2582ccf09454b6c18818297172f7">PropBoundToInputs</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ExternOpNode_1ab6976ded9159bd1930030b7196e6568f">PropBoundToInputs</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1HybridOpNode_1aa732ebcde9edbc81fdeb286c72cd84fe">PropBoundToInputs</reimplementedby>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1arith_1_1Analyzer" kindref="compound">arith::Analyzer</ref> *</type>
          <declname>analyzer</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; const <ref refid="classtvm_1_1tir_1_1VarNode" kindref="compound">VarNode</ref> *, IntSet &gt; &amp;</type>
          <declname>dom_map</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>, <ref refid="structtvm_1_1te_1_1TensorDom" kindref="compound">TensorDom</ref> &gt; *</type>
          <declname>out_dom_map</declname>
        </param>
        <briefdescription>
<para>Propagate the bounds to inputs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference to self. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>analyzer</parametername>
</parameternamelist>
<parameterdescription>
<para>The analyzer to be used in the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dom_map</parametername>
</parameternamelist>
<parameterdescription>
<para>the domain map of Variables(corresponds to root_iter_vars) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_dom_map</parametername>
</parameternamelist>
<parameterdescription>
<para>The output domain. The function is only asked to fill the bounds for Tensors that is already in the out_dom_map </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1OperationNode_1a278d1f242176ff48cc150532a9172aee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void tvm::te::OperationNode::GatherBound</definition>
        <argsstring>(const Operation &amp;self, const std::unordered_map&lt; Tensor, TensorDom &gt; &amp;tensor_dom, std::unordered_map&lt; IterVar, Range &gt; *out_dom_map) const =0</argsstring>
        <name>GatherBound</name>
        <reimplementedby refid="classtvm_1_1te_1_1PlaceholderOpNode_1ab4e1418bc5187cad2710bc5156e3ac5b">GatherBound</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1BaseComputeOpNode_1ad8c5908da3677e4c628f22d3f50c6da1">GatherBound</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ScanOpNode_1a05f9152abd7511c3a9861a8936cb8e52">GatherBound</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ExternOpNode_1aa85d67532d24a69b0eec476fc7fec03f">GatherBound</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1HybridOpNode_1a2eba0c1f5eacfed42fdb0d6c18123781">GatherBound</reimplementedby>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Operation" kindref="compound">Operation</ref> &amp;</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>, <ref refid="structtvm_1_1te_1_1TensorDom" kindref="compound">TensorDom</ref> &gt; &amp;</type>
          <declname>tensor_dom</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref>, <ref refid="classtvm_1_1Range" kindref="compound">Range</ref> &gt; *</type>
          <declname>out_dom_map</declname>
        </param>
        <briefdescription>
<para>Gather the bound from output tensor. Set the range of each root_iter_vars in the op to out_dom_map. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference to self. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tensor_dom</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain map of Tensor-&gt;access set of each dimension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_dom_map</parametername>
</parameternamelist>
<parameterdescription>
<para>The output domain map of each IterVar to be setted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1OperationNode_1afc89a6b2f5e35adf79c3587a95ba283a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classtvm_1_1tir_1_1Stmt" kindref="compound">Stmt</ref></type>
        <definition>virtual Stmt tvm::te::OperationNode::BuildRealize</definition>
        <argsstring>(const Stage &amp;stage, const std::unordered_map&lt; IterVar, Range &gt; &amp;realize_map, const Stmt &amp;body) const =0</argsstring>
        <name>BuildRealize</name>
        <reimplementedby refid="classtvm_1_1te_1_1PlaceholderOpNode_1a524d658c650915abff3a2388b9c3d0c5">BuildRealize</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1BaseComputeOpNode_1a0bd84e898355eb941318af78245ca103">BuildRealize</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ScanOpNode_1a6ff44bafcf683b8be553191d6a21ac4c">BuildRealize</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ExternOpNode_1ab5155b645767085f9fd499144c30ae1d">BuildRealize</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1HybridOpNode_1ac1c6607a6d13f019792100430a3fa3c7">BuildRealize</reimplementedby>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref>, <ref refid="classtvm_1_1Range" kindref="compound">Range</ref> &gt; &amp;</type>
          <declname>realize_map</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1tir_1_1Stmt" kindref="compound">Stmt</ref> &amp;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
<para>Build the Realize statement that realizes the op&apos;s output tensors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>the op&apos;s stage. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>realize_map</parametername>
</parameternamelist>
<parameterdescription>
<para>The realization domain map of the operators. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>The body that is going to get </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A realization statement that wraps body. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1OperationNode_1a0a4a33f450e0e0890f59af9464c9015f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classtvm_1_1tir_1_1Stmt" kindref="compound">Stmt</ref></type>
        <definition>virtual Stmt tvm::te::OperationNode::BuildProvide</definition>
        <argsstring>(const Stage &amp;stage, const std::unordered_map&lt; IterVar, Range &gt; &amp;dom_map, bool debug_keep_trivial_loop) const =0</argsstring>
        <name>BuildProvide</name>
        <reimplementedby refid="classtvm_1_1te_1_1PlaceholderOpNode_1a3571782a91faade829f9b11a5893cba1">BuildProvide</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ComputeOpNode_1aac1774ef277c75bfdd8f6fdfe2aab4ab">BuildProvide</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1TensorComputeOpNode_1a003be01f4aded57625d0c347b0f6ac73">BuildProvide</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ScanOpNode_1a315db905697bc7377d2a84372179b52c">BuildProvide</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1ExternOpNode_1a57e5a0a6b3160e38209aa309e8535698">BuildProvide</reimplementedby>
        <reimplementedby refid="classtvm_1_1te_1_1HybridOpNode_1a81a2e02ba86fad0ce7d31d0838ac46c0">BuildProvide</reimplementedby>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Stage" kindref="compound">Stage</ref> &amp;</type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; <ref refid="classtvm_1_1tir_1_1IterVar" kindref="compound">IterVar</ref>, <ref refid="classtvm_1_1Range" kindref="compound">Range</ref> &gt; &amp;</type>
          <declname>dom_map</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>debug_keep_trivial_loop</declname>
        </param>
        <briefdescription>
<para>Build the statement that provide the output tensors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>The schedule stage of the op. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dom_map</parametername>
</parameternamelist>
<parameterdescription>
<para>The domain map of all iteration domains. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>debug_keep_trivial_loop</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether keep trivial loops with extent of 1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A statement that add production and wraps consumer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1OperationNode_1a281dd659ac061a77c5783bd0e42324df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tvm::te::OperationNode::TVM_DECLARE_BASE_OBJECT_INFO</definition>
        <argsstring>(OperationNode, Object)</argsstring>
        <name>TVM_DECLARE_BASE_OBJECT_INFO</name>
        <param>
          <type><ref refid="classtvm_1_1te_1_1OperationNode" kindref="compound">OperationNode</ref></type>
        </param>
        <param>
          <type>Object</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/operation.h" line="154" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class of all operation nodes. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5949">
        <label>tvm::te::PlaceholderOpNode</label>
        <link refid="classtvm_1_1te_1_1PlaceholderOpNode"/>
        <childnode refid="5941" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5944">
        <label>tvm::te::BaseComputeOpNode</label>
        <link refid="classtvm_1_1te_1_1BaseComputeOpNode"/>
        <childnode refid="5941" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5950">
        <label>tvm::te::ScanOpNode</label>
        <link refid="classtvm_1_1te_1_1ScanOpNode"/>
        <childnode refid="5941" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5943">
        <label>Object</label>
      </node>
      <node id="5941">
        <label>tvm::te::OperationNode</label>
        <link refid="classtvm_1_1te_1_1OperationNode"/>
        <childnode refid="5942" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5947">
        <label>tvm::te::ExternOpNode</label>
        <link refid="classtvm_1_1te_1_1ExternOpNode"/>
        <childnode refid="5941" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5946">
        <label>tvm::te::TensorComputeOpNode</label>
        <link refid="classtvm_1_1te_1_1TensorComputeOpNode"/>
        <childnode refid="5944" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5945">
        <label>tvm::te::ComputeOpNode</label>
        <link refid="classtvm_1_1te_1_1ComputeOpNode"/>
        <childnode refid="5944" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5948">
        <label>tvm::te::HybridOpNode</label>
        <link refid="classtvm_1_1te_1_1HybridOpNode"/>
        <childnode refid="5941" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5942">
        <label>tvm::tir::FunctionBaseNode</label>
        <link refid="classtvm_1_1tir_1_1FunctionBaseNode"/>
        <childnode refid="5943" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5955">
        <label>ObjectRef</label>
      </node>
      <node id="5954">
        <label>tvm::Map&lt; std::string, ObjectRef &gt;</label>
        <childnode refid="5955" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5953">
        <label>Object</label>
      </node>
      <node id="5951">
        <label>tvm::te::OperationNode</label>
        <link refid="classtvm_1_1te_1_1OperationNode"/>
        <childnode refid="5952" relation="public-inheritance">
        </childnode>
        <childnode refid="5954" relation="usage">
          <edgelabel>+attrs</edgelabel>
        </childnode>
      </node>
      <node id="5952">
        <label>tvm::tir::FunctionBaseNode</label>
        <link refid="classtvm_1_1tir_1_1FunctionBaseNode"/>
        <childnode refid="5953" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tvm/te/operation.h" line="58" column="1" bodyfile="include/tvm/te/operation.h" bodystart="58" bodyend="155"/>
    <listofallmembers>
      <member refid="classtvm_1_1te_1_1OperationNode_1a934232055f50cbd8df33f06f990229c5" prot="public" virt="non-virtual"><scope>tvm::te::OperationNode</scope><name>_type_key</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a009ebd67a59953ec9a587f9724afd538" prot="public" virt="non-virtual"><scope>tvm::te::OperationNode</scope><name>attrs</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a0a4a33f450e0e0890f59af9464c9015f" prot="public" virt="pure-virtual"><scope>tvm::te::OperationNode</scope><name>BuildProvide</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1afc89a6b2f5e35adf79c3587a95ba283a" prot="public" virt="pure-virtual"><scope>tvm::te::OperationNode</scope><name>BuildRealize</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a03b4cec709aed13088b1127a5f90c382" prot="public" virt="virtual"><scope>tvm::te::OperationNode</scope><name>func_name</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a278d1f242176ff48cc150532a9172aee" prot="public" virt="pure-virtual"><scope>tvm::te::OperationNode</scope><name>GatherBound</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a9675fbb905d62de5b86624388acec4b1" prot="public" virt="pure-virtual"><scope>tvm::te::OperationNode</scope><name>InputTensors</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1ad2fd6f140257f7b3c311f88374fa74d2" prot="public" virt="non-virtual"><scope>tvm::te::OperationNode</scope><name>name</name></member>
      <member refid="classtvm_1_1tir_1_1FunctionBaseNode_1a86d8a47eb472945b01ab508c1ff94930" prot="public" virt="pure-virtual"><scope>tvm::te::OperationNode</scope><name>num_outputs</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a6bcb7f0c177c642d82a5a200d13369f0" prot="public" virt="pure-virtual"><scope>tvm::te::OperationNode</scope><name>output_dtype</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a7c4fc476de1543ea65c83e02631bfd09" prot="public" virt="pure-virtual"><scope>tvm::te::OperationNode</scope><name>output_shape</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a3c32a93264e0d627d8389b703edcaf49" prot="public" virt="pure-virtual"><scope>tvm::te::OperationNode</scope><name>PropBoundToInputs</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a9a876a433cfbe32215c3802ef520016e" prot="public" virt="pure-virtual"><scope>tvm::te::OperationNode</scope><name>ReplaceInputs</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a8d15cfe7d0d721da305c1b36e9f5a914" prot="public" virt="pure-virtual"><scope>tvm::te::OperationNode</scope><name>root_iter_vars</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1ae6ac4336e7dc2df84f128fc97a6cdb9b" prot="public" virt="non-virtual"><scope>tvm::te::OperationNode</scope><name>tag</name></member>
      <member refid="classtvm_1_1te_1_1OperationNode_1a281dd659ac061a77c5783bd0e42324df" prot="public" virt="non-virtual"><scope>tvm::te::OperationNode</scope><name>TVM_DECLARE_BASE_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1tir_1_1FunctionBaseNode_1a03b2f3fdfc5ae82ca081cf988dac22e4" prot="public" virt="virtual"><scope>tvm::te::OperationNode</scope><name>~FunctionBaseNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
