<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1runtime_1_1String" kind="class" language="C++" prot="public">
    <compoundname>tvm::runtime::String</compoundname>
    <basecompoundref refid="classtvm_1_1runtime_1_1ObjectRef" prot="public" virt="non-virtual">tvm::runtime::ObjectRef</basecompoundref>
    <includes refid="runtime_2container_8h" local="no">container.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1a02fca36e3ff55cc1e83635b02a11fca3" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::runtime::String::String</definition>
        <argsstring>(std::string other)</argsstring>
        <name>String</name>
        <param>
          <type>std::string</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classtvm_1_1runtime_1_1String" kindref="compound">String</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The moved/copied std::string object</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If user passes const reference, it will trigger copy. If it&apos;s rvalue, it will be moved into other. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="363" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="555" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1a0d6160f9a7e4efbafa7f6d7a42fec0d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1String" kindref="compound">String</ref></type>
        <definition>String tvm::runtime::String::operator=</definition>
        <argsstring>(std::string other)</argsstring>
        <name>operator=</name>
        <param>
          <type>std::string</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Change the value the reference object points to. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The value for the new <ref refid="classtvm_1_1runtime_1_1String" kindref="compound">String</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="371" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="562" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1ae0c8008f2660354514aa1f59540ea0a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::runtime::String::operator==</definition>
        <argsstring>(const std::string &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare is equal to other std::string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other string</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the comparison result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="380" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="380" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1ad6094750f4d337c7e5a1b04180675b41" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::runtime::String::operator!=</definition>
        <argsstring>(const std::string &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare is not equal to other std::string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other string</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the comparison result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="391" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="391" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1a21ee70af849336830d9f7d01005dc0a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::runtime::String::operator==</definition>
        <argsstring>(const char *other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const char *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare is equal to other char string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other char string</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the comparison result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="400" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="400" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1afd91d1bddf1d126fbd8f20aebeb020f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::runtime::String::operator!=</definition>
        <argsstring>(const char *other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const char *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare is not equal to other char string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other char string</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the comparison result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="409" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="409" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1a7ee59f6227213720ef176b995191b4e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tvm::runtime::String::compare</definition>
        <argsstring>(const String &amp;other) const </argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1String" kindref="compound">String</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares this <ref refid="classtvm_1_1runtime_1_1String" kindref="compound">String</ref> object to other. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classtvm_1_1runtime_1_1String" kindref="compound">String</ref> to compare with.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if both char sequences compare equal. negative if this appear before other, positive otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="419" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="419" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1adaa1cef73909f379ca5991ef1ab61c40" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tvm::runtime::String::compare</definition>
        <argsstring>(const std::string &amp;other) const </argsstring>
        <name>compare</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares this <ref refid="classtvm_1_1runtime_1_1String" kindref="compound">String</ref> object to other. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to compare with.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if both char sequences compare equal. negative if this appear before other, positive otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="431" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="431" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1ad2c11edfba52dedb10ac48e2980ffba6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tvm::runtime::String::compare</definition>
        <argsstring>(const char *other) const </argsstring>
        <name>compare</name>
        <param>
          <type>const char *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compares this to other. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The character array to compare with.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero if both char sequences compare equal. negative if this appear before other, positive otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="443" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="443" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1a61a280bb2b55d56477bab49e0b8eb187" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* tvm::runtime::String::c_str</definition>
        <argsstring>() const </argsstring>
        <name>c_str</name>
        <briefdescription>
<para>Returns a pointer to the char array in the string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const char* </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="452" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="452" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1a44788bd2440eb4ebbada370314536243" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tvm::runtime::String::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para>Return the length of the string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t string length </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="459" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="459" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1a406e45189b6e0239cf32f717f59d59d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tvm::runtime::String::length</definition>
        <argsstring>() const </argsstring>
        <name>length</name>
        <briefdescription>
<para>Return the length of the string. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t string length </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="472" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="472" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1a93f37d0bb56661345a4e0bf1c902b685" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::runtime::String::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
<para>Retun if the string is empty. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if empty, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="479" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="479" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1a7bf6b73710e93d238712be0c9d4143b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* tvm::runtime::String::data</definition>
        <argsstring>() const </argsstring>
        <name>data</name>
        <briefdescription>
<para>Return the data pointer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const char* data pointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="486" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="486" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1a9b55a67ee4dc15ac77d4eab01f15b9d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tvm::runtime::String::TVM_DEFINE_OBJECT_REF_METHODS</definition>
        <argsstring>(String, ObjectRef, StringObj)</argsstring>
        <name>TVM_DEFINE_OBJECT_REF_METHODS</name>
        <param>
          <type><ref refid="classtvm_1_1runtime_1_1String" kindref="compound">String</ref></type>
        </param>
        <param>
          <type><ref refid="classtvm_1_1runtime_1_1ObjectRef" kindref="compound">ObjectRef</ref></type>
        </param>
        <param>
          <type><ref refid="classtvm_1_1runtime_1_1StringObj" kindref="compound">StringObj</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="515" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1a0ea0aa1d24073721ee7bf9bd5d23c53a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t tvm::runtime::String::HashBytes</definition>
        <argsstring>(const char *data, size_t size)</argsstring>
        <name>HashBytes</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Hash the binary bytes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the hash value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="501" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="501" bodyend="513"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1af060dff35dfb58d106c6885720be1564" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtvm_1_1runtime_1_1StringObj" kindref="compound">StringObj</ref> *</type>
        <definition>const StringObj* tvm::runtime::String::get</definition>
        <argsstring>() const </argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the internal <ref refid="classtvm_1_1runtime_1_1StringObj" kindref="compound">StringObj</ref> pointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="519" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="519" bodyend="519"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1String_1ad4edd04d9f91548da3caa7f63a2fdfdd" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tvm::runtime::String::memncmp</definition>
        <argsstring>(const char *lhs, const char *rhs, size_t lhs_count, size_t rhs_count)</argsstring>
        <name>memncmp</name>
        <param>
          <type>const char *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>lhs_count</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rhs_count</declname>
        </param>
        <briefdescription>
<para>Compare two char sequence. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointers to the char array to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointers to the char array to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lhs_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the char array to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the char array to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int zero if both char sequences compare equal. negative if this appear before other, positive otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/container.h" line="531" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="568" bodyend="583"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Reference to string objects. </para>    </briefdescription>
    <detaileddescription>
<para><programlisting><codeline><highlight class="normal">//<sp/>Example<sp/>to<sp/>create<sp/>runtime<sp/>String<sp/>reference<sp/>object<sp/>from<sp/>std::string</highlight></codeline>
<codeline><highlight class="normal">std::string<sp/>s<sp/>=<sp/>&quot;hello<sp/>world&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>You<sp/>can<sp/>create<sp/>the<sp/>reference<sp/>from<sp/>existing<sp/>std::string</highlight></codeline>
<codeline><highlight class="normal">String<sp/>ref{std::move(s)};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>You<sp/>can<sp/>rebind<sp/>the<sp/>reference<sp/>to<sp/>another<sp/>string.</highlight></codeline>
<codeline><highlight class="normal">ref<sp/>=<sp/>std::string{&quot;hello<sp/>world2&quot;};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>You<sp/>can<sp/>use<sp/>the<sp/>reference<sp/>as<sp/>hash<sp/>map<sp/>key</highlight></codeline>
<codeline><highlight class="normal">std::unordered_map&lt;String,<sp/>int32_t&gt;<sp/>m;</highlight></codeline>
<codeline><highlight class="normal">m[ref]<sp/>=<sp/>1;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>You<sp/>can<sp/>compare<sp/>the<sp/>reference<sp/>object<sp/>with<sp/>other<sp/>string<sp/>objects</highlight></codeline>
<codeline><highlight class="normal">assert(ref<sp/>==<sp/>&quot;hello<sp/>world&quot;,<sp/>true);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>You<sp/>can<sp/>convert<sp/>the<sp/>reference<sp/>to<sp/>std::string<sp/>again</highlight></codeline>
<codeline><highlight class="normal">string<sp/>s2<sp/>=<sp/>(string)ref;</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="7038">
        <label>tvm::runtime::ObjectRef</label>
        <link refid="classtvm_1_1runtime_1_1ObjectRef"/>
      </node>
      <node id="7037">
        <label>tvm::runtime::String</label>
        <link refid="classtvm_1_1runtime_1_1String"/>
        <childnode refid="7038" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7040">
        <label>tvm::runtime::ObjectRef</label>
        <link refid="classtvm_1_1runtime_1_1ObjectRef"/>
        <childnode refid="7041" relation="usage">
          <edgelabel>#data_</edgelabel>
        </childnode>
      </node>
      <node id="7041">
        <label>tvm::runtime::ObjectPtr&lt; tvm::runtime::Object &gt;</label>
        <link refid="classtvm_1_1runtime_1_1ObjectPtr"/>
      </node>
      <node id="7039">
        <label>tvm::runtime::String</label>
        <link refid="classtvm_1_1runtime_1_1String"/>
        <childnode refid="7040" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tvm/runtime/container.h" line="353" column="1" bodyfile="include/tvm/runtime/container.h" bodystart="353" bodyend="533"/>
    <listofallmembers>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1ab51c99a3607ca95884d9efd978998ce8" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>as</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1a61a280bb2b55d56477bab49e0b8eb187" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>c_str</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1a7ee59f6227213720ef176b995191b4e0" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>compare</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1adaa1cef73909f379ca5991ef1ab61c40" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>compare</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1ad2c11edfba52dedb10ac48e2980ffba6" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>compare</name></member>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1aa5c355fbb7d2f7402ee360dba8a52cdd" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>ContainerType</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1a7bf6b73710e93d238712be0c9d4143b0" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>data</name></member>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1ac261cdb80487fb29ac42b28678f8cbef" prot="protected" virt="non-virtual"><scope>tvm::runtime::String</scope><name>data_</name></member>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1a79d0ae0a887ed5cbfa67de7d43f0ef3a" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>defined</name></member>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1acd04bb22a6861e9952c344ee8547411f" prot="protected" virt="non-virtual"><scope>tvm::runtime::String</scope><name>DowncastNoCheck</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1a93f37d0bb56661345a4e0bf1c902b685" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>empty</name></member>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1a22e5bb9d64dbc773bb9263b70882239e" prot="protected" virt="non-virtual"><scope>tvm::runtime::String</scope><name>FFIClearAfterMove</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1af060dff35dfb58d106c6885720be1564" prot="private" virt="non-virtual"><scope>tvm::runtime::String</scope><name>get</name></member>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1aa4604d96f4a77cc10cc1e0419758fb2c" prot="protected" virt="non-virtual"><scope>tvm::runtime::String</scope><name>get_mutable</name></member>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1aed593996e4076632450de8fde776707c" prot="protected" virt="non-virtual"><scope>tvm::runtime::String</scope><name>GetDataPtr</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1a0ea0aa1d24073721ee7bf9bd5d23c53a" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>HashBytes</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1a406e45189b6e0239cf32f717f59d59d2" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>length</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1ad4edd04d9f91548da3caa7f63a2fdfdd" prot="private" virt="non-virtual"><scope>tvm::runtime::String</scope><name>memncmp</name></member>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1aa07c1f6d66a438ea950637d13ed09471" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>ObjectRef</name></member>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1a6a7dd7404edf1c26f8dbd9bd92d03a02" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>ObjectRef</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1ad6094750f4d337c7e5a1b04180675b41" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>operator!=</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1afd91d1bddf1d126fbd8f20aebeb020f2" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>operator!=</name></member>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1a2ae377cc59f98b42339d76bded1c1711" prot="public" virt="non-virtual" ambiguityscope="tvm::runtime::ObjectRef::"><scope>tvm::runtime::String</scope><name>operator!=</name></member>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1ab9b1ac131656be45db88e69c04bb16af" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>operator-&gt;</name></member>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1a17626209947c4a2f302422be451661c5" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>operator&lt;</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1a0d6160f9a7e4efbafa7f6d7a42fec0d4" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>operator=</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1ae0c8008f2660354514aa1f59540ea0a1" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>operator==</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1a21ee70af849336830d9f7d01005dc0a3" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>operator==</name></member>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1ac8c2b78649a428e35e279d085d509e1b" prot="public" virt="non-virtual" ambiguityscope="tvm::runtime::ObjectRef::"><scope>tvm::runtime::String</scope><name>operator==</name></member>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1a62014c9eba5cae2ab5a84963725d6a65" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>same_as</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1a44788bd2440eb4ebbada370314536243" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>size</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1a02fca36e3ff55cc1e83635b02a11fca3" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>String</name></member>
      <member refid="classtvm_1_1runtime_1_1String_1a9b55a67ee4dc15ac77d4eab01f15b9d8" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>TVM_DEFINE_OBJECT_REF_METHODS</name></member>
      <member refid="classtvm_1_1runtime_1_1ObjectRef_1a4142990fd1959abc95aa0cccca4f6cda" prot="public" virt="non-virtual"><scope>tvm::runtime::String</scope><name>unique</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
