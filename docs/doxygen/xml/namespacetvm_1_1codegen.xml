<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespacetvm_1_1codegen" kind="namespace" language="C++">
    <compoundname>tvm::codegen</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacetvm_1_1codegen_1ad59f6371549d077dbd0c291b90f5cdf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">runtime::Module</ref></type>
        <definition>runtime::Module tvm::codegen::Build</definition>
        <argsstring>(const Array&lt; tir::LoweredFunc &gt; &amp;funcs, const std::string &amp;target)</argsstring>
        <name>Build</name>
        <param>
          <type>const <ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1LoweredFunc" kindref="compound">tir::LoweredFunc</ref> &gt; &amp;</type>
          <declname>funcs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Build a module from array of lowered function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>funcs</parametername>
</parameternamelist>
<parameterdescription>
<para>The functions to be built. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target to be built. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The builded module.</para></simplesect>
<simplesect kind="note"><para>Calls global API function &quot;_codegen_build_&quot; + target </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/codegen.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1codegen_1abf02059ebadcdb8bbbe5c840b646d67b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string tvm::codegen::PackImportsToC</definition>
        <argsstring>(const runtime::Module &amp;m, bool system_lib)</argsstring>
        <name>PackImportsToC</name>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">runtime::Module</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>system_lib</declname>
        </param>
        <briefdescription>
<para>Pack imported device library to a C file. Compile the C file and link with the host library will allow the DSO loader to automatically discover and import the dependency from the shared library. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The host module with the imports. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>system_lib</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether expose as system library. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cstr The C string representation of the file. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/codegen.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetvm_1_1codegen_1ab2cd2a65bac4b26427a8ca0abe4e0bd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">runtime::Module</ref></type>
        <definition>runtime::Module tvm::codegen::PackImportsToLLVM</definition>
        <argsstring>(const runtime::Module &amp;m, bool system_lib, const std::string &amp;target_triple)</argsstring>
        <name>PackImportsToLLVM</name>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">runtime::Module</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>system_lib</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>target_triple</declname>
        </param>
        <briefdescription>
<para>Pack imported device library to a LLVM module. Compile the LLVM module and link with the host library will allow the DSO loader to automatically discover and import the dependency from the shared library. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The host module with the imports. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>system_lib</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether expose as system library. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_triple</parametername>
</parameternamelist>
<parameterdescription>
<para>LLVM target triple </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">runtime::Module</ref> The generated LLVM module. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/codegen.h" line="76" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>namespace for target translation and codegen. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/tvm/target/codegen.h" line="37" column="1"/>
  </compounddef>
</doxygen>
