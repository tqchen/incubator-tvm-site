<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="packed__func_8h" kind="file" language="C++">
    <compoundname>packed_func.h</compoundname>
    <includes local="no">dmlc/logging.h</includes>
    <includes refid="c__runtime__api_8h" local="no">tvm/runtime/c_runtime_api.h</includes>
    <includes refid="runtime_2module_8h" local="no">tvm/runtime/module.h</includes>
    <includes refid="ndarray_8h" local="no">tvm/runtime/ndarray.h</includes>
    <includes refid="data__type_8h" local="no">tvm/runtime/data_type.h</includes>
    <includes refid="object_8h" local="no">tvm/runtime/object.h</includes>
    <includes local="no">functional</includes>
    <includes local="no">tuple</includes>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <includes local="no">limits</includes>
    <includes local="no">memory</includes>
    <includes local="no">utility</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="driver__api_8h" local="no">include/tvm/driver/driver_api.h</includedby>
    <includedby refid="ir_2attrs_8h" local="no">include/tvm/ir/attrs.h</includedby>
    <includedby refid="node_2container_8h" local="no">include/tvm/node/container.h</includedby>
    <includedby refid="reflection_8h" local="no">include/tvm/node/reflection.h</includedby>
    <includedby refid="device__api_8h" local="no">include/tvm/runtime/device_api.h</includedby>
    <includedby refid="runtime_2module_8h" local="no">include/tvm/runtime/module.h</includedby>
    <includedby refid="registry_8h" local="no">include/tvm/runtime/registry.h</includedby>
    <includedby refid="vm_8h" local="no">include/tvm/runtime/vm.h</includedby>
    <includedby refid="codegen_8h" local="no">include/tvm/target/codegen.h</includedby>
    <includedby refid="generic__func_8h" local="no">include/tvm/target/generic_func.h</includedby>
    <incdepgraph>
      <node id="14929">
        <label>atomic</label>
      </node>
      <node id="14939">
        <label>functional</label>
      </node>
      <node id="14941">
        <label>limits</label>
      </node>
      <node id="14923">
        <label>tvm/runtime/module.h</label>
        <link refid="runtime_2module_8h"/>
        <childnode refid="14924" relation="include">
        </childnode>
        <childnode refid="14919" relation="include">
        </childnode>
        <childnode refid="14925" relation="include">
        </childnode>
        <childnode refid="14930" relation="include">
        </childnode>
        <childnode refid="14932" relation="include">
        </childnode>
        <childnode refid="14933" relation="include">
        </childnode>
        <childnode refid="14927" relation="include">
        </childnode>
        <childnode refid="14934" relation="include">
        </childnode>
        <childnode refid="14917" relation="include">
        </childnode>
      </node>
      <node id="14917">
        <label>include/tvm/runtime/packed_func.h</label>
        <link refid="packed_func.h"/>
        <childnode refid="14918" relation="include">
        </childnode>
        <childnode refid="14919" relation="include">
        </childnode>
        <childnode refid="14923" relation="include">
        </childnode>
        <childnode refid="14935" relation="include">
        </childnode>
        <childnode refid="14938" relation="include">
        </childnode>
        <childnode refid="14925" relation="include">
        </childnode>
        <childnode refid="14939" relation="include">
        </childnode>
        <childnode refid="14940" relation="include">
        </childnode>
        <childnode refid="14933" relation="include">
        </childnode>
        <childnode refid="14927" relation="include">
        </childnode>
        <childnode refid="14941" relation="include">
        </childnode>
        <childnode refid="14932" relation="include">
        </childnode>
        <childnode refid="14928" relation="include">
        </childnode>
        <childnode refid="14926" relation="include">
        </childnode>
      </node>
      <node id="14925">
        <label>tvm/runtime/object.h</label>
        <link refid="object_8h"/>
        <childnode refid="14918" relation="include">
        </childnode>
        <childnode refid="14919" relation="include">
        </childnode>
        <childnode refid="14926" relation="include">
        </childnode>
        <childnode refid="14927" relation="include">
        </childnode>
        <childnode refid="14928" relation="include">
        </childnode>
        <childnode refid="14929" relation="include">
        </childnode>
      </node>
      <node id="14921">
        <label>stdint.h</label>
      </node>
      <node id="14935">
        <label>tvm/runtime/ndarray.h</label>
        <link refid="ndarray_8h"/>
        <childnode refid="14919" relation="include">
        </childnode>
        <childnode refid="14925" relation="include">
        </childnode>
        <childnode refid="14936" relation="include">
        </childnode>
        <childnode refid="14929" relation="include">
        </childnode>
        <childnode refid="14933" relation="include">
        </childnode>
        <childnode refid="14928" relation="include">
        </childnode>
      </node>
      <node id="14927">
        <label>string</label>
      </node>
      <node id="14922">
        <label>stddef.h</label>
      </node>
      <node id="14940">
        <label>tuple</label>
      </node>
      <node id="14918">
        <label>dmlc/logging.h</label>
      </node>
      <node id="14933">
        <label>vector</label>
      </node>
      <node id="14924">
        <label>dmlc/io.h</label>
      </node>
      <node id="14919">
        <label>tvm/runtime/c_runtime_api.h</label>
        <link refid="c__runtime__api_8h"/>
        <childnode refid="14920" relation="include">
        </childnode>
        <childnode refid="14921" relation="include">
        </childnode>
        <childnode refid="14922" relation="include">
        </childnode>
      </node>
      <node id="14928">
        <label>utility</label>
      </node>
      <node id="14937">
        <label>dmlc/serializer.h</label>
      </node>
      <node id="14931">
        <label>cstdlib</label>
      </node>
      <node id="14936">
        <label>tvm/runtime/serializer.h</label>
        <link refid="serializer_8h"/>
        <childnode refid="14924" relation="include">
        </childnode>
        <childnode refid="14937" relation="include">
        </childnode>
        <childnode refid="14919" relation="include">
        </childnode>
        <childnode refid="14935" relation="include">
        </childnode>
      </node>
      <node id="14934">
        <label>unordered_map</label>
      </node>
      <node id="14930">
        <label>tvm/runtime/memory.h</label>
        <link refid="runtime_2memory_8h"/>
        <childnode refid="14925" relation="include">
        </childnode>
        <childnode refid="14931" relation="include">
        </childnode>
        <childnode refid="14928" relation="include">
        </childnode>
        <childnode refid="14926" relation="include">
        </childnode>
      </node>
      <node id="14938">
        <label>tvm/runtime/data_type.h</label>
        <link refid="data__type_8h"/>
        <childnode refid="14919" relation="include">
        </childnode>
        <childnode refid="14918" relation="include">
        </childnode>
        <childnode refid="14926" relation="include">
        </childnode>
      </node>
      <node id="14926">
        <label>type_traits</label>
      </node>
      <node id="14920">
        <label>dlpack/dlpack.h</label>
      </node>
      <node id="14932">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="15035">
        <label>include/tvm/arith/int_set.h</label>
        <link refid="int__set_8h"/>
        <childnode refid="15034" relation="include">
        </childnode>
        <childnode refid="14996" relation="include">
        </childnode>
      </node>
      <node id="15023">
        <label>topi/include/topi/nn/batch_matmul.h</label>
        <link refid="batch__matmul_8h"/>
      </node>
      <node id="14964">
        <label>include/tvm/relay/interpreter.h</label>
        <link refid="interpreter_8h"/>
      </node>
      <node id="15053">
        <label>include/tvm/ir/span.h</label>
        <link refid="span_8h"/>
        <childnode refid="14947" relation="include">
        </childnode>
        <childnode refid="15033" relation="include">
        </childnode>
        <childnode refid="15051" relation="include">
        </childnode>
        <childnode refid="15042" relation="include">
        </childnode>
      </node>
      <node id="15014">
        <label>topi/include/topi/detail/fuse.h</label>
        <link refid="fuse_8h"/>
        <childnode refid="15003" relation="include">
        </childnode>
        <childnode refid="15006" relation="include">
        </childnode>
        <childnode refid="15008" relation="include">
        </childnode>
        <childnode refid="15010" relation="include">
        </childnode>
        <childnode refid="15015" relation="include">
        </childnode>
        <childnode refid="15016" relation="include">
        </childnode>
        <childnode refid="15017" relation="include">
        </childnode>
        <childnode refid="15004" relation="include">
        </childnode>
        <childnode refid="15007" relation="include">
        </childnode>
        <childnode refid="15009" relation="include">
        </childnode>
        <childnode refid="15011" relation="include">
        </childnode>
        <childnode refid="15018" relation="include">
        </childnode>
        <childnode refid="15019" relation="include">
        </childnode>
        <childnode refid="15020" relation="include">
        </childnode>
      </node>
      <node id="15043">
        <label>include/tvm/tir/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="14998" relation="include">
        </childnode>
        <childnode refid="15030" relation="include">
        </childnode>
        <childnode refid="14969" relation="include">
        </childnode>
        <childnode refid="14970" relation="include">
        </childnode>
      </node>
      <node id="14997">
        <label>include/tvm/te/tensor.h</label>
        <link refid="tensor_8h"/>
        <childnode refid="14966" relation="include">
        </childnode>
        <childnode refid="14967" relation="include">
        </childnode>
        <childnode refid="14998" relation="include">
        </childnode>
        <childnode refid="15028" relation="include">
        </childnode>
        <childnode refid="15030" relation="include">
        </childnode>
      </node>
      <node id="14958">
        <label>include/tvm/relay/adt.h</label>
        <link refid="relay_2adt_8h"/>
        <childnode refid="14957" relation="include">
        </childnode>
        <childnode refid="14959" relation="include">
        </childnode>
        <childnode refid="14952" relation="include">
        </childnode>
        <childnode refid="14953" relation="include">
        </childnode>
      </node>
      <node id="15004">
        <label>topi/include/topi/rocm/injective.h</label>
        <link refid="rocm_2injective_8h"/>
      </node>
      <node id="15022">
        <label>topi/include/topi/detail/tensor_utils.h</label>
        <link refid="tensor__utils_8h"/>
        <childnode refid="14983" relation="include">
        </childnode>
      </node>
      <node id="14945">
        <label>include/tvm/ir/function.h</label>
        <link refid="ir_2function_8h"/>
        <childnode refid="14946" relation="include">
        </childnode>
        <childnode refid="14963" relation="include">
        </childnode>
        <childnode refid="14969" relation="include">
        </childnode>
      </node>
      <node id="15059">
        <label>include/tvm/runtime/module.h</label>
        <link refid="runtime_2module_8h"/>
        <childnode refid="14942" relation="include">
        </childnode>
      </node>
      <node id="15011">
        <label>topi/include/topi/rocm/softmax.h</label>
        <link refid="rocm_2softmax_8h"/>
      </node>
      <node id="14942">
        <label>include/tvm/runtime/packed_func.h</label>
        <link refid="packed_func.h"/>
        <childnode refid="14943" relation="include">
        </childnode>
        <childnode refid="14944" relation="include">
        </childnode>
        <childnode refid="14995" relation="include">
        </childnode>
        <childnode refid="15055" relation="include">
        </childnode>
        <childnode refid="15058" relation="include">
        </childnode>
        <childnode refid="15059" relation="include">
        </childnode>
        <childnode refid="15060" relation="include">
        </childnode>
        <childnode refid="15061" relation="include">
        </childnode>
        <childnode refid="15038" relation="include">
        </childnode>
        <childnode refid="15039" relation="include">
        </childnode>
      </node>
      <node id="14991">
        <label>include/tvm/relay/attrs/nn.h</label>
        <link refid="include_2tvm_2relay_2attrs_2nn_8h"/>
      </node>
      <node id="15009">
        <label>topi/include/topi/rocm/reduction.h</label>
        <link refid="rocm_2reduction_8h"/>
      </node>
      <node id="14969">
        <label>include/tvm/tir/function.h</label>
        <link refid="tir_2function_8h"/>
        <childnode refid="14970" relation="include">
        </childnode>
        <childnode refid="14951" relation="include">
        </childnode>
      </node>
      <node id="15030">
        <label>include/tvm/te/tensor_intrin.h</label>
        <link refid="tensor__intrin_8h"/>
        <childnode refid="15028" relation="include">
        </childnode>
      </node>
      <node id="14977">
        <label>topi/include/topi/vision/reorg.h</label>
        <link refid="reorg_8h"/>
      </node>
      <node id="15056">
        <label>include/tvm/ir/env_func.h</label>
        <link refid="env__func_8h"/>
        <childnode refid="14954" relation="include">
        </childnode>
        <childnode refid="14968" relation="include">
        </childnode>
      </node>
      <node id="14954">
        <label>include/tvm/ir/type_relation.h</label>
        <link refid="type__relation_8h"/>
        <childnode refid="14955" relation="include">
        </childnode>
        <childnode refid="14968" relation="include">
        </childnode>
      </node>
      <node id="15020">
        <label>topi/include/topi/x86/injective.h</label>
        <link refid="x86_2injective_8h"/>
      </node>
      <node id="14981">
        <label>topi/include/topi/nn/flatten.h</label>
        <link refid="flatten_8h"/>
      </node>
      <node id="15024">
        <label>topi/include/topi/nn/dense.h</label>
        <link refid="nn_2dense_8h"/>
        <childnode refid="15000" relation="include">
        </childnode>
        <childnode refid="15001" relation="include">
        </childnode>
      </node>
      <node id="15057">
        <label>include/tvm/node/structural_hash.h</label>
        <link refid="structural__hash_8h"/>
        <childnode refid="15052" relation="include">
        </childnode>
        <childnode refid="15055" relation="include">
        </childnode>
      </node>
      <node id="14971">
        <label>topi/include/topi/detail/constant_utils.h</label>
        <link refid="constant__utils_8h"/>
        <childnode refid="14972" relation="include">
        </childnode>
        <childnode refid="14979" relation="include">
        </childnode>
        <childnode refid="14980" relation="include">
        </childnode>
        <childnode refid="14981" relation="include">
        </childnode>
        <childnode refid="14982" relation="include">
        </childnode>
        <childnode refid="14974" relation="include">
        </childnode>
        <childnode refid="14983" relation="include">
        </childnode>
        <childnode refid="14977" relation="include">
        </childnode>
      </node>
      <node id="14950">
        <label>include/tvm/relay/qnn/transform.h</label>
        <link refid="include_2tvm_2relay_2qnn_2transform_8h"/>
      </node>
      <node id="15008">
        <label>topi/include/topi/cuda/reduction.h</label>
        <link refid="cuda_2reduction_8h"/>
        <childnode refid="15009" relation="include">
        </childnode>
      </node>
      <node id="14956">
        <label>include/tvm/relay/expr.h</label>
        <link refid="relay_2expr_8h"/>
        <childnode refid="14957" relation="include">
        </childnode>
        <childnode refid="14958" relation="include">
        </childnode>
        <childnode refid="14959" relation="include">
        </childnode>
        <childnode refid="14960" relation="include">
        </childnode>
        <childnode refid="14961" relation="include">
        </childnode>
        <childnode refid="14952" relation="include">
        </childnode>
        <childnode refid="14962" relation="include">
        </childnode>
        <childnode refid="14963" relation="include">
        </childnode>
        <childnode refid="14964" relation="include">
        </childnode>
        <childnode refid="14965" relation="include">
        </childnode>
        <childnode refid="14966" relation="include">
        </childnode>
        <childnode refid="14967" relation="include">
        </childnode>
        <childnode refid="14953" relation="include">
        </childnode>
        <childnode refid="14949" relation="include">
        </childnode>
      </node>
      <node id="14984">
        <label>topi/include/topi/nn/dilate.h</label>
        <link refid="dilate_8h"/>
      </node>
      <node id="15034">
        <label>include/tvm/arith/analyzer.h</label>
        <link refid="analyzer_8h"/>
        <childnode refid="14998" relation="include">
        </childnode>
      </node>
      <node id="14978">
        <label>topi/include/topi/nn/bias_add.h</label>
        <link refid="bias__add_8h"/>
      </node>
      <node id="14983">
        <label>topi/include/topi/transform.h</label>
        <link refid="topi_2include_2topi_2transform_8h"/>
        <childnode refid="14978" relation="include">
        </childnode>
        <childnode refid="14974" relation="include">
        </childnode>
        <childnode refid="14977" relation="include">
        </childnode>
      </node>
      <node id="14993">
        <label>include/tvm/relay/attrs/vision.h</label>
        <link refid="vision_8h"/>
      </node>
      <node id="15061">
        <label>include/tvm/runtime/vm.h</label>
        <link refid="vm_8h"/>
        <childnode refid="14964" relation="include">
        </childnode>
      </node>
      <node id="15039">
        <label>include/tvm/target/generic_func.h</label>
        <link refid="generic__func_8h"/>
        <childnode refid="14966" relation="include">
        </childnode>
        <childnode refid="15000" relation="include">
        </childnode>
        <childnode refid="15003" relation="include">
        </childnode>
        <childnode refid="15005" relation="include">
        </childnode>
        <childnode refid="15006" relation="include">
        </childnode>
        <childnode refid="15008" relation="include">
        </childnode>
        <childnode refid="15010" relation="include">
        </childnode>
        <childnode refid="15015" relation="include">
        </childnode>
        <childnode refid="15016" relation="include">
        </childnode>
        <childnode refid="15017" relation="include">
        </childnode>
        <childnode refid="15001" relation="include">
        </childnode>
        <childnode refid="15004" relation="include">
        </childnode>
        <childnode refid="15027" relation="include">
        </childnode>
        <childnode refid="15007" relation="include">
        </childnode>
        <childnode refid="15009" relation="include">
        </childnode>
        <childnode refid="15011" relation="include">
        </childnode>
        <childnode refid="15018" relation="include">
        </childnode>
        <childnode refid="15019" relation="include">
        </childnode>
        <childnode refid="15020" relation="include">
        </childnode>
      </node>
      <node id="14982">
        <label>topi/include/topi/nn.h</label>
        <link refid="topi_2include_2topi_2nn_8h"/>
        <childnode refid="14975" relation="include">
        </childnode>
      </node>
      <node id="15041">
        <label>include/tvm/tir/expr.h</label>
        <link refid="tir_2expr_8h"/>
        <childnode refid="14996" relation="include">
        </childnode>
        <childnode refid="15035" relation="include">
        </childnode>
        <childnode refid="15031" relation="include">
        </childnode>
        <childnode refid="15042" relation="include">
        </childnode>
        <childnode refid="14968" relation="include">
        </childnode>
        <childnode refid="15038" relation="include">
        </childnode>
        <childnode refid="14998" relation="include">
        </childnode>
        <childnode refid="15028" relation="include">
        </childnode>
        <childnode refid="14997" relation="include">
        </childnode>
        <childnode refid="15043" relation="include">
        </childnode>
        <childnode refid="15044" relation="include">
        </childnode>
        <childnode refid="15045" relation="include">
        </childnode>
        <childnode refid="14969" relation="include">
        </childnode>
        <childnode refid="14970" relation="include">
        </childnode>
        <childnode refid="15047" relation="include">
        </childnode>
        <childnode refid="15048" relation="include">
        </childnode>
        <childnode refid="15050" relation="include">
        </childnode>
        <childnode refid="15046" relation="include">
        </childnode>
        <childnode refid="14951" relation="include">
        </childnode>
        <childnode refid="14971" relation="include">
        </childnode>
        <childnode refid="15049" relation="include">
        </childnode>
        <childnode refid="14973" relation="include">
        </childnode>
        <childnode refid="14982" relation="include">
        </childnode>
      </node>
      <node id="14990">
        <label>include/tvm/relay/attrs/image.h</label>
        <link refid="image_8h"/>
      </node>
      <node id="14957">
        <label>include/tvm/ir/type_functor.h</label>
        <link refid="type__functor_8h"/>
      </node>
      <node id="15040">
        <label>include/tvm/target/target_info.h</label>
        <link refid="target__info_8h"/>
      </node>
      <node id="15006">
        <label>topi/include/topi/cuda/pooling.h</label>
        <link refid="cuda_2pooling_8h"/>
        <childnode refid="15007" relation="include">
        </childnode>
      </node>
      <node id="14995">
        <label>include/tvm/node/container.h</label>
        <link refid="node_2container_8h"/>
        <childnode refid="14996" relation="include">
        </childnode>
        <childnode refid="15031" relation="include">
        </childnode>
        <childnode refid="15032" relation="include">
        </childnode>
        <childnode refid="15033" relation="include">
        </childnode>
        <childnode refid="14948" relation="include">
        </childnode>
        <childnode refid="15051" relation="include">
        </childnode>
        <childnode refid="15052" relation="include">
        </childnode>
        <childnode refid="15054" relation="include">
        </childnode>
        <childnode refid="15057" relation="include">
        </childnode>
        <childnode refid="14962" relation="include">
        </childnode>
        <childnode refid="15037" relation="include">
        </childnode>
        <childnode refid="14997" relation="include">
        </childnode>
        <childnode refid="15043" relation="include">
        </childnode>
        <childnode refid="15041" relation="include">
        </childnode>
        <childnode refid="15047" relation="include">
        </childnode>
      </node>
      <node id="15058">
        <label>include/tvm/runtime/device_api.h</label>
        <link refid="device__api_8h"/>
      </node>
      <node id="14976">
        <label>topi/include/topi/nn/softmax.h</label>
        <link refid="nn_2softmax_8h"/>
      </node>
      <node id="15012">
        <label>topi/include/topi/detail/array_utils.h</label>
        <link refid="array__utils_8h"/>
        <childnode refid="15000" relation="include">
        </childnode>
        <childnode refid="15006" relation="include">
        </childnode>
        <childnode refid="15001" relation="include">
        </childnode>
        <childnode refid="15007" relation="include">
        </childnode>
      </node>
      <node id="14974">
        <label>topi/include/topi/reduction.h</label>
        <link refid="reduction_8h"/>
        <childnode refid="14975" relation="include">
        </childnode>
        <childnode refid="14976" relation="include">
        </childnode>
        <childnode refid="14977" relation="include">
        </childnode>
      </node>
      <node id="14998">
        <label>include/tvm/te/operation.h</label>
        <link refid="operation_8h"/>
        <childnode refid="14999" relation="include">
        </childnode>
        <childnode refid="15002" relation="include">
        </childnode>
        <childnode refid="15000" relation="include">
        </childnode>
        <childnode refid="15003" relation="include">
        </childnode>
        <childnode refid="15005" relation="include">
        </childnode>
        <childnode refid="15006" relation="include">
        </childnode>
        <childnode refid="15008" relation="include">
        </childnode>
        <childnode refid="15010" relation="include">
        </childnode>
        <childnode refid="15012" relation="include">
        </childnode>
        <childnode refid="14979" relation="include">
        </childnode>
        <childnode refid="15013" relation="include">
        </childnode>
        <childnode refid="15014" relation="include">
        </childnode>
        <childnode refid="15021" relation="include">
        </childnode>
        <childnode refid="15022" relation="include">
        </childnode>
        <childnode refid="15015" relation="include">
        </childnode>
        <childnode refid="15016" relation="include">
        </childnode>
        <childnode refid="15017" relation="include">
        </childnode>
        <childnode refid="15023" relation="include">
        </childnode>
        <childnode refid="14978" relation="include">
        </childnode>
        <childnode refid="14980" relation="include">
        </childnode>
        <childnode refid="15024" relation="include">
        </childnode>
        <childnode refid="14984" relation="include">
        </childnode>
        <childnode refid="14981" relation="include">
        </childnode>
        <childnode refid="15025" relation="include">
        </childnode>
        <childnode refid="15026" relation="include">
        </childnode>
        <childnode refid="14976" relation="include">
        </childnode>
        <childnode refid="14982" relation="include">
        </childnode>
        <childnode refid="14974" relation="include">
        </childnode>
        <childnode refid="15001" relation="include">
        </childnode>
        <childnode refid="15004" relation="include">
        </childnode>
        <childnode refid="15027" relation="include">
        </childnode>
        <childnode refid="15007" relation="include">
        </childnode>
        <childnode refid="15009" relation="include">
        </childnode>
        <childnode refid="15011" relation="include">
        </childnode>
        <childnode refid="14983" relation="include">
        </childnode>
        <childnode refid="14977" relation="include">
        </childnode>
        <childnode refid="15018" relation="include">
        </childnode>
        <childnode refid="15019" relation="include">
        </childnode>
        <childnode refid="15020" relation="include">
        </childnode>
      </node>
      <node id="14961">
        <label>include/tvm/relay/attrs/transform.h</label>
        <link refid="include_2tvm_2relay_2attrs_2transform_8h"/>
        <childnode refid="14949" relation="include">
        </childnode>
      </node>
      <node id="14953">
        <label>include/tvm/relay/pattern_functor.h</label>
        <link refid="pattern__functor_8h"/>
      </node>
      <node id="15042">
        <label>include/tvm/relay/base.h</label>
        <link refid="base_8h"/>
        <childnode refid="14958" relation="include">
        </childnode>
        <childnode refid="14985" relation="include">
        </childnode>
        <childnode refid="14987" relation="include">
        </childnode>
        <childnode refid="14990" relation="include">
        </childnode>
        <childnode refid="14991" relation="include">
        </childnode>
        <childnode refid="14961" relation="include">
        </childnode>
        <childnode refid="14993" relation="include">
        </childnode>
        <childnode refid="14956" relation="include">
        </childnode>
        <childnode refid="14968" relation="include">
        </childnode>
      </node>
      <node id="15037">
        <label>include/tvm/target/target.h</label>
        <link refid="target_8h"/>
        <childnode refid="14943" relation="include">
        </childnode>
        <childnode refid="14964" relation="include">
        </childnode>
        <childnode refid="14966" relation="include">
        </childnode>
        <childnode refid="14967" relation="include">
        </childnode>
        <childnode refid="15038" relation="include">
        </childnode>
        <childnode refid="15039" relation="include">
        </childnode>
      </node>
      <node id="14943">
        <label>include/tvm/driver/driver_api.h</label>
        <link refid="driver__api_8h"/>
      </node>
      <node id="14944">
        <label>include/tvm/ir/attrs.h</label>
        <link refid="ir_2attrs_8h"/>
        <childnode refid="14945" relation="include">
        </childnode>
        <childnode refid="14955" relation="include">
        </childnode>
        <childnode refid="14954" relation="include">
        </childnode>
        <childnode refid="14958" relation="include">
        </childnode>
        <childnode refid="14985" relation="include">
        </childnode>
        <childnode refid="14986" relation="include">
        </childnode>
        <childnode refid="14987" relation="include">
        </childnode>
        <childnode refid="14988" relation="include">
        </childnode>
        <childnode refid="14989" relation="include">
        </childnode>
        <childnode refid="14990" relation="include">
        </childnode>
        <childnode refid="14960" relation="include">
        </childnode>
        <childnode refid="14991" relation="include">
        </childnode>
        <childnode refid="14992" relation="include">
        </childnode>
        <childnode refid="14961" relation="include">
        </childnode>
        <childnode refid="14993" relation="include">
        </childnode>
        <childnode refid="14956" relation="include">
        </childnode>
        <childnode refid="14968" relation="include">
        </childnode>
        <childnode refid="14994" relation="include">
        </childnode>
      </node>
      <node id="14996">
        <label>include/tvm/arith/bound.h</label>
        <link refid="bound_8h"/>
        <childnode refid="14997" relation="include">
        </childnode>
      </node>
      <node id="15025">
        <label>topi/include/topi/nn/local_response_norm.h</label>
        <link refid="local__response__norm_8h"/>
      </node>
      <node id="15047">
        <label>include/tvm/tir/lowered_func.h</label>
        <link refid="lowered__func_8h"/>
        <childnode refid="14943" relation="include">
        </childnode>
        <childnode refid="15038" relation="include">
        </childnode>
        <childnode refid="14970" relation="include">
        </childnode>
      </node>
      <node id="14980">
        <label>topi/include/topi/nn/bnn.h</label>
        <link refid="nn_2bnn_8h"/>
      </node>
      <node id="14947">
        <label>include/tvm/ir/error.h</label>
        <link refid="error_8h"/>
        <childnode refid="14948" relation="include">
        </childnode>
        <childnode refid="14952" relation="include">
        </childnode>
        <childnode refid="14953" relation="include">
        </childnode>
      </node>
      <node id="15046">
        <label>include/tvm/tir/stmt_functor.h</label>
        <link refid="stmt__functor_8h"/>
      </node>
      <node id="15048">
        <label>include/tvm/tir/op.h</label>
        <link refid="tir_2op_8h"/>
        <childnode refid="14998" relation="include">
        </childnode>
        <childnode refid="14997" relation="include">
        </childnode>
        <childnode refid="15043" relation="include">
        </childnode>
        <childnode refid="15044" relation="include">
        </childnode>
        <childnode refid="15049" relation="include">
        </childnode>
        <childnode refid="14982" relation="include">
        </childnode>
      </node>
      <node id="15033">
        <label>include/tvm/ir/expr.h</label>
        <link refid="ir_2expr_8h"/>
        <childnode refid="15034" relation="include">
        </childnode>
        <childnode refid="14996" relation="include">
        </childnode>
        <childnode refid="15035" relation="include">
        </childnode>
        <childnode refid="15031" relation="include">
        </childnode>
        <childnode refid="15032" relation="include">
        </childnode>
        <childnode refid="14944" relation="include">
        </childnode>
        <childnode refid="14945" relation="include">
        </childnode>
        <childnode refid="14946" relation="include">
        </childnode>
        <childnode refid="14955" relation="include">
        </childnode>
        <childnode refid="15036" relation="include">
        </childnode>
        <childnode refid="14956" relation="include">
        </childnode>
        <childnode refid="15037" relation="include">
        </childnode>
        <childnode refid="15040" relation="include">
        </childnode>
        <childnode refid="15041" relation="include">
        </childnode>
      </node>
      <node id="15005">
        <label>topi/include/topi/cuda/normalization.h</label>
        <link refid="cuda_2normalization_8h"/>
      </node>
      <node id="15010">
        <label>topi/include/topi/cuda/softmax.h</label>
        <link refid="cuda_2softmax_8h"/>
        <childnode refid="15011" relation="include">
        </childnode>
      </node>
      <node id="15013">
        <label>topi/include/topi/detail/extern.h</label>
        <link refid="detail_2extern_8h"/>
        <childnode refid="14999" relation="include">
        </childnode>
        <childnode refid="15002" relation="include">
        </childnode>
      </node>
      <node id="14963">
        <label>include/tvm/relay/function.h</label>
        <link refid="relay_2function_8h"/>
        <childnode refid="14959" relation="include">
        </childnode>
        <childnode refid="14952" relation="include">
        </childnode>
        <childnode refid="14949" relation="include">
        </childnode>
      </node>
      <node id="14948">
        <label>include/tvm/ir/transform.h</label>
        <link refid="include_2tvm_2ir_2transform_8h"/>
        <childnode refid="14949" relation="include">
        </childnode>
        <childnode refid="14951" relation="include">
        </childnode>
      </node>
      <node id="15019">
        <label>topi/include/topi/x86/default.h</label>
        <link refid="x86_2default_8h"/>
      </node>
      <node id="15029">
        <label>include/tvm/te/schedule_pass.h</label>
        <link refid="schedule__pass_8h"/>
        <childnode refid="14943" relation="include">
        </childnode>
        <childnode refid="15000" relation="include">
        </childnode>
        <childnode refid="15003" relation="include">
        </childnode>
        <childnode refid="15005" relation="include">
        </childnode>
        <childnode refid="15006" relation="include">
        </childnode>
        <childnode refid="15008" relation="include">
        </childnode>
        <childnode refid="15010" relation="include">
        </childnode>
        <childnode refid="15015" relation="include">
        </childnode>
        <childnode refid="15016" relation="include">
        </childnode>
        <childnode refid="15017" relation="include">
        </childnode>
        <childnode refid="15019" relation="include">
        </childnode>
      </node>
      <node id="14951">
        <label>include/tvm/tir/transform.h</label>
        <link refid="include_2tvm_2tir_2transform_8h"/>
      </node>
      <node id="15032">
        <label>include/tvm/ir/adt.h</label>
        <link refid="ir_2adt_8h"/>
        <childnode refid="14946" relation="include">
        </childnode>
        <childnode refid="14958" relation="include">
        </childnode>
      </node>
      <node id="15007">
        <label>topi/include/topi/rocm/pooling.h</label>
        <link refid="rocm_2pooling_8h"/>
      </node>
      <node id="14979">
        <label>topi/include/topi/detail/broadcast.h</label>
        <link refid="detail_2broadcast_8h"/>
        <childnode refid="14972" relation="include">
        </childnode>
      </node>
      <node id="14989">
        <label>include/tvm/relay/attrs/device_copy.h</label>
        <link refid="device__copy_8h"/>
      </node>
      <node id="14999">
        <label>topi/include/topi/contrib/cublas.h</label>
        <link refid="cublas_8h"/>
        <childnode refid="15000" relation="include">
        </childnode>
      </node>
      <node id="15050">
        <label>include/tvm/tir/stmt.h</label>
        <link refid="stmt_8h"/>
        <childnode refid="14996" relation="include">
        </childnode>
        <childnode refid="14969" relation="include">
        </childnode>
        <childnode refid="15047" relation="include">
        </childnode>
        <childnode refid="15048" relation="include">
        </childnode>
        <childnode refid="15046" relation="include">
        </childnode>
      </node>
      <node id="15001">
        <label>topi/include/topi/rocm/dense.h</label>
        <link refid="rocm_2dense_8h"/>
      </node>
      <node id="15003">
        <label>topi/include/topi/cuda/injective.h</label>
        <link refid="cuda_2injective_8h"/>
        <childnode refid="15004" relation="include">
        </childnode>
      </node>
      <node id="15054">
        <label>include/tvm/node/structural_equal.h</label>
        <link refid="structural__equal_8h"/>
        <childnode refid="15052" relation="include">
        </childnode>
        <childnode refid="15055" relation="include">
        </childnode>
      </node>
      <node id="15018">
        <label>topi/include/topi/x86/bnn.h</label>
        <link refid="x86_2bnn_8h"/>
      </node>
      <node id="15031">
        <label>include/tvm/arith/pattern.h</label>
        <link refid="pattern_8h"/>
      </node>
      <node id="15051">
        <label>include/tvm/ir/type.h</label>
        <link refid="ir_2type_8h"/>
        <childnode refid="15032" relation="include">
        </childnode>
        <childnode refid="15033" relation="include">
        </childnode>
        <childnode refid="14946" relation="include">
        </childnode>
        <childnode refid="14955" relation="include">
        </childnode>
        <childnode refid="15036" relation="include">
        </childnode>
        <childnode refid="14954" relation="include">
        </childnode>
        <childnode refid="14968" relation="include">
        </childnode>
        <childnode refid="15048" relation="include">
        </childnode>
      </node>
      <node id="14970">
        <label>include/tvm/tir/ir_pass.h</label>
        <link refid="ir__pass_8h"/>
        <childnode refid="14971" relation="include">
        </childnode>
        <childnode refid="14973" relation="include">
        </childnode>
        <childnode refid="14980" relation="include">
        </childnode>
        <childnode refid="14984" relation="include">
        </childnode>
        <childnode refid="14975" relation="include">
        </childnode>
        <childnode refid="14982" relation="include">
        </childnode>
      </node>
      <node id="14975">
        <label>topi/include/topi/nn/pooling.h</label>
        <link refid="nn_2pooling_8h"/>
      </node>
      <node id="14946">
        <label>include/tvm/ir/module.h</label>
        <link refid="ir_2module_8h"/>
        <childnode refid="14947" relation="include">
        </childnode>
        <childnode refid="14948" relation="include">
        </childnode>
        <childnode refid="14954" relation="include">
        </childnode>
        <childnode refid="14959" relation="include">
        </childnode>
        <childnode refid="14956" relation="include">
        </childnode>
        <childnode refid="14962" relation="include">
        </childnode>
        <childnode refid="14964" relation="include">
        </childnode>
      </node>
      <node id="15052">
        <label>include/tvm/node/node.h</label>
        <link refid="node_8h"/>
        <childnode refid="15032" relation="include">
        </childnode>
        <childnode refid="15033" relation="include">
        </childnode>
        <childnode refid="15053" relation="include">
        </childnode>
        <childnode refid="15051" relation="include">
        </childnode>
        <childnode refid="15042" relation="include">
        </childnode>
        <childnode refid="15041" relation="include">
        </childnode>
      </node>
      <node id="14968">
        <label>include/tvm/relay/type.h</label>
        <link refid="relay_2type_8h"/>
        <childnode refid="14958" relation="include">
        </childnode>
        <childnode refid="14959" relation="include">
        </childnode>
        <childnode refid="14956" relation="include">
        </childnode>
        <childnode refid="14965" relation="include">
        </childnode>
        <childnode refid="14966" relation="include">
        </childnode>
      </node>
      <node id="15015">
        <label>topi/include/topi/generic/default.h</label>
        <link refid="generic_2default_8h"/>
      </node>
      <node id="14992">
        <label>include/tvm/relay/attrs/reduce.h</label>
        <link refid="reduce_8h"/>
      </node>
      <node id="14972">
        <label>topi/include/topi/broadcast.h</label>
        <link refid="broadcast_8h"/>
        <childnode refid="14973" relation="include">
        </childnode>
        <childnode refid="14978" relation="include">
        </childnode>
        <childnode refid="14974" relation="include">
        </childnode>
      </node>
      <node id="14960">
        <label>include/tvm/relay/attrs/memory.h</label>
        <link refid="relay_2attrs_2memory_8h"/>
      </node>
      <node id="14962">
        <label>include/tvm/relay/feature.h</label>
        <link refid="feature_8h"/>
      </node>
      <node id="14949">
        <label>include/tvm/relay/transform.h</label>
        <link refid="include_2tvm_2relay_2transform_8h"/>
        <childnode refid="14950" relation="include">
        </childnode>
      </node>
      <node id="15026">
        <label>topi/include/topi/nn/mapping.h</label>
        <link refid="mapping_8h"/>
      </node>
      <node id="15027">
        <label>topi/include/topi/rocm/normalization.h</label>
        <link refid="rocm_2normalization_8h"/>
      </node>
      <node id="14952">
        <label>include/tvm/relay/expr_functor.h</label>
        <link refid="relay_2expr__functor_8h"/>
      </node>
      <node id="15002">
        <label>topi/include/topi/contrib/rocblas.h</label>
        <link refid="rocblas_8h"/>
        <childnode refid="15001" relation="include">
        </childnode>
      </node>
      <node id="14955">
        <label>include/tvm/ir/op.h</label>
        <link refid="ir_2op_8h"/>
        <childnode refid="14956" relation="include">
        </childnode>
        <childnode refid="14965" relation="include">
        </childnode>
      </node>
      <node id="15021">
        <label>topi/include/topi/detail/ravel_unravel.h</label>
        <link refid="ravel__unravel_8h"/>
        <childnode refid="14974" relation="include">
        </childnode>
        <childnode refid="14983" relation="include">
        </childnode>
      </node>
      <node id="15045">
        <label>include/tvm/tir/expr_functor.h</label>
        <link refid="tir_2expr__functor_8h"/>
        <childnode refid="15046" relation="include">
        </childnode>
      </node>
      <node id="15016">
        <label>topi/include/topi/generic/extern.h</label>
        <link refid="generic_2extern_8h"/>
        <childnode refid="15000" relation="include">
        </childnode>
        <childnode refid="15001" relation="include">
        </childnode>
      </node>
      <node id="15055">
        <label>include/tvm/node/reflection.h</label>
        <link refid="reflection_8h"/>
        <childnode refid="15056" relation="include">
        </childnode>
        <childnode refid="15052" relation="include">
        </childnode>
      </node>
      <node id="15049">
        <label>topi/include/topi/detail/pad_utils.h</label>
        <link refid="pad__utils_8h"/>
        <childnode refid="14975" relation="include">
        </childnode>
      </node>
      <node id="14966">
        <label>include/tvm/relay/op_attr_types.h</label>
        <link refid="op__attr__types_8h"/>
        <childnode refid="14967" relation="include">
        </childnode>
        <childnode refid="14949" relation="include">
        </childnode>
      </node>
      <node id="15000">
        <label>topi/include/topi/cuda/dense.h</label>
        <link refid="cuda_2dense_8h"/>
        <childnode refid="15001" relation="include">
        </childnode>
      </node>
      <node id="15017">
        <label>topi/include/topi/generic/injective.h</label>
        <link refid="generic_2injective_8h"/>
        <childnode refid="15016" relation="include">
        </childnode>
      </node>
      <node id="15060">
        <label>include/tvm/runtime/registry.h</label>
        <link refid="registry_8h"/>
        <childnode refid="14955" relation="include">
        </childnode>
        <childnode refid="14968" relation="include">
        </childnode>
        <childnode refid="15061" relation="include">
        </childnode>
      </node>
      <node id="14988">
        <label>include/tvm/relay/attrs/debug.h</label>
        <link refid="debug_8h"/>
      </node>
      <node id="14985">
        <label>include/tvm/relay/attrs/algorithm.h</label>
        <link refid="algorithm_8h"/>
      </node>
      <node id="14987">
        <label>include/tvm/relay/attrs/bitserial.h</label>
        <link refid="bitserial_8h"/>
      </node>
      <node id="15036">
        <label>include/tvm/ir/tensor_type.h</label>
        <link refid="tensor__type_8h"/>
        <childnode refid="14968" relation="include">
        </childnode>
      </node>
      <node id="15028">
        <label>include/tvm/te/schedule.h</label>
        <link refid="schedule_8h"/>
        <childnode refid="14966" relation="include">
        </childnode>
        <childnode refid="14967" relation="include">
        </childnode>
        <childnode refid="14998" relation="include">
        </childnode>
        <childnode refid="15029" relation="include">
        </childnode>
        <childnode refid="14970" relation="include">
        </childnode>
      </node>
      <node id="14994">
        <label>include/tvm/relay/qnn/attrs.h</label>
        <link refid="relay_2qnn_2attrs_8h"/>
      </node>
      <node id="15038">
        <label>include/tvm/target/codegen.h</label>
        <link refid="codegen_8h"/>
      </node>
      <node id="14959">
        <label>include/tvm/relay/analysis.h</label>
        <link refid="analysis_8h"/>
      </node>
      <node id="14973">
        <label>topi/include/topi/elemwise.h</label>
        <link refid="elemwise_8h"/>
        <childnode refid="14974" relation="include">
        </childnode>
      </node>
      <node id="14965">
        <label>include/tvm/relay/op.h</label>
        <link refid="relay_2op_8h"/>
        <childnode refid="14952" relation="include">
        </childnode>
        <childnode refid="14953" relation="include">
        </childnode>
        <childnode refid="14949" relation="include">
        </childnode>
      </node>
      <node id="14967">
        <label>include/tvm/relay/op_strategy.h</label>
        <link refid="op__strategy_8h"/>
      </node>
      <node id="14986">
        <label>include/tvm/relay/attrs/annotation.h</label>
        <link refid="annotation_8h"/>
      </node>
      <node id="15044">
        <label>include/tvm/tir/data_layout.h</label>
        <link refid="data__layout_8h"/>
        <childnode refid="14966" relation="include">
        </childnode>
        <childnode refid="14983" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classtvm_1_1runtime_1_1PackedFunc" prot="public">tvm::runtime::PackedFunc</innerclass>
    <innerclass refid="classtvm_1_1runtime_1_1TypedPackedFunc" prot="public">tvm::runtime::TypedPackedFunc</innerclass>
    <innerclass refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4" prot="public">tvm::runtime::TypedPackedFunc&lt; R(Args...)&gt;</innerclass>
    <innerclass refid="classtvm_1_1runtime_1_1TVMArgs" prot="public">tvm::runtime::TVMArgs</innerclass>
    <innerclass refid="structtvm_1_1runtime_1_1ObjectTypeChecker" prot="public">tvm::runtime::ObjectTypeChecker</innerclass>
    <innerclass refid="classtvm_1_1runtime_1_1TVMPODValue__" prot="public">tvm::runtime::TVMPODValue_</innerclass>
    <innerclass refid="classtvm_1_1runtime_1_1TVMArgValue" prot="public">tvm::runtime::TVMArgValue</innerclass>
    <innerclass refid="classtvm_1_1runtime_1_1TVMRetValue" prot="public">tvm::runtime::TVMRetValue</innerclass>
    <innerclass refid="classtvm_1_1runtime_1_1TVMArgsSetter" prot="public">tvm::runtime::TVMArgsSetter</innerclass>
    <innernamespace refid="namespacetvm">tvm</innernamespace>
    <innernamespace refid="namespacetvm_1_1runtime">tvm::runtime</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="packed__func_8h_1a50e8d21ff57c58c35bc4cc9310e64273" prot="public" static="no">
        <name>TVM_RUNTIME_HEADER_ONLY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="45" column="9" bodyfile="include/tvm/runtime/packed_func.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" prot="public" static="no">
        <name>TVM_CHECK_TYPE_CODE</name>
        <param><defname>CODE</defname></param>
        <param><defname>T</defname></param>
        <initializer>CHECK_EQ(CODE, T) &lt;&lt; &quot; expected &quot;                            \
  &lt;&lt; TypeCode2Str(T) &lt;&lt; &quot; but get &quot; &lt;&lt; TypeCode2Str(CODE)      \</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="384" column="9" bodyfile="include/tvm/runtime/packed_func.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="packed__func_8h_1aee75208638f500a4ce5e726c9d87d8ff" prot="public" static="no">
        <name>TVM_DLL_EXPORT_PACKED_FUNC</name>
        <param><defname>ExportName</defname></param>
        <param><defname>Function</defname></param>
        <initializer>extern &quot;C&quot; {                                                          \
  TVM_DLL int ExportName(<ref refid="unionTVMValue" kindref="compound">TVMValue</ref>* args,                                \
                         int* type_code,                                \
                         int num_args,                                  \
                         <ref refid="unionTVMValue" kindref="compound">TVMValue</ref>* out_value,                           \
                         int* out_type_code);                           \
  int ExportName(<ref refid="unionTVMValue" kindref="compound">TVMValue</ref>* args,                                        \
                 int* type_code,                                        \
                 int num_args,                                          \
                 <ref refid="unionTVMValue" kindref="compound">TVMValue</ref>* out_value,                                   \
                 int* out_type_code) {                                  \
    try {                                                               \
      ::<ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">tvm::runtime::TVMRetValue</ref> rv;                                   \
      Function(::<ref refid="classtvm_1_1runtime_1_1TVMArgs" kindref="compound">tvm::runtime::TVMArgs</ref>(                                 \
          args, type_code, num_args), &amp;rv);                             \
      rv.MoveToCHost(out_value, out_type_code);                         \
      return 0;                                                         \
    } catch (const ::std::runtime_error&amp; _except_) {                    \
      <ref refid="c__runtime__api_8h_1a477111f9accd70633dc5f2e7139b6cf4" kindref="member">TVMAPISetLastError</ref>(_except_.what());                              \
      return -1;                                                        \
    }                                                                   \
  }                                                                     \
  }</initializer>
        <briefdescription>
<para>Export a function with the PackedFunc signature as a PackedFunc that can be loaded by LibraryModule. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ExportName</parametername>
</parameternamelist>
<parameterdescription>
<para>The symbol name to be exported. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Function</parametername>
</parameternamelist>
<parameterdescription>
<para>The function with PackedFunc signature. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>PackedFunc</para></simplesect>
<programlisting><codeline><highlight class="normal">void<sp/>AddOne_(TVMArgs<sp/>args,<sp/>TVMRetValue*<sp/>rv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>value<sp/>=<sp/>args[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*rv<sp/>=<sp/>value<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Expose<sp/>the<sp/>function<sp/>as<sp/>&quot;AddOne&quot;</highlight></codeline>
<codeline><highlight class="normal">TVM_DLL_EXPORT_PACKED_FUNC(AddOne,<sp/>AddOne_);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="913" column="9" bodyfile="include/tvm/runtime/packed_func.h" bodystart="913" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="packed__func_8h_1ae5b445392a64daa55bef53b4cf53025c" prot="public" static="no">
        <name>TVM_DLL_EXPORT_TYPED_FUNC</name>
        <param><defname>ExportName</defname></param>
        <param><defname>Function</defname></param>
        <initializer>extern &quot;C&quot; {                                                          \
  TVM_DLL int ExportName(<ref refid="unionTVMValue" kindref="compound">TVMValue</ref>* args,                                \
                         int* type_code,                                \
                         int num_args,                                  \
                         <ref refid="unionTVMValue" kindref="compound">TVMValue</ref>* out_value,                           \
                         int* out_type_code) {                          \
    try {                                                               \
      auto f = Function;                                                \
      using FType = ::tvm::runtime::detail::                            \
                    function_signature&lt;decltype(f)&gt;::FType;             \
      ::<ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">tvm::runtime::TVMRetValue</ref> rv;                                   \
      ::tvm::runtime::detail::unpack_call_by_signature&lt;FType&gt;::run(     \
           f,                                                           \
           ::<ref refid="classtvm_1_1runtime_1_1TVMArgs" kindref="compound">tvm::runtime::TVMArgs</ref>(args, type_code, num_args), &amp;rv);    \
      rv.MoveToCHost(out_value, out_type_code);                         \
      return 0;                                                         \
    } catch (const ::std::runtime_error&amp; _except_) {                    \
      <ref refid="c__runtime__api_8h_1a477111f9accd70633dc5f2e7139b6cf4" kindref="member">TVMAPISetLastError</ref>(_except_.what());                              \
      return -1;                                                        \
    }                                                                   \
    }                                                                   \
  }</initializer>
        <briefdescription>
<para>Export typed function as a PackedFunc that can be loaded by LibraryModule. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ExportName</parametername>
</parameternamelist>
<parameterdescription>
<para>The symbol name to be exported. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Function</parametername>
</parameternamelist>
<parameterdescription>
<para>The typed function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>ExportName and Function must be different, see code examples below.</para></simplesect>
<simplesect kind="see"><para>TypedPackedFunc</para></simplesect>
<programlisting><codeline><highlight class="normal">int<sp/>AddOne_(int<sp/>x)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>x<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Expose<sp/>the<sp/>function<sp/>as<sp/>&quot;AddOne&quot;</highlight></codeline>
<codeline><highlight class="normal">TVM_DLL_EXPORT_TYPED_FUNC(AddOne,<sp/>AddOne_);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Expose<sp/>the<sp/>function<sp/>as<sp/>&quot;SubOne&quot;</highlight></codeline>
<codeline><highlight class="normal">TVM_DLL_EXPORT_TYPED_FUNC(SubOne,<sp/>[](int<sp/>x)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>x<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>following<sp/>code<sp/>will<sp/>cause<sp/>compilation<sp/>error.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Because<sp/>the<sp/>same<sp/>Function<sp/>and<sp/>ExortName</highlight></codeline>
<codeline><highlight class="normal">//<sp/>TVM_DLL_EXPORT_TYPED_FUNC(AddOne_,<sp/>AddOne_);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>following<sp/>code<sp/>is<sp/>OK,<sp/>assuming<sp/>the<sp/>macro</highlight></codeline>
<codeline><highlight class="normal">//<sp/>is<sp/>in<sp/>a<sp/>different<sp/>namespace<sp/>from<sp/>xyz</highlight></codeline>
<codeline><highlight class="normal">//<sp/>TVM_DLL_EXPORT_TYPED_FUNC(AddOne_,<sp/>xyz::AddOne_);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/packed_func.h" line="973" column="9" bodyfile="include/tvm/runtime/packed_func.h" bodystart="973" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Type-erased function used across TVM API. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor">#ifndef<sp/>TVM_RUNTIME_PACKED_FUNC_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TVM_RUNTIME_PACKED_FUNC_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dmlc/logging.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="c__runtime__api_8h" kindref="compound">tvm/runtime/c_runtime_api.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="runtime_2module_8h" kindref="compound">tvm/runtime/module.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ndarray_8h" kindref="compound">tvm/runtime/ndarray.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="data__type_8h" kindref="compound">tvm/runtime/data_type.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="object_8h" kindref="compound">tvm/runtime/object.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Whether<sp/>use<sp/>TVM<sp/>runtime<sp/>in<sp/>header<sp/>only<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TVM_RUNTIME_HEADER_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="packed__func_8h_1a50e8d21ff57c58c35bc4cc9310e64273" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TVM_RUNTIME_HEADER_ONLY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetvm" kindref="compound">tvm</ref><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>forward<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Integer;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PrimExpr;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">runtime<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">TVM_DLL<sp/>std::string<sp/><ref refid="namespacetvm_1_1runtime_1a06a49d761ea6373557c24c01eaceb07d" kindref="member">GetCustomTypeName</ref>(uint8_t<sp/>type_code);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">TVM_DLL<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1runtime_1a1b8eedadc5a269b2f9614ce69a9932e7" kindref="member">GetCustomTypeRegistered</ref>(uint8_t<sp/>type_code);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">TVM_DLL<sp/>uint8_t<sp/><ref refid="namespacetvm_1_1runtime_1ac6d167947285dff3c780bd5d01ace9b9" kindref="member">ParseCustomDatatype</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><ref refid="namespacetvm_1_1te_1ad78173237a27f7145c6b198be85b1f0d" kindref="member">scan</ref>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>forward<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TVMArgs;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TVMArgValue;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TVMRetValue;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TVMArgsSetter;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="classtvm_1_1runtime_1_1PackedFunc" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="111" refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" kindref="member">FType</ref><sp/>=<sp/>std::function&lt;void<sp/>(TVMArgs<sp/>args,<sp/>TVMRetValue*<sp/>rv)&gt;;</highlight></codeline>
<codeline lineno="113" refid="classtvm_1_1runtime_1_1PackedFunc_1ac04ed1678799ef2f0d22204edddcdb41" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ac04ed1678799ef2f0d22204edddcdb41" kindref="member">PackedFunc</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="115" refid="classtvm_1_1runtime_1_1PackedFunc_1afde7eaa98f6cb12c7e80da16e859c210" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1afde7eaa98f6cb12c7e80da16e859c210" kindref="member">PackedFunc</ref>(std::nullptr_t<sp/>null)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(*)</highlight></codeline>
<codeline lineno="120" refid="classtvm_1_1runtime_1_1PackedFunc_1a66c99486332437e0459429dd00db2710" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1a66c99486332437e0459429dd00db2710" kindref="member">PackedFunc</ref>(<ref refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" kindref="member">FType</ref><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1a14fb895cbdceecbe566588b7467dafc3" kindref="member">body</ref>)<sp/>:<sp/>body_(body)<sp/>{}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1a4e0c70245a080d914946285ff3ebc0d7" kindref="member">operator()</ref>(Args&amp;&amp;<sp/>...args)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1aa90598e3e64b32de7ebfc5e09208afa4" kindref="member">CallPacked</ref>(<ref refid="classtvm_1_1runtime_1_1TVMArgs" kindref="compound">TVMArgs</ref><sp/>args,<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>*<sp/>rv)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" kindref="member">FType</ref><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1a14fb895cbdceecbe566588b7467dafc3" kindref="member">body</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146" refid="classtvm_1_1runtime_1_1PackedFunc_1acfc585ee6554c18706fcfe89d3c6df87" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1acfc585ee6554c18706fcfe89d3c6df87" kindref="member">operator==</ref>(std::nullptr_t<sp/>null)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>body_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150" refid="classtvm_1_1runtime_1_1PackedFunc_1ad70b44cf7f2719f1e91fe7c865790865" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ad70b44cf7f2719f1e91fe7c865790865" kindref="member">operator!=</ref>(std::nullptr_t<sp/>null)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>body_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" kindref="member">FType</ref><sp/>body_;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">};</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FType&gt;</highlight></codeline>
<codeline lineno="163" refid="classtvm_1_1runtime_1_1TypedPackedFunc" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="198" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref>&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="201" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1afaeae1b79f815895ab9ab09b444e7ba3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4" kindref="compound">TSelf</ref><sp/>=<sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref>&lt;R(Args...)&gt;;</highlight></codeline>
<codeline lineno="203" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a4abadc6786dd14a3aed6e2b5b342d1d6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a4abadc6786dd14a3aed6e2b5b342d1d6" kindref="member">TypedPackedFunc</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="205" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1af45a2ceff92e6f6c394ea766a45027a0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1af45a2ceff92e6f6c394ea766a45027a0" kindref="member">TypedPackedFunc</ref>(std::nullptr_t<sp/>null)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(*)</highlight></codeline>
<codeline lineno="223"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref>(<ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref><sp/>packed);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(*)</highlight></codeline>
<codeline lineno="228"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/>value);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(*)</highlight></codeline>
<codeline lineno="233"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgValue" kindref="compound">TVMArgValue</ref>&amp;<sp/>value);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(*)</highlight></codeline>
<codeline lineno="249"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FLambda,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;FLambda,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;R(Args...)&gt;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="254" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a36ca0d1876544463ee848766e70e5e96" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a36ca0d1876544463ee848766e70e5e96" kindref="member">TypedPackedFunc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FLambda&amp;<sp/>typed_lambda)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(*)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;AssignTypedLambda(typed_lambda);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FLambda,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;FLambda,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;R(Args...)&gt;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="278" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a8dd1fbae84cb9597c52977b0e8db64dc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4" kindref="compound">TSelf</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a8dd1fbae84cb9597c52977b0e8db64dc" kindref="member">operator=</ref>(FLambda<sp/>typed_lambda)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(*)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;AssignTypedLambda(typed_lambda);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1aa590b3e712e06867805b41aaf17019ed" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4" kindref="compound">TSelf</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1aa590b3e712e06867805b41aaf17019ed" kindref="member">operator=</ref>(<ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref><sp/>packed)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>packed_<sp/>=<sp/>packed;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>R<sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1a4e0c70245a080d914946285ff3ebc0d7" kindref="member">operator()</ref>(Args<sp/>...args)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1ad81c4bf7bbdfab20e9c9d58699d6c4a5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ac04ed1678799ef2f0d22204edddcdb41" kindref="member">PackedFunc</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>packed();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="307" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1ac0ad0eb56ab0f12d91adb50dab38ddab" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1ac0ad0eb56ab0f12d91adb50dab38ddab" kindref="member">packed</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>packed_;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1afa9327d129526d40c966fafc35255cad" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1afa9327d129526d40c966fafc35255cad" kindref="member">operator==</ref>(std::nullptr_t<sp/>null)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>packed_<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a890186f176c5553331af9c9de8d60e5c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a890186f176c5553331af9c9de8d60e5c" kindref="member">operator!=</ref>(std::nullptr_t<sp/>null)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>packed_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="320" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1ae0ea8b4adc6dab8c74086bceaef6b3e1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref><sp/>packed_;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FLambda&gt;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssignTypedLambda(FLambda<sp/>flambda);</highlight></codeline>
<codeline lineno="332"><highlight class="normal">};</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="classtvm_1_1runtime_1_1TVMArgs" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1TVMArgs" kindref="compound">TVMArgs</ref><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="337" refid="classtvm_1_1runtime_1_1TVMArgs_1a3b99059e2f1ad08c99b42b5bee82752f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionTVMValue" kindref="compound">TVMValue</ref>*<sp/><ref refid="classtvm_1_1runtime_1_1TVMArgs_1a3b99059e2f1ad08c99b42b5bee82752f" kindref="member">values</ref>;</highlight></codeline>
<codeline lineno="338" refid="classtvm_1_1runtime_1_1TVMArgs_1abdb0f929087b14eb28d75c7a047cef9e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="classtvm_1_1runtime_1_1TVMArgs_1abdb0f929087b14eb28d75c7a047cef9e" kindref="member">type_codes</ref>;</highlight></codeline>
<codeline lineno="339" refid="classtvm_1_1runtime_1_1TVMArgs_1afec79c909bdf103a01cdb4732c0afdf3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgs_1afec79c909bdf103a01cdb4732c0afdf3" kindref="member">num_args</ref>;</highlight></codeline>
<codeline lineno="346" refid="classtvm_1_1runtime_1_1TVMArgs_1a5d2aeac7387e436e6e19d7a6dfe91307" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgs_1a5d2aeac7387e436e6e19d7a6dfe91307" kindref="member">TVMArgs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionTVMValue" kindref="compound">TVMValue</ref>*<sp/>values,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>type_codes,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_args)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>values(values),</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_codes(type_codes),</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_args(num_args)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgValue" kindref="compound">TVMArgValue</ref><sp/>operator[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">};</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacetvm_1_1runtime_1a504dc7b1fd693412576703f44bcc3cfb" kindref="member">TypeCode2Str</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_code);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>DLDataType<sp/><ref refid="namespacetvm_1_1runtime_1a277f104e659f71cd8885744700016341" kindref="member">String2DLDataType</ref>(std::string<sp/>s);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacetvm_1_1runtime_1ac360f2d9815036ab1b4d84d9cfb46b4f" kindref="member">DLDataType2String</ref>(DLDataType<sp/>t);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>macro<sp/>to<sp/>check<sp/>type<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TVM_CHECK_TYPE_CODE(CODE,<sp/>T)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor"><sp/><sp/>CHECK_EQ(CODE,<sp/>T)<sp/>&lt;&lt;<sp/>&quot;<sp/>expected<sp/>&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor"><sp/><sp/>&lt;&lt;<sp/>TypeCode2Str(T)<sp/>&lt;&lt;<sp/>&quot;<sp/>but<sp/>get<sp/>&quot;<sp/>&lt;&lt;<sp/>TypeCode2Str(CODE)<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="387"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="393" refid="structtvm_1_1runtime_1_1ObjectTypeChecker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtvm_1_1runtime_1_1ObjectTypeChecker" kindref="compound">ObjectTypeChecker</ref><sp/>{</highlight></codeline>
<codeline lineno="394" refid="structtvm_1_1runtime_1_1ObjectTypeChecker_1aba05348357ac739ea2d3deecc7a1b202" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structtvm_1_1runtime_1_1ObjectTypeChecker_1aba05348357ac739ea2d3deecc7a1b202" kindref="member">Check</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1Object" kindref="compound">Object</ref>*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ContainerType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::ContainerType;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr-&gt;<ref refid="classtvm_1_1runtime_1_1Object_1af1359ebff2c328ff0bb80083937c95dd" kindref="member">IsInstance</ref>&lt;ContainerType&gt;();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="399" refid="structtvm_1_1runtime_1_1ObjectTypeChecker_1a3498eb545b33e1c23a417fa58ec51dd6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="structtvm_1_1runtime_1_1ObjectTypeChecker_1a3498eb545b33e1c23a417fa58ec51dd6" kindref="member">TypeName</ref>()<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ContainerType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::ContainerType;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ContainerType::_type_key;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal">};</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="classtvm_1_1runtime_1_1TVMPODValue__" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1TVMPODValue__" kindref="compound">TVMPODValue_</ref><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="411" refid="classtvm_1_1runtime_1_1TVMPODValue___1a5ce868719163d4131526a51ae50ee58d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>double()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>automatic<sp/>conversion<sp/>from<sp/>int<sp/>to<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>avoids<sp/>errors<sp/>when<sp/>user<sp/>pass<sp/>in<sp/>int<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>frontend<sp/>while<sp/>the<sp/>API<sp/>expects<sp/>a<sp/>float.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/>kDLInt)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.v_int64);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/>kDLFloat);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.v_float64;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="421" refid="classtvm_1_1runtime_1_1TVMPODValue___1ac165086c9b9eb10ec15843681beedb3b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>int64_t()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/>kDLInt);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.v_int64;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="425" refid="classtvm_1_1runtime_1_1TVMPODValue___1abee98b24b41c9cfd0731ba5c5f5846a3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>uint64_t()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/>kDLInt);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.v_int64;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="429" refid="classtvm_1_1runtime_1_1TVMPODValue___1a50fddd03f30c0feb612cdb9eb2e2ad70" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>int()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/>kDLInt);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_LE(value_.v_int64,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetvm_1ab49bad0808ba033343e72ba37b39af2e" kindref="member">std::numeric_limits&lt;int&gt;::max</ref>());</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.v_int64);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="435" refid="classtvm_1_1runtime_1_1TVMPODValue___1a6d3e2520d7329a8ef0d4ada22ece5fa8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/>kDLInt);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.v_int64<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="439" refid="classtvm_1_1runtime_1_1TVMPODValue___1a2b823e57fb67bba8c052d7c2f8892253" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a8bd637c4caa55b04490fe26b250e3d86" kindref="member">kTVMDLTensorHandle</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.v_handle;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a9387f774bc8453afe4aa4cd17789a405" kindref="member">kTVMOpaqueHandle</ref>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.v_handle;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="445" refid="classtvm_1_1runtime_1_1TVMPODValue___1ad4ac7900cf899e31f5834c8ac3a2d6d1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>DLTensor*()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a8bd637c4caa55b04490fe26b250e3d86" kindref="member">kTVMDLTensorHandle</ref><sp/>||</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a3bab8c80e57b1ab2d7ab95962be4d2ec" kindref="member">kTVMNDArrayHandle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DLTensor*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.v_handle);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expect<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DLTensor*<sp/>or<sp/>NDArray<sp/>but<sp/>get<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespacetvm_1_1runtime_1a504dc7b1fd693412576703f44bcc3cfb" kindref="member">TypeCode2Str</ref>(type_code_);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="457" refid="classtvm_1_1runtime_1_1TVMPODValue___1a2b949a0699c7d58ea7cd8eda6c3e1bcf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1NDArray" kindref="compound">NDArray</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1NDArray" kindref="compound">NDArray</ref>(<ref refid="classtvm_1_1runtime_1_1ObjectPtr" kindref="compound">ObjectPtr&lt;Object&gt;</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a3bab8c80e57b1ab2d7ab95962be4d2ec" kindref="member">kTVMNDArrayHandle</ref>);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1NDArray" kindref="compound">NDArray</ref>(<ref refid="classtvm_1_1runtime_1_1NDArray_1ab76ba9c638e1d6db8d6f0ba8c4d38670" kindref="member">NDArray::FFIDataFromHandle</ref>(</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;TVMArrayHandle&gt;(value_.v_handle)));</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="463" refid="classtvm_1_1runtime_1_1TVMPODValue___1a6a2d985b2e4573dcb2f518299c08b365" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">Module</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">Module</ref>(<ref refid="classtvm_1_1runtime_1_1ObjectPtr" kindref="compound">ObjectPtr&lt;Object&gt;</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a41343a05e42d08053d9fa1da85f70af6" kindref="member">kTVMModuleHandle</ref>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">Module</ref>(</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1ObjectPtr" kindref="compound">ObjectPtr&lt;Object&gt;</ref>(static_cast&lt;Object*&gt;(value_.v_handle)));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="471" refid="classtvm_1_1runtime_1_1TVMPODValue___1a4fc0e1332d57c439e8bf8c05aff15fbc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1a9363bb701f16ce5bbb381f2a013d25b4" kindref="member">TVMContext</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a5f6f9decf7207118e282b20a874e84e7" kindref="member">kTVMContext</ref>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.v_ctx;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="475" refid="classtvm_1_1runtime_1_1TVMPODValue___1a5a799e4197f227549cd641b0e753f9b8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a5a799e4197f227549cd641b0e753f9b8" kindref="member">type_code</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_code_;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="484" refid="classtvm_1_1runtime_1_1TVMPODValue___1a362662e4d4b67c031ff70d4397052b29" refkind="member"><highlight class="normal"><sp/><sp/>T*<sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a362662e4d4b67c031ff70d4397052b29" kindref="member">ptr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.v_handle);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ObjectRef<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TObjectRef,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;ObjectRef,<sp/>TObjectRef&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsObjectRef()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TObjectRef&gt;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TObjectRef<sp/>AsObjectRef()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ObjectRef<sp/>Specializations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1Integer" kindref="compound">tvm::Integer</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="499" refid="classtvm_1_1runtime_1_1TVMPODValue___1a35ae555d4becf356b16aeacd353d41ee" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter" kindref="compound">TVMArgsSetter</ref>;</highlight></codeline>
<codeline lineno="500" refid="classtvm_1_1runtime_1_1TVMPODValue___1ae0ea8b4adc6dab8c74086bceaef6b3e1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>;</highlight></codeline>
<codeline lineno="501" refid="classtvm_1_1runtime_1_1TVMPODValue___1a2f46b59a6c1d5eb4575d7f583b5f1a0c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a2f46b59a6c1d5eb4575d7f583b5f1a0c" kindref="member">TVMPODValue_</ref>()<sp/>:<sp/>type_code_(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="502" refid="classtvm_1_1runtime_1_1TVMPODValue___1afe1837bdbafe8341c2031c5cebcf6e74" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue___1afe1837bdbafe8341c2031c5cebcf6e74" kindref="member">TVMPODValue_</ref>(<ref refid="unionTVMValue" kindref="compound">TVMValue</ref><sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_code)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_(value),<sp/>type_code_(type_code)<sp/>{}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="506" refid="classtvm_1_1runtime_1_1TVMPODValue___1a8ffdfcc7099faf19ee07a5c03ce06af8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="unionTVMValue" kindref="compound">TVMValue</ref><sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a8ffdfcc7099faf19ee07a5c03ce06af8" kindref="member">value_</ref>;</highlight></codeline>
<codeline lineno="508" refid="classtvm_1_1runtime_1_1TVMPODValue___1aed3e983e990c5c4ed3ac09b95055297e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue___1aed3e983e990c5c4ed3ac09b95055297e" kindref="member">type_code_</ref>;</highlight></codeline>
<codeline lineno="509"><highlight class="normal">};</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="classtvm_1_1runtime_1_1TVMArgValue" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1TVMArgValue" kindref="compound">TVMArgValue</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue__" kindref="compound">TVMPODValue_</ref><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="520" refid="classtvm_1_1runtime_1_1TVMArgValue_1a987b2fb283cea5484d4655e3f711c046" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgValue_1a987b2fb283cea5484d4655e3f711c046" kindref="member">TVMArgValue</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="526" refid="classtvm_1_1runtime_1_1TVMArgValue_1a5fbd71750e5bbba6edc9094178af9276" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgValue_1a5fbd71750e5bbba6edc9094178af9276" kindref="member">TVMArgValue</ref>(<ref refid="unionTVMValue" kindref="compound">TVMValue</ref><sp/>value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_code)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue__" kindref="compound">TVMPODValue_</ref>(value,<sp/>type_code)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reuse<sp/>converter<sp/>from<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/>double;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/>int64_t;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/>uint64_t;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/>int;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/>bool;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/>DLTensor*;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/><ref refid="classtvm_1_1runtime_1_1NDArray" kindref="compound">NDArray</ref>;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/><ref refid="c__runtime__api_8h_1a9363bb701f16ce5bbb381f2a013d25b4" kindref="member">TVMContext</ref>;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/><ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">Module</ref>;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a35455daf8c507edabf726c30de60fbed" kindref="member">TVMPODValue_::IsObjectRef</ref>;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a918b5a9ef8fcd65d649c7dd41ff12d9f" kindref="member">TVMPODValue_::AsObjectRef</ref>;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref>;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/><ref refid="classtvm_1_1Integer" kindref="compound">tvm::Integer</ref>;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>conversion<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a6ee930a6be374837d4d85dbe1abeb842" kindref="member">kTVMDataType</ref>)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1runtime_1ac360f2d9815036ab1b4d84d9cfb46b4f" kindref="member">DLDataType2String</ref>(</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>DLDataType());</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a4b2f3688d719f6e7c20ab00659e2383e" kindref="member">kTVMBytes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structTVMByteArray" kindref="compound">TVMByteArray</ref>*<sp/>arr<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structTVMByteArray" kindref="compound">TVMByteArray</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.v_handle);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(arr-&gt;<ref refid="structTVMByteArray_1ab124e3227a75e0e4d55452f675f4fde1" kindref="member">data</ref>,<sp/>arr-&gt;<ref refid="structTVMByteArray_1a86d8e8341ce407b7d9374d887143e476" kindref="member">size</ref>);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33af2b95de1a09ed39055edfe8ef5ea484d" kindref="member">kTVMStr</ref>);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(value_.v_str);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="557" refid="classtvm_1_1runtime_1_1TVMArgValue_1a42023de967d37a0ff1a6dd0b6cdf9660" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>DLDataType()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33af2b95de1a09ed39055edfe8ef5ea484d" kindref="member">kTVMStr</ref>)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1runtime_1a277f104e659f71cd8885744700016341" kindref="member">String2DLDataType</ref>(</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string());</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>None<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DLDataType<sp/>t;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t.code<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a9387f774bc8453afe4aa4cd17789a405" kindref="member">kTVMOpaqueHandle</ref>;<sp/>t.bits<sp/>=<sp/>0;<sp/>t.lanes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a6ee930a6be374837d4d85dbe1abeb842" kindref="member">kTVMDataType</ref>);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.v_type;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570" refid="classtvm_1_1runtime_1_1TVMArgValue_1a07ea2b6deccadcc2a49597cfc241c278" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref>(</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>DLDataType());</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="573" refid="classtvm_1_1runtime_1_1TVMArgValue_1abffc8b37686cc5e79f5029b1a86e04eb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ac04ed1678799ef2f0d22204edddcdb41" kindref="member">PackedFunc</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ac04ed1678799ef2f0d22204edddcdb41" kindref="member">PackedFunc</ref>();</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a396e8ab64a9b33d46bcbedb84819f194" kindref="member">kTVMPackedFuncHandle</ref>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ptr&lt;PackedFunc&gt;();</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FType&gt;</highlight></codeline>
<codeline lineno="579" refid="classtvm_1_1runtime_1_1TVMArgValue_1a3248024ad6150cac8911c60259c3ffbd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc&lt;FType&gt;</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc&lt;FType&gt;</ref>(</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ac04ed1678799ef2f0d22204edddcdb41" kindref="member">PackedFunc</ref>());</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="582" refid="classtvm_1_1runtime_1_1TVMArgValue_1abb35e686e66c7af341584ba78a956270" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionTVMValue" kindref="compound">TVMValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMArgValue_1abb35e686e66c7af341584ba78a956270" kindref="member">value</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_class&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="589"><highlight class="normal">};</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="599" refid="classtvm_1_1runtime_1_1TVMRetValue" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue__" kindref="compound">TVMPODValue_</ref><sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="602" refid="classtvm_1_1runtime_1_1TVMRetValue_1a77455a8fe7d27b90a01a64f1cd28e9ec" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a77455a8fe7d27b90a01a64f1cd28e9ec" kindref="member">TVMRetValue</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="607" refid="classtvm_1_1runtime_1_1TVMRetValue_1ac4a3850c0989e7c2d5cd8e0f096d0997" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1ac4a3850c0989e7c2d5cd8e0f096d0997" kindref="member">TVMRetValue</ref>(<ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;&amp;<sp/>other)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue__" kindref="compound">TVMPODValue_</ref>(other.value_,<sp/>other.type_code_)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>other.<ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a8ffdfcc7099faf19ee07a5c03ce06af8" kindref="member">value_</ref>.<ref refid="unionTVMValue_1a3b172297f9f7bf2f5391f7d87309cd44" kindref="member">v_handle</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>other.type_code_<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="613" refid="classtvm_1_1runtime_1_1TVMRetValue_1a0eeb2af3fa21cebfdc2bcf04b2fbb1f6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a0eeb2af3fa21cebfdc2bcf04b2fbb1f6" kindref="member">~TVMRetValue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;Clear();</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reuse<sp/>converter<sp/>from<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/>double;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/>int64_t;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/>uint64_t;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/>int;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/>bool;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/>DLTensor*;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/><ref refid="c__runtime__api_8h_1a9363bb701f16ce5bbb381f2a013d25b4" kindref="member">TVMContext</ref>;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/><ref refid="classtvm_1_1runtime_1_1NDArray" kindref="compound">NDArray</ref>;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/><ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">Module</ref>;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a35455daf8c507edabf726c30de60fbed" kindref="member">TVMPODValue_::IsObjectRef</ref>;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a918b5a9ef8fcd65d649c7dd41ff12d9f" kindref="member">TVMPODValue_::AsObjectRef</ref>;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/><ref refid="classtvm_1_1PrimExpr" kindref="compound">tvm::PrimExpr</ref>;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TVMPODValue_::operator<sp/><ref refid="classtvm_1_1Integer" kindref="compound">tvm::Integer</ref>;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632" refid="classtvm_1_1runtime_1_1TVMRetValue_1ab86bf21f214fca72e73a7f6e20ffab8d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1ab86bf21f214fca72e73a7f6e20ffab8d" kindref="member">TVMRetValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/>other)<sp/>:<sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue__" kindref="compound">TVMPODValue_</ref>()<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;Assign(other);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>conversion<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a6ee930a6be374837d4d85dbe1abeb842" kindref="member">kTVMDataType</ref>)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1runtime_1ac360f2d9815036ab1b4d84d9cfb46b4f" kindref="member">DLDataType2String</ref>(</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>DLDataType());</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a4b2f3688d719f6e7c20ab00659e2383e" kindref="member">kTVMBytes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ptr&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33af2b95de1a09ed39055edfe8ef5ea484d" kindref="member">kTVMStr</ref>);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ptr&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="645" refid="classtvm_1_1runtime_1_1TVMRetValue_1ac4320260c25f8ab0ff3d5a5795a6efa4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>DLDataType()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33af2b95de1a09ed39055edfe8ef5ea484d" kindref="member">kTVMStr</ref>)<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1_1runtime_1a277f104e659f71cd8885744700016341" kindref="member">String2DLDataType</ref>(</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string());</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a6ee930a6be374837d4d85dbe1abeb842" kindref="member">kTVMDataType</ref>);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_.v_type;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="652" refid="classtvm_1_1runtime_1_1TVMRetValue_1ad97cce376415a77a51215c9539732a75" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetvm_1a41918af1a1dc386388639a9d3ad06c5d" kindref="member">DataType</ref>(</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>DLDataType());</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="655" refid="classtvm_1_1runtime_1_1TVMRetValue_1a97e114bab413908227041ae324367c6f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ac04ed1678799ef2f0d22204edddcdb41" kindref="member">PackedFunc</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ac04ed1678799ef2f0d22204edddcdb41" kindref="member">PackedFunc</ref>();</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a396e8ab64a9b33d46bcbedb84819f194" kindref="member">kTVMPackedFuncHandle</ref>);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ptr&lt;PackedFunc&gt;();</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FType&gt;</highlight></codeline>
<codeline lineno="661" refid="classtvm_1_1runtime_1_1TVMRetValue_1a8aee084bb1fbda132f8bc78353d3fa55" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc&lt;FType&gt;</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc&lt;FType&gt;</ref>(</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ac04ed1678799ef2f0d22204edddcdb41" kindref="member">PackedFunc</ref>());</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665" refid="classtvm_1_1runtime_1_1TVMRetValue_1a4993d4b338c28096b56ed3d0d9ae5170" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a4993d4b338c28096b56ed3d0d9ae5170" kindref="member">operator=</ref>(<ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;Clear();</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>value_<sp/>=<sp/>other.value_;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>type_code_<sp/>=<sp/>other.type_code_;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>other.type_code_<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="672" refid="classtvm_1_1runtime_1_1TVMRetValue_1abf351bdd97209c8fb656b60abce7fccb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1abf351bdd97209c8fb656b60abce7fccb" kindref="member">operator=</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;SwitchToPOD(kDLFloat);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>value_.v_float64<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="677" refid="classtvm_1_1runtime_1_1TVMRetValue_1a400ab1f50cbbbc1ab24975bf32556d16" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a400ab1f50cbbbc1ab24975bf32556d16" kindref="member">operator=</ref>(std::nullptr_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;SwitchToPOD(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>value_.v_handle<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="682" refid="classtvm_1_1runtime_1_1TVMRetValue_1a7c16ff5c118b1577a9188ca3f3509167" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a7c16ff5c118b1577a9188ca3f3509167" kindref="member">operator=</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;SwitchToPOD(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a9387f774bc8453afe4aa4cd17789a405" kindref="member">kTVMOpaqueHandle</ref>);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>value_.v_handle<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="687" refid="classtvm_1_1runtime_1_1TVMRetValue_1ad362b734db5406b02e72476b7f8da779" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1ad362b734db5406b02e72476b7f8da779" kindref="member">operator=</ref>(int64_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;SwitchToPOD(kDLInt);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>value_.v_int64<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="692" refid="classtvm_1_1runtime_1_1TVMRetValue_1a5d251ed32af617354c8622689a6d6e48" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a5d251ed32af617354c8622689a6d6e48" kindref="member">operator=</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;SwitchToPOD(kDLInt);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>value_.v_int64<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="697" refid="classtvm_1_1runtime_1_1TVMRetValue_1a063b7950d32288a967011949a7a70dc8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a063b7950d32288a967011949a7a70dc8" kindref="member">operator=</ref>(TVMContext<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;SwitchToPOD(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a5f6f9decf7207118e282b20a874e84e7" kindref="member">kTVMContext</ref>);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>value_.v_ctx<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="702" refid="classtvm_1_1runtime_1_1TVMRetValue_1a2c8860df3cbdc52104dca8274abfa219" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a2c8860df3cbdc52104dca8274abfa219" kindref="member">operator=</ref>(DLDataType<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;SwitchToPOD(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a6ee930a6be374837d4d85dbe1abeb842" kindref="member">kTVMDataType</ref>);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>value_.v_type<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="707" refid="classtvm_1_1runtime_1_1TVMRetValue_1addc4ffa96d47397893755d5e7e016084" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1addc4ffa96d47397893755d5e7e016084" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1DataType" kindref="compound">DataType</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>operator=(other.operator<sp/>DLDataType());</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="710" refid="classtvm_1_1runtime_1_1TVMRetValue_1a510ec87e6718c0e6197e7321ca8774f2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a510ec87e6718c0e6197e7321ca8774f2" kindref="member">operator=</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;SwitchToPOD(kDLInt);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>value_.v_int64<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="715" refid="classtvm_1_1runtime_1_1TVMRetValue_1a952f62623ec147f366363b664d749566" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a952f62623ec147f366363b664d749566" kindref="member">operator=</ref>(std::string<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;SwitchToClass(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33af2b95de1a09ed39055edfe8ef5ea484d" kindref="member">kTVMStr</ref>,<sp/>value);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="719" refid="classtvm_1_1runtime_1_1TVMRetValue_1afd42f6574de11e3b62d40509a94f4f9f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1afd42f6574de11e3b62d40509a94f4f9f" kindref="member">operator=</ref>(<ref refid="structTVMByteArray" kindref="compound">TVMByteArray</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;SwitchToClass(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a4b2f3688d719f6e7c20ab00659e2383e" kindref="member">kTVMBytes</ref>,<sp/>std::string(value.<ref refid="structTVMByteArray_1ab124e3227a75e0e4d55452f675f4fde1" kindref="member">data</ref>,<sp/>value.<ref refid="structTVMByteArray_1a86d8e8341ce407b7d9374d887143e476" kindref="member">size</ref>));</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="723" refid="classtvm_1_1runtime_1_1TVMRetValue_1afe5a60e856a30894e795d5230b0a7022" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1afe5a60e856a30894e795d5230b0a7022" kindref="member">operator=</ref>(NDArray<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.<ref refid="classtvm_1_1runtime_1_1ObjectRef_1ac261cdb80487fb29ac42b28678f8cbef" kindref="member">data_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;Clear();</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_code_<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a3bab8c80e57b1ab2d7ab95962be4d2ec" kindref="member">kTVMNDArrayHandle</ref>;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_.v_handle<sp/>=<sp/><ref refid="classtvm_1_1runtime_1_1NDArray_1a141e032d848c60f8261046304bdc8c4c" kindref="member">NDArray::FFIGetHandle</ref>(other);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1ObjectRef_1a22e5bb9d64dbc773bb9263b70882239e" kindref="member">ObjectRef::FFIClearAfterMove</ref>(&amp;other);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SwitchToPOD(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="734" refid="classtvm_1_1runtime_1_1TVMRetValue_1ad5446f5812132852387dca7335989e88" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1ad5446f5812132852387dca7335989e88" kindref="member">operator=</ref>(Module<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>SwitchToObject(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a41343a05e42d08053d9fa1da85f70af6" kindref="member">kTVMModuleHandle</ref>,<sp/>std::move(m.<ref refid="classtvm_1_1runtime_1_1ObjectRef_1ac261cdb80487fb29ac42b28678f8cbef" kindref="member">data_</ref>));</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="738" refid="classtvm_1_1runtime_1_1TVMRetValue_1a4ab194932127e4b1c372e5e58e450721" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a4ab194932127e4b1c372e5e58e450721" kindref="member">operator=</ref>(<ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;SwitchToClass(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a396e8ab64a9b33d46bcbedb84819f194" kindref="member">kTVMPackedFuncHandle</ref>,<sp/>f);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FType&gt;</highlight></codeline>
<codeline lineno="743" refid="classtvm_1_1runtime_1_1TVMRetValue_1a3eaf85a64828b05e95d57e958089a34d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a3eaf85a64828b05e95d57e958089a34d" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc&lt;FType&gt;</ref>&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>operator=(f.packed());</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="746" refid="classtvm_1_1runtime_1_1TVMRetValue_1ac87c22e4d49e79ce5b36b3aead667fcb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1ac87c22e4d49e79ce5b36b3aead667fcb" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/>other)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(*0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;Assign(other);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="750" refid="classtvm_1_1runtime_1_1TVMRetValue_1aafc5d18f0ac508fdd8a90b5af9bc1eff" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1aafc5d18f0ac508fdd8a90b5af9bc1eff" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgValue" kindref="compound">TVMArgValue</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;Assign(other);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="763" refid="classtvm_1_1runtime_1_1TVMRetValue_1a74ea2767d491c57cb9c71e26ee934344" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a74ea2767d491c57cb9c71e26ee934344" kindref="member">MoveToCHost</ref>(<ref refid="unionTVMValue" kindref="compound">TVMValue</ref>*<sp/>ret_value,</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ret_type_code)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>move<sp/>str;<sp/>need<sp/>specially<sp/>handle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(type_code_<sp/>!=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33af2b95de1a09ed39055edfe8ef5ea484d" kindref="member">kTVMStr</ref><sp/>&amp;&amp;<sp/>type_code_<sp/>!=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a4b2f3688d719f6e7c20ab00659e2383e" kindref="member">kTVMBytes</ref>);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret_value<sp/>=<sp/>value_;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>*ret_type_code<sp/>=<sp/>type_code_;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>type_code_<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="778" refid="classtvm_1_1runtime_1_1TVMRetValue_1a05a3312e4f335513ba0dbaefcd0c5a2c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a05a3312e4f335513ba0dbaefcd0c5a2c" kindref="member">MoveFromCHost</ref>(<ref refid="unionTVMValue" kindref="compound">TVMValue</ref><sp/>value,</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_code)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>move<sp/>POD<sp/>and<sp/>everything<sp/>under<sp/>the<sp/>object<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(type_code<sp/>&lt;=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a396e8ab64a9b33d46bcbedb84819f194" kindref="member">kTVMPackedFuncHandle</ref><sp/>||</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_code<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a3bab8c80e57b1ab2d7ab95962be4d2ec" kindref="member">kTVMNDArrayHandle</ref>);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref><sp/>ret;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a8ffdfcc7099faf19ee07a5c03ce06af8" kindref="member">value_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="classtvm_1_1runtime_1_1TVMPODValue___1aed3e983e990c5c4ed3ac09b95055297e" kindref="member">type_code_</ref><sp/>=<sp/>type_code;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="789" refid="classtvm_1_1runtime_1_1TVMRetValue_1a75696cb65d294217796fbc4f1c22d7f8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionTVMValue" kindref="compound">TVMValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a75696cb65d294217796fbc4f1c22d7f8" kindref="member">value</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(type_code_<sp/>!=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33abe76912731a3c65bd7cdd9ab9a462c66" kindref="member">kTVMObjectHandle</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_code_<sp/>!=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a396e8ab64a9b33d46bcbedb84819f194" kindref="member">kTVMPackedFuncHandle</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_code_<sp/>!=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a41343a05e42d08053d9fa1da85f70af6" kindref="member">kTVMModuleHandle</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_code_<sp/>!=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33af2b95de1a09ed39055edfe8ef5ea484d" kindref="member">kTVMStr</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TVMRetValue.value<sp/>can<sp/>only<sp/>be<sp/>used<sp/>for<sp/>POD<sp/>data&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ObjectRef<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TObjectRef,</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;ObjectRef,<sp/>TObjectRef&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/>operator=(TObjectRef<sp/>other);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_class&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Assign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(other.type_code())<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33af2b95de1a09ed39055edfe8ef5ea484d" kindref="member">kTVMStr</ref>:<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwitchToClass&lt;std::string&gt;(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33af2b95de1a09ed39055edfe8ef5ea484d" kindref="member">kTVMStr</ref>,<sp/>other);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a4b2f3688d719f6e7c20ab00659e2383e" kindref="member">kTVMBytes</ref>:<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwitchToClass&lt;std::string&gt;(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a4b2f3688d719f6e7c20ab00659e2383e" kindref="member">kTVMBytes</ref>,<sp/>other);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a396e8ab64a9b33d46bcbedb84819f194" kindref="member">kTVMPackedFuncHandle</ref>:<sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwitchToClass&lt;PackedFunc&gt;(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a396e8ab64a9b33d46bcbedb84819f194" kindref="member">kTVMPackedFuncHandle</ref>,<sp/>other);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a41343a05e42d08053d9fa1da85f70af6" kindref="member">kTVMModuleHandle</ref>:<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>other.operator<sp/>Module();</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a3bab8c80e57b1ab2d7ab95962be4d2ec" kindref="member">kTVMNDArrayHandle</ref>:<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>other.operator<sp/>NDArray();</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33abe76912731a3c65bd7cdd9ab9a462c66" kindref="member">kTVMObjectHandle</ref>:<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>operator<sp/>ObjectRef<sp/>as<sp/>we<sp/>already<sp/>know<sp/>it<sp/>is<sp/>not<sp/>NDArray/Module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwitchToObject(</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33abe76912731a3c65bd7cdd9ab9a462c66" kindref="member">kTVMObjectHandle</ref>,<sp/>GetObjectPtr&lt;Object&gt;(</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;Object*&gt;(other.value_.v_handle)));</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwitchToPOD(other.type_code());</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_<sp/>=<sp/>other.value_;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>internal<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SwitchToPOD(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_code)<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>!=<sp/>type_code)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;Clear();</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_code_<sp/>=<sp/>type_code;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SwitchToClass(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_code,<sp/>T<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>!=<sp/>type_code)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;Clear();</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_code_<sp/>=<sp/>type_code;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_.v_handle<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(v);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.v_handle)<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SwitchToObject(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_code,<sp/><ref refid="classtvm_1_1runtime_1_1ObjectPtr" kindref="compound">ObjectPtr&lt;Object&gt;</ref><sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.data_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;Clear();</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_code_<sp/>=<sp/>type_code;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>the<sp/>handle<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_.v_handle<sp/>=<sp/>other.data_;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other.data_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SwitchToPOD(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clear()<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_code_)<sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33af2b95de1a09ed39055edfe8ef5ea484d" kindref="member">kTVMStr</ref>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a4b2f3688d719f6e7c20ab00659e2383e" kindref="member">kTVMBytes</ref>:<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptr&lt;std::string&gt;();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a396e8ab64a9b33d46bcbedb84819f194" kindref="member">kTVMPackedFuncHandle</ref>:<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptr&lt;PackedFunc&gt;();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a3bab8c80e57b1ab2d7ab95962be4d2ec" kindref="member">kTVMNDArrayHandle</ref>:<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1NDArray_1ade0e2757904f4f5ba5c667ae01793a47" kindref="member">NDArray::FFIDecRef</ref>(static_cast&lt;TVMArrayHandle&gt;(value_.v_handle));</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a41343a05e42d08053d9fa1da85f70af6" kindref="member">kTVMModuleHandle</ref>:<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1Object" kindref="compound">Object</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.v_handle)-&gt;DecRef();</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33abe76912731a3c65bd7cdd9ab9a462c66" kindref="member">kTVMObjectHandle</ref>:<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1Object" kindref="compound">Object</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.v_handle)-&gt;DecRef();</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>type_code_<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal">};</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="913" refid="packed__func_8h_1aee75208638f500a4ce5e726c9d87d8ff" refkind="member"><highlight class="preprocessor">#define<sp/>TVM_DLL_EXPORT_PACKED_FUNC(ExportName,<sp/>Function)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="914"><highlight class="preprocessor"><sp/><sp/>extern<sp/>&quot;C&quot;<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="915"><highlight class="preprocessor"><sp/><sp/>TVM_DLL<sp/>int<sp/>ExportName(TVMValue*<sp/>args,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="916"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>type_code,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="917"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>num_args,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="918"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TVMValue*<sp/>out_value,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="919"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>out_type_code);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="920"><highlight class="preprocessor"><sp/><sp/>int<sp/>ExportName(TVMValue*<sp/>args,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="921"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>type_code,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="922"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>num_args,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="923"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TVMValue*<sp/>out_value,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="924"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>out_type_code)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="925"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>try<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="926"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>::tvm::runtime::TVMRetValue<sp/>rv;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="927"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Function(::tvm::runtime::TVMArgs(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="928"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args,<sp/>type_code,<sp/>num_args),<sp/>&amp;rv);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="929"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>rv.MoveToCHost(out_value,<sp/>out_type_code);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="930"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="931"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(const<sp/>::std::runtime_error&amp;<sp/>_except_)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="932"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TVMAPISetLastError(_except_.what());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="933"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>-1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="934"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="935"><highlight class="preprocessor"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="936"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="973" refid="packed__func_8h_1ae5b445392a64daa55bef53b4cf53025c" refkind="member"><highlight class="preprocessor">#define<sp/>TVM_DLL_EXPORT_TYPED_FUNC(ExportName,<sp/>Function)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="974"><highlight class="preprocessor"><sp/><sp/>extern<sp/>&quot;C&quot;<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="975"><highlight class="preprocessor"><sp/><sp/>TVM_DLL<sp/>int<sp/>ExportName(TVMValue*<sp/>args,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="976"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>type_code,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="977"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>num_args,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="978"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TVMValue*<sp/>out_value,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="979"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>out_type_code)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="980"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>try<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="981"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>f<sp/>=<sp/>Function;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="982"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>FType<sp/>=<sp/>::tvm::runtime::detail::<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="983"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function_signature&lt;decltype(f)&gt;::FType;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="984"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>::tvm::runtime::TVMRetValue<sp/>rv;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="985"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>::tvm::runtime::detail::unpack_call_by_signature&lt;FType&gt;::run(<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="986"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="987"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::tvm::runtime::TVMArgs(args,<sp/>type_code,<sp/>num_args),<sp/>&amp;rv);<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="988"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>rv.MoveToCHost(out_value,<sp/>out_type_code);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="989"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="990"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(const<sp/>::std::runtime_error&amp;<sp/>_except_)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="991"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TVMAPISetLastError(_except_.what());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="992"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>-1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="993"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="994"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="995"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>details</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998" refid="namespacetvm_1_1runtime_1a504dc7b1fd693412576703f44bcc3cfb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacetvm_1_1runtime_1a504dc7b1fd693412576703f44bcc3cfb" kindref="member">TypeCode2Str</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_code)<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type_code)<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kDLInt:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kDLUInt:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;uint&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kDLFloat:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;float&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33af2b95de1a09ed39055edfe8ef5ea484d" kindref="member">kTVMStr</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;str&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a4b2f3688d719f6e7c20ab00659e2383e" kindref="member">kTVMBytes</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;bytes&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a9387f774bc8453afe4aa4cd17789a405" kindref="member">kTVMOpaqueHandle</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;handle&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a8bd637c4caa55b04490fe26b250e3d86" kindref="member">kTVMDLTensorHandle</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ArrayHandle&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a6ee930a6be374837d4d85dbe1abeb842" kindref="member">kTVMDataType</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;DLDataType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a5f6f9decf7207118e282b20a874e84e7" kindref="member">kTVMContext</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;TVMContext&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a396e8ab64a9b33d46bcbedb84819f194" kindref="member">kTVMPackedFuncHandle</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;FunctionHandle&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a41343a05e42d08053d9fa1da85f70af6" kindref="member">kTVMModuleHandle</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ModuleHandle&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a3bab8c80e57b1ab2d7ab95962be4d2ec" kindref="member">kTVMNDArrayHandle</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;NDArrayContainer&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33abe76912731a3c65bd7cdd9ab9a462c66" kindref="member">kTVMObjectHandle</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Object&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>LOG(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>type_code=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(type_code);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019" refid="namespacetvm_1_1runtime_1a11ed99740d7bb838d96617de83ff2363" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="namespacetvm_1_1runtime_1af22b89284299c81d0c1802199af446d7" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/>DLDataType<sp/>t)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(*)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.bits<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>t.lanes<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>t.code<sp/>==<sp/>kDLUInt)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;bool&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.code<sp/>&lt;<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ab568bfefd0ad6b172868caeb964b038a" kindref="member">kTVMCustomBegin</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/><ref refid="namespacetvm_1_1runtime_1a504dc7b1fd693412576703f44bcc3cfb" kindref="member">TypeCode2Str</ref>(t.code);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;custom[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacetvm_1_1runtime_1a06a49d761ea6373557c24c01eaceb07d" kindref="member">GetCustomTypeName</ref>(t.code)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.code<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a9387f774bc8453afe4aa4cd17789a405" kindref="member">kTVMOpaqueHandle</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(t.bits);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.lanes<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>&apos;x&apos;<sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(t.lanes);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036" refid="namespacetvm_1_1runtime_1a59d447b7bdac52d26bca3422fe098f6f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="namespacetvm_1_1runtime_1af22b89284299c81d0c1802199af446d7" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1DataType" kindref="compound">DataType</ref>&amp;<sp/>dtype)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>NOLINT(*)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>dtype.operator<sp/>DLDataType();</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040" refid="namespacetvm_1_1runtime_1ac360f2d9815036ab1b4d84d9cfb46b4f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacetvm_1_1runtime_1ac360f2d9815036ab1b4d84d9cfb46b4f" kindref="member">DLDataType2String</ref>(DLDataType<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.bits<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>os;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>t;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.str();</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047" refid="namespacetvm_1_1runtime_1a277f104e659f71cd8885744700016341" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>DLDataType<sp/><ref refid="namespacetvm_1_1runtime_1a277f104e659f71cd8885744700016341" kindref="member">String2DLDataType</ref>(std::string<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>DLDataType<sp/>t;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>None<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.length()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>t.bits<sp/>=<sp/>0;<sp/>t.lanes<sp/>=<sp/>0;<sp/>t.code<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a9387f774bc8453afe4aa4cd17789a405" kindref="member">kTVMOpaqueHandle</ref>;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>t.bits<sp/>=<sp/>32;<sp/>t.lanes<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacetvm_1_1te_1ad78173237a27f7145c6b198be85b1f0d" kindref="member">scan</ref>;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.substr(0,<sp/>3)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>t.code<sp/>=<sp/>kDLInt;<sp/><sp/>scan<sp/>=<sp/>s.c_str()<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.substr(0,<sp/>4)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;uint&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>t.code<sp/>=<sp/>kDLUInt;<sp/>scan<sp/>=<sp/>s.c_str()<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.substr(0,<sp/>5)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;float&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>t.code<sp/>=<sp/>kDLFloat;<sp/>scan<sp/>=<sp/>s.c_str()<sp/>+<sp/>5;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.substr(0,<sp/>6)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;handle&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>t.code<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a9387f774bc8453afe4aa4cd17789a405" kindref="member">kTVMOpaqueHandle</ref>;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>t.bits<sp/>=<sp/>64;<sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>uses<sp/>64<sp/>bit<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>scan<sp/>=<sp/>s.c_str()<sp/>+<sp/>6;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;bool&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>t.code<sp/>=<sp/>kDLUInt;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>t.bits<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>t.lanes<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.substr(0,<sp/>6)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;custom&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>t.code<sp/>=<sp/><ref refid="namespacetvm_1_1runtime_1ac6d167947285dff3c780bd5d01ace9b9" kindref="member">ParseCustomDatatype</ref>(s,<sp/>&amp;scan);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>scan<sp/>=<sp/>s.c_str();</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(FATAL)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>xdelim;<sp/><sp/></highlight><highlight class="comment">//<sp/>emulate<sp/>sscanf(&quot;%ux%u&quot;,<sp/>bits,<sp/>lanes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>uint8_t<sp/>bits<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strtoul(scan,<sp/>&amp;xdelim,<sp/>10));</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>!=<sp/>0)<sp/>t.bits<sp/>=<sp/>bits;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>endpt<sp/>=<sp/>xdelim;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*xdelim<sp/>==<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>t.lanes<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strtoul(xdelim<sp/>+<sp/>1,<sp/>&amp;endpt,<sp/>10));</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>CHECK(endpt<sp/>==<sp/>s.c_str()<sp/>+<sp/>s.length())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088" refid="classtvm_1_1runtime_1_1TVMArgs_1a92845a3902afa7207adcaca1e03f8aaa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgValue" kindref="compound">TVMArgValue</ref><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgs_1a92845a3902afa7207adcaca1e03f8aaa" kindref="member">TVMArgs::operator[]</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>CHECK_LT(i,<sp/>num_args)</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>enough<sp/>argument<sp/>passed,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>num_args<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>passed&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>but<sp/>request<sp/>arg[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;].&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgValue" kindref="compound">TVMArgValue</ref>(values[i],<sp/>type_codes[i]);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096" refid="classtvm_1_1runtime_1_1TVMArgs_1aab545038cd3023195731bae5d6026b9f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgs_1aab545038cd3023195731bae5d6026b9f" kindref="member">TVMArgs::size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_args;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100" refid="classtvm_1_1runtime_1_1PackedFunc_1aa90598e3e64b32de7ebfc5e09208afa4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1aa90598e3e64b32de7ebfc5e09208afa4" kindref="member">PackedFunc::CallPacked</ref>(<ref refid="classtvm_1_1runtime_1_1TVMArgs" kindref="compound">TVMArgs</ref><sp/>args,<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>*<sp/>rv)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>body_(args,<sp/>rv);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104" refid="classtvm_1_1runtime_1_1PackedFunc_1a14fb895cbdceecbe566588b7467dafc3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" kindref="member">PackedFunc::FType</ref><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1a14fb895cbdceecbe566588b7467dafc3" kindref="member">PackedFunc::body</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>body_;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>internal<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stop,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">for_each_dispatcher<sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F&amp;<sp/>f,<sp/>T&amp;&amp;<sp/>value,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(*)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>f(I,<sp/>std::forward&lt;T&gt;(value));</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>for_each_dispatcher&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>==<sp/>0,<sp/>(I+1),<sp/>F&gt;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::run(f,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">for_each_dispatcher&lt;true,<sp/>I,<sp/>F&gt;<sp/><sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F&amp;<sp/>f)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(*)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>for_each(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F&amp;<sp/>f,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(*)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/>for_each_dispatcher&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>==<sp/>0,<sp/>0,<sp/>F&gt;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::run(f,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">func_signature_helper<sp/>{</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" kindref="member">FType</ref><sp/>=<sp/>void;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">func_signature_helper&lt;R<sp/>(T::*)(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" kindref="member">FType</ref><sp/>=<sp/>R(Args...);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">func_signature_helper&lt;R<sp/>(T::*)(Args...)<sp/>const&gt;<sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" kindref="member">FType</ref><sp/>=<sp/>R(Args...);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">function_signature<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" kindref="member">FType</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>func_signature_helper&lt;decltype(&amp;T::operator())&gt;::FType;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>handle<sp/>case<sp/>of<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">function_signature&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" kindref="member">FType</ref><sp/>=<sp/>R(Args...);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>handle<sp/>case<sp/>of<sp/>function<sp/>ptr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">function_signature&lt;R<sp/>(*)(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1ae5f951a6a515f3e3a7493c27704b7849" kindref="member">FType</ref><sp/>=<sp/>R(Args...);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>\brief<sp/>argument<sp/>settter<sp/>to<sp/>PackedFunc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170" refid="classtvm_1_1runtime_1_1TVMArgsSetter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter" kindref="compound">TVMArgsSetter</ref><sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1172" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a5882f7eda112e825eb5a87e45aeb85b0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a5882f7eda112e825eb5a87e45aeb85b0" kindref="member">TVMArgsSetter</ref>(<ref refid="unionTVMValue" kindref="compound">TVMValue</ref>*<sp/>values,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>type_codes)</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>values_(values),<sp/>type_codes_(type_codes)<sp/>{}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>setters<sp/>for<sp/>POD<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_integral&lt;T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="1178" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a3c657d4b0f50577949521abe324c5325" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a3c657d4b0f50577949521abe324c5325" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/>T<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>values_[i].v_int64<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/>kDLInt;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a7f24de1646e5a56b405e3e95ca71dcd1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a7f24de1646e5a56b405e3e95ca71dcd1" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/>uint64_t<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>values_[i].v_int64<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_LE(value,</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;uint64_t&gt;(<ref refid="namespacetvm_1ab49bad0808ba033343e72ba37b39af2e" kindref="member">std::numeric_limits&lt;int64_t&gt;::max</ref>()));</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/>kDLInt;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a410f230315a467a6c6543d24d8cccce6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a410f230315a467a6c6543d24d8cccce6" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>values_[i].v_float64<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/>kDLFloat;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1192" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a020a38f10ece8241e07c7bbc08b8d6b8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a020a38f10ece8241e07c7bbc08b8d6b8" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/>std::nullptr_t<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>values_[i].v_handle<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1196" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a25374dbab9fea2a0c482201d0e37451e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a25374dbab9fea2a0c482201d0e37451e" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgValue" kindref="compound">TVMArgValue</ref>&amp;<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>values_[i]<sp/>=<sp/>value.<ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a8ffdfcc7099faf19ee07a5c03ce06af8" kindref="member">value_</ref>;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/>value.<ref refid="classtvm_1_1runtime_1_1TVMPODValue___1aed3e983e990c5c4ed3ac09b95055297e" kindref="member">type_code_</ref>;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1200" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a1869ead078ccedb854a4ef245c4c0b2c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a1869ead078ccedb854a4ef245c4c0b2c" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>values_[i].v_handle<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a9387f774bc8453afe4aa4cd17789a405" kindref="member">kTVMOpaqueHandle</ref>;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a69ffbd692883aa9ded039479d8504638" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a69ffbd692883aa9ded039479d8504638" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/>DLTensor*<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>values_[i].v_handle<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a8bd637c4caa55b04490fe26b250e3d86" kindref="member">kTVMDLTensorHandle</ref>;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1208" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1aba4ec0ffadb2adc12cc5107cfab6374b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1aba4ec0ffadb2adc12cc5107cfab6374b" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/><ref refid="c__runtime__api_8h_1a9363bb701f16ce5bbb381f2a013d25b4" kindref="member">TVMContext</ref><sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>values_[i].v_ctx<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a5f6f9decf7207118e282b20a874e84e7" kindref="member">kTVMContext</ref>;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1212" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a16925c8479ab919bcd179692b4f14a24" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a16925c8479ab919bcd179692b4f14a24" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/>DLDataType<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>values_[i].v_type<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a6ee930a6be374837d4d85dbe1abeb842" kindref="member">kTVMDataType</ref>;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a24a691e6243daeb46554eb692e5242ac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a24a691e6243daeb46554eb692e5242ac" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/><ref refid="classtvm_1_1runtime_1_1DataType" kindref="compound">DataType</ref><sp/>dtype)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1a4e0c70245a080d914946285ff3ebc0d7" kindref="member">operator()</ref>(i,<sp/>dtype.operator<sp/>DLDataType());</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a4fb30f18d2b15ccad43061720eb7f561" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a4fb30f18d2b15ccad43061720eb7f561" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>values_[i].v_str<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33af2b95de1a09ed39055edfe8ef5ea484d" kindref="member">kTVMStr</ref>;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>setters<sp/>for<sp/>container<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1ab764d801efc097fe2d09c4e9935cc581" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1ab764d801efc097fe2d09c4e9935cc581" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>values_[i].v_str<sp/>=<sp/>value.c_str();</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33af2b95de1a09ed39055edfe8ef5ea484d" kindref="member">kTVMStr</ref>;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1228" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1acc73129969aab00839e4d50124e0de34" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1acc73129969aab00839e4d50124e0de34" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structTVMByteArray" kindref="compound">TVMByteArray</ref>&amp;<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>values_[i].v_handle<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="structTVMByteArray" kindref="compound">TVMByteArray</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;value);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a4b2f3688d719f6e7c20ab00659e2383e" kindref="member">kTVMBytes</ref>;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1232" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a0eff4c00e945424c0a2ca270f627aca4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a0eff4c00e945424c0a2ca270f627aca4" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref>&amp;<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>values_[i].v_handle<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;value);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a396e8ab64a9b33d46bcbedb84819f194" kindref="member">kTVMPackedFuncHandle</ref>;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FType&gt;</highlight></codeline>
<codeline lineno="1237" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a8c90a03541fb6c3f068cc8fccf83762a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a8c90a03541fb6c3f068cc8fccf83762a" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc&lt;FType&gt;</ref>&amp;<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1a4e0c70245a080d914946285ff3ebc0d7" kindref="member">operator()</ref>(i,<sp/>value.packed());</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a0fbb9197b832b52e3da2fb37643199d9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a0fbb9197b832b52e3da2fb37643199d9" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.<ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a5a799e4197f227549cd641b0e753f9b8" kindref="member">type_code</ref>()<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33af2b95de1a09ed39055edfe8ef5ea484d" kindref="member">kTVMStr</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values_[i].v_str<sp/>=<sp/>value.<ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a362662e4d4b67c031ff70d4397052b29" kindref="member">ptr</ref>&lt;std::string&gt;()-&gt;c_str();</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33af2b95de1a09ed39055edfe8ef5ea484d" kindref="member">kTVMStr</ref>;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_NE(value.<ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a5a799e4197f227549cd641b0e753f9b8" kindref="member">type_code</ref>(),<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a4b2f3688d719f6e7c20ab00659e2383e" kindref="member">kTVMBytes</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>handled.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values_[i]<sp/>=<sp/>value.<ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a8ffdfcc7099faf19ee07a5c03ce06af8" kindref="member">value_</ref>;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/>value.<ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a5a799e4197f227549cd641b0e753f9b8" kindref="member">type_code</ref>();</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ObjectRef<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TObjectRef,</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;ObjectRef,<sp/>TObjectRef&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1a4e0c70245a080d914946285ff3ebc0d7" kindref="member">operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TObjectRef&amp;<sp/>value)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><ref refid="unionTVMValue" kindref="compound">TVMValue</ref>*<sp/>values_;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>type_codes_;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1264" refid="classtvm_1_1runtime_1_1PackedFunc_1a4e0c70245a080d914946285ff3ebc0d7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc_1a4e0c70245a080d914946285ff3ebc0d7" kindref="member">PackedFunc::operator()</ref>(Args&amp;&amp;<sp/>...args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kNumArgs<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kArraySize<sp/>=<sp/>kNumArgs<sp/>&gt;<sp/>0<sp/>?<sp/>kNumArgs<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><ref refid="unionTVMValue" kindref="compound">TVMValue</ref><sp/>values[kArraySize];</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_codes[kArraySize];</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>detail::for_each(<ref refid="classtvm_1_1runtime_1_1TVMArgsSetter" kindref="compound">TVMArgsSetter</ref>(values,<sp/>type_codes),</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref><sp/>rv;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>body_(<ref refid="classtvm_1_1runtime_1_1TVMArgs" kindref="compound">TVMArgs</ref>(values,<sp/>type_codes,<sp/>kNumArgs),<sp/>&amp;rv);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nleft,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">unpack_call_dispatcher<sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F&amp;<sp/>f,</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgs" kindref="compound">TVMArgs</ref>&amp;<sp/>args_pack,</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>*<sp/>rv,</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args&amp;&amp;...<sp/>unpacked_args)<sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>unpack_call_dispatcher&lt;R,<sp/>nleft<sp/>-<sp/>1,<sp/>index<sp/>+<sp/>1,<sp/>F&gt;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::run(f,<sp/>args_pack,<sp/>rv,</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;Args&gt;(unpacked_args)...,</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_pack[index]);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">unpack_call_dispatcher&lt;R,<sp/>0,<sp/>index,<sp/>F&gt;<sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F&amp;<sp/>f,</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgs" kindref="compound">TVMArgs</ref>&amp;<sp/>args_pack,</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>*<sp/>rv,</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args&amp;&amp;...<sp/>unpacked_args)<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>*rv<sp/>=<sp/>R(f(std::forward&lt;Args&gt;(unpacked_args)...));</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">unpack_call_dispatcher&lt;void,<sp/>0,<sp/>index,<sp/>F&gt;<sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F&amp;<sp/>f,</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgs" kindref="compound">TVMArgs</ref>&amp;<sp/>args_pack,</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>*<sp/>rv,</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args&amp;&amp;...<sp/>unpacked_args)<sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>f(std::forward&lt;Args&gt;(unpacked_args)...);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nargs,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unpack_call(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F&amp;<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgs" kindref="compound">TVMArgs</ref>&amp;<sp/>args,<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>*<sp/>rv)<sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>unpack_call_dispatcher&lt;R,<sp/>nargs,<sp/>0,<sp/>F&gt;::run(f,<sp/>args,<sp/>rv);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FType&gt;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">unpack_call_by_signature<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">unpack_call_by_signature&lt;R(Args...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F&amp;<sp/>f,</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgs" kindref="compound">TVMArgs</ref>&amp;<sp/>args,</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>*<sp/>rv)<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>unpack_call&lt;R,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)&gt;(f,<sp/>args,<sp/>rv);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>R<sp/>call_packed(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref>&amp;<sp/>pf,<sp/>Args&amp;&amp;<sp/>...args)<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>R(pf(std::forward&lt;Args&gt;(args)...));</highlight></codeline>
<codeline lineno="1335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">typed_packed_call_dispatcher<sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>R<sp/>run(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref>&amp;<sp/>pf,<sp/>Args&amp;&amp;<sp/>...args)<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pf(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">typed_packed_call_dispatcher&lt;void&gt;<sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref>&amp;<sp/>pf,<sp/>Args&amp;&amp;<sp/>...args)<sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>pf(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1355" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1afd8ee9dd9648c19b468bb4b0b00e8e4e" refkind="member"><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref>&lt;R(Args...)&gt;<ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">::TypedPackedFunc</ref>(<ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref><sp/>packed)</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>:<sp/>packed_(packed)<sp/>{}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1359" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a6b346a6d0b601eff5a100c7a207e9c86" refkind="member"><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref>&lt;R(Args...)&gt;<ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">::TypedPackedFunc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/>value)</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>packed_(value.operator<sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1363" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a0161d426f9ca366c860ad48c384f7192" refkind="member"><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref>&lt;R(Args...)&gt;<ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">::TypedPackedFunc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgValue" kindref="compound">TVMArgValue</ref>&amp;<sp/>value)</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>packed_(value.operator<sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FType&gt;</highlight></codeline>
<codeline lineno="1368" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1a617bb54ee3fbe9704131229efd0d903c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref>&lt;R(Args...)&gt;::AssignTypedLambda(FType<sp/>flambda)<sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/>packed_<sp/>=<sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref>([flambda](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgs" kindref="compound">TVMArgs</ref>&amp;<sp/>args,<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>*<sp/>rv)<sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::unpack_call&lt;R,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)&gt;(flambda,<sp/>args,<sp/>rv);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="1375" refid="classtvm_1_1runtime_1_1TypedPackedFunc_3_01R_07Args_8_8_8_08_4_1ad76f4953dcc7a98bb8ad6b15994090d8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>R<sp/><ref refid="classtvm_1_1runtime_1_1TypedPackedFunc" kindref="compound">TypedPackedFunc</ref>&lt;R(Args...)&gt;::operator()(Args...<sp/>args)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::typed_packed_call_dispatcher&lt;R&gt;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::run(packed_,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ObjectRef<sp/>related<sp/>conversion<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Object<sp/>can<sp/>have<sp/>three<sp/>possible<sp/>type<sp/>codes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>kTVMNDArrayHandle,<sp/>kTVMModuleHandle,<sp/>kTVMObjectHandle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>type<sp/>traits<sp/>to<sp/>eliminate<sp/>un-necessary<sp/>checks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TObjectRef,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1386" refid="classtvm_1_1runtime_1_1TVMArgsSetter_1aa55c2d96af79e07cdf0ca253ec49dc19" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMArgsSetter_1a3c657d4b0f50577949521abe324c5325" kindref="member">TVMArgsSetter::operator()</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TObjectRef&amp;<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.defined())<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1Object" kindref="compound">Object</ref>*<sp/>ptr<sp/>=<sp/>value.data_.data_;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_base_of&lt;NDArray,<sp/>TObjectRef&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_base_of&lt;TObjectRef,<sp/>NDArray&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="classtvm_1_1runtime_1_1Object_1af1359ebff2c328ff0bb80083937c95dd" kindref="member">IsInstance</ref>&lt;<ref refid="classtvm_1_1runtime_1_1NDArray_1_1Container" kindref="compound">NDArray::ContainerType</ref>&gt;()))<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values_[i].v_handle<sp/>=<sp/><ref refid="classtvm_1_1runtime_1_1NDArray_1a141e032d848c60f8261046304bdc8c4c" kindref="member">NDArray::FFIGetHandle</ref>(value);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a3bab8c80e57b1ab2d7ab95962be4d2ec" kindref="member">kTVMNDArrayHandle</ref>;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_base_of&lt;Module,<sp/>TObjectRef&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_base_of&lt;TObjectRef,<sp/>Module&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="classtvm_1_1runtime_1_1Object_1af1359ebff2c328ff0bb80083937c95dd" kindref="member">IsInstance</ref>&lt;<ref refid="classtvm_1_1runtime_1_1ModuleNode" kindref="compound">Module::ContainerType</ref>&gt;()))<sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values_[i].v_handle<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a41343a05e42d08053d9fa1da85f70af6" kindref="member">kTVMModuleHandle</ref>;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values_[i].v_handle<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33abe76912731a3c65bd7cdd9ab9a462c66" kindref="member">kTVMObjectHandle</ref>;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>type_codes_[i]<sp/>=<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TObjectRef,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1409" refid="classtvm_1_1runtime_1_1TVMPODValue___1a35455daf8c507edabf726c30de60fbed" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a35455daf8c507edabf726c30de60fbed" kindref="member">TVMPODValue_::IsObjectRef</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ContainerType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TObjectRef::ContainerType;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>the<sp/>following<sp/>code<sp/>can<sp/>be<sp/>optimized<sp/>by<sp/>constant<sp/>folding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_base_of&lt;NDArray,<sp/>TObjectRef&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a3bab8c80e57b1ab2d7ab95962be4d2ec" kindref="member">kTVMNDArrayHandle</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetvm_1_1runtime_1afdd7050eda88b079f0a962bd413a34ea" kindref="member">TVMArrayHandleToObjectHandle</ref>(</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;TVMArrayHandle&gt;(value_.v_handle))-&gt;<ref refid="classtvm_1_1runtime_1_1Object_1af1359ebff2c328ff0bb80083937c95dd" kindref="member">IsInstance</ref>&lt;ContainerType&gt;();</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_base_of&lt;Module,<sp/>TObjectRef&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a41343a05e42d08053d9fa1da85f70af6" kindref="member">kTVMModuleHandle</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1Object" kindref="compound">Object</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.v_handle)-&gt;IsInstance&lt;ContainerType&gt;();</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_base_of&lt;TObjectRef,<sp/>NDArray&gt;::value<sp/>&amp;&amp;<sp/>type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a3bab8c80e57b1ab2d7ab95962be4d2ec" kindref="member">kTVMNDArrayHandle</ref>)<sp/>||</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_base_of&lt;TObjectRef,<sp/>Module&gt;::value<sp/>&amp;&amp;<sp/>type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a41343a05e42d08053d9fa1da85f70af6" kindref="member">kTVMModuleHandle</ref>)<sp/>||</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33abe76912731a3c65bd7cdd9ab9a462c66" kindref="member">kTVMObjectHandle</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtvm_1_1runtime_1_1ObjectTypeChecker" kindref="compound">ObjectTypeChecker&lt;TObjectRef&gt;::Check</ref>(static_cast&lt;Object*&gt;(value_.v_handle)));</highlight></codeline>
<codeline lineno="1426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TObjectRef&gt;</highlight></codeline>
<codeline lineno="1429" refid="classtvm_1_1runtime_1_1TVMPODValue___1a918b5a9ef8fcd65d649c7dd41ff12d9f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TObjectRef<sp/><ref refid="classtvm_1_1runtime_1_1TVMPODValue___1a918b5a9ef8fcd65d649c7dd41ff12d9f" kindref="member">TVMPODValue_::AsObjectRef</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/>static_assert(</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of&lt;ObjectRef,<sp/>TObjectRef&gt;::value,</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Conversion<sp/>only<sp/>works<sp/>for<sp/>ObjectRef&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ContainerType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TObjectRef::ContainerType;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TObjectRef(<ref refid="classtvm_1_1runtime_1_1ObjectPtr" kindref="compound">ObjectPtr&lt;Object&gt;</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>the<sp/>following<sp/>code<sp/>can<sp/>be<sp/>optimized<sp/>by<sp/>constant<sp/>folding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_base_of&lt;NDArray,<sp/>TObjectRef&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Casting<sp/>to<sp/>a<sp/>sub-class<sp/>of<sp/>NDArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a3bab8c80e57b1ab2d7ab95962be4d2ec" kindref="member">kTVMNDArrayHandle</ref>);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1ObjectPtr" kindref="compound">ObjectPtr&lt;Object&gt;</ref><sp/>data<sp/>=<sp/><ref refid="classtvm_1_1runtime_1_1NDArray_1ab76ba9c638e1d6db8d6f0ba8c4d38670" kindref="member">NDArray::FFIDataFromHandle</ref>(</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;TVMArrayHandle&gt;(value_.v_handle));</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(data-&gt;IsInstance&lt;ContainerType&gt;())</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expect<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ContainerType::_type_key<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>but<sp/>get<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>data-&gt;GetTypeKey();</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TObjectRef(data);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_base_of&lt;Module,<sp/>TObjectRef&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Casting<sp/>to<sp/>a<sp/>sub-class<sp/>of<sp/>Module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a41343a05e42d08053d9fa1da85f70af6" kindref="member">kTVMModuleHandle</ref>);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1ObjectPtr" kindref="compound">ObjectPtr&lt;Object&gt;</ref><sp/>data<sp/>=<sp/>GetObjectPtr&lt;Object&gt;(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1Object" kindref="compound">Object</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.v_handle));</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(data-&gt;IsInstance&lt;ContainerType&gt;())</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expect<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ContainerType::_type_key<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>but<sp/>get<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>data-&gt;GetTypeKey();</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TObjectRef(data);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33abe76912731a3c65bd7cdd9ab9a462c66" kindref="member">kTVMObjectHandle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>normal<sp/>object<sp/>type<sp/>check.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1Object" kindref="compound">Object</ref>*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classtvm_1_1runtime_1_1Object" kindref="compound">Object</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_.v_handle);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(<ref refid="structtvm_1_1runtime_1_1ObjectTypeChecker" kindref="compound">ObjectTypeChecker&lt;TObjectRef&gt;::Check</ref>(ptr))</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expect<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="structtvm_1_1runtime_1_1ObjectTypeChecker_1a3498eb545b33e1c23a417fa58ec51dd6" kindref="member">ObjectTypeChecker&lt;TObjectRef&gt;::TypeName</ref>()</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>but<sp/>get<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ptr-&gt;<ref refid="classtvm_1_1runtime_1_1Object_1a9581610ea91e0e38f57edc82e264a1b0" kindref="member">GetTypeKey</ref>();</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TObjectRef(GetObjectPtr&lt;Object&gt;(ptr));</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_base_of&lt;TObjectRef,<sp/>NDArray&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a3bab8c80e57b1ab2d7ab95962be4d2ec" kindref="member">kTVMNDArrayHandle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Casting<sp/>to<sp/>a<sp/>base<sp/>class<sp/>that<sp/>NDArray<sp/>can<sp/>sub-class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtvm_1_1runtime_1_1ObjectPtr" kindref="compound">ObjectPtr&lt;Object&gt;</ref><sp/>data<sp/>=<sp/><ref refid="classtvm_1_1runtime_1_1NDArray_1ab76ba9c638e1d6db8d6f0ba8c4d38670" kindref="member">NDArray::FFIDataFromHandle</ref>(</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;TVMArrayHandle&gt;(value_.v_handle));</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TObjectRef(data);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_base_of&lt;TObjectRef,<sp/>Module&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_code_<sp/>==<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33a41343a05e42d08053d9fa1da85f70af6" kindref="member">kTVMModuleHandle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Casting<sp/>to<sp/>a<sp/>base<sp/>class<sp/>that<sp/>Module<sp/>can<sp/>sub-class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TObjectRef(GetObjectPtr&lt;Object&gt;(static_cast&lt;Object*&gt;(value_.v_handle)));</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="packed__func_8h_1ad1e150bb815d5cb964e15d4fa7b5fd93" kindref="member">TVM_CHECK_TYPE_CODE</ref>(type_code_,<sp/><ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33abe76912731a3c65bd7cdd9ab9a462c66" kindref="member">kTVMObjectHandle</ref>);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TObjectRef(<ref refid="classtvm_1_1runtime_1_1ObjectPtr" kindref="compound">ObjectPtr&lt;Object&gt;</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TObjectRef,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1477" refid="classtvm_1_1runtime_1_1TVMRetValue_1a230363e8e5980248aca5a760e0c3ab3d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">TVMRetValue</ref>&amp;<sp/><ref refid="classtvm_1_1runtime_1_1TVMRetValue_1a4993d4b338c28096b56ed3d0d9ae5170" kindref="member">TVMRetValue::operator=</ref>(TObjectRef<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1Object" kindref="compound">Object</ref>*<sp/>ptr<sp/>=<sp/>other.get();</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_base_of&lt;NDArray,<sp/>TObjectRef&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_base_of&lt;TObjectRef,<sp/>NDArray&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="classtvm_1_1runtime_1_1Object_1af1359ebff2c328ff0bb80083937c95dd" kindref="member">IsInstance</ref>&lt;<ref refid="classtvm_1_1runtime_1_1NDArray_1_1Container" kindref="compound">NDArray::ContainerType</ref>&gt;()))<sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>operator=(<ref refid="classtvm_1_1runtime_1_1NDArray" kindref="compound">NDArray</ref>(std::move(other.data_)));</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_base_of&lt;Module,<sp/>TObjectRef&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_base_of&lt;TObjectRef,<sp/>Module&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="classtvm_1_1runtime_1_1Object_1af1359ebff2c328ff0bb80083937c95dd" kindref="member">IsInstance</ref>&lt;<ref refid="classtvm_1_1runtime_1_1ModuleNode" kindref="compound">Module::ContainerType</ref>&gt;()))<sp/>{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>operator=(<ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">Module</ref>(std::move(other.data_)));</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>SwitchToObject(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33abe76912731a3c65bd7cdd9ab9a462c66" kindref="member">kTVMObjectHandle</ref>,<sp/>std::move(other.data_));</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>SwitchToPOD(<ref refid="c__runtime__api_8h_1ad3cce90e23260e30424e9878d9798d33ada22c3d9c62fa8f40d46e80ce83b96a1" kindref="member">kTVMNullptr</ref>);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1498" refid="classtvm_1_1runtime_1_1TVMArgValue_1a1621744e7148fee07fdc623e25961000" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TVMArgValue::operator<sp/>T()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AsObjectRef&lt;T&gt;();</highlight></codeline>
<codeline lineno="1500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1503" refid="classtvm_1_1runtime_1_1TVMRetValue_1a0b9304664e8aa3ffebf46149add6ce03" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>TVMRetValue::operator<sp/>T()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AsObjectRef&lt;T&gt;();</highlight></codeline>
<codeline lineno="1505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507" refid="classtvm_1_1runtime_1_1Module_1a1233f7b896bb299ef07f9e41a4ffdc17" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref><sp/><ref refid="classtvm_1_1runtime_1_1Module_1a1233f7b896bb299ef07f9e41a4ffdc17" kindref="member">Module::GetFunction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>query_imports)<sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*this)-&gt;GetFunction(name,<sp/>query_imports);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>runtime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tvm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>TVM_RUNTIME_PACKED_FUNC_H_</highlight></codeline>
    </programlisting>
    <location file="include/tvm/runtime/packed_func.h"/>
  </compounddef>
</doxygen>
