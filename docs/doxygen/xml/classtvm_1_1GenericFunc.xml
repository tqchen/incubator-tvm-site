<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1GenericFunc" kind="class" language="C++" prot="public">
    <compoundname>tvm::GenericFunc</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ObjectRef</basecompoundref>
    <includes refid="generic__func_8h" local="no">generic_func.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtvm_1_1GenericFunc_1adb9e6551f7f52018f1641198bd08574f" prot="public" static="no">
        <type><ref refid="classtvm_1_1GenericFuncNode" kindref="compound">GenericFuncNode</ref></type>
        <definition>using tvm::GenericFunc::ContainerType =  GenericFuncNode</definition>
        <argsstring></argsstring>
        <name>ContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/generic_func.h" line="114" column="1" bodyfile="include/tvm/target/generic_func.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtvm_1_1GenericFunc_1a1fd6b9bc3f72bb2b64e602de3982929d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct Manager</definition>
        <argsstring></argsstring>
        <name>Manager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/generic_func.h" line="120" column="1" bodyfile="include/tvm/target/generic_func.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1GenericFunc_1ae7363acf2a4a41ca5edb48a3f3537ba1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::GenericFunc::GenericFunc</definition>
        <argsstring>()</argsstring>
        <name>GenericFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/generic_func.h" line="45" column="1" bodyfile="include/tvm/target/generic_func.h" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1GenericFunc_1a355b52473c166484b944131937671d5f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::GenericFunc::GenericFunc</definition>
        <argsstring>(ObjectPtr&lt; Object &gt; n)</argsstring>
        <name>GenericFunc</name>
        <param>
          <type>ObjectPtr&lt; Object &gt;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/generic_func.h" line="46" column="1" bodyfile="include/tvm/target/generic_func.h" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1GenericFunc_1a97c34a40c5059bdda64494d61f50602d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1GenericFunc" kindref="compound">GenericFunc</ref> &amp;</type>
        <definition>GenericFunc&amp; tvm::GenericFunc::set_default</definition>
        <argsstring>(const runtime::PackedFunc value, bool allow_override=false)</argsstring>
        <name>set_default</name>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">runtime::PackedFunc</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_override</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Set the default function implementaiton. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The default function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_override</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, this call may override a previously registered function. If false, an error will be logged if the call would override a previously registered function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/generic_func.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1GenericFunc_1a2a5ef71cd38881b0ef73efa8f0b5fdc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1GenericFunc" kindref="compound">GenericFunc</ref> &amp;</type>
        <definition>GenericFunc&amp; tvm::GenericFunc::register_func</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;tags, const runtime::PackedFunc value, bool allow_override=false)</argsstring>
        <name>register_func</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">runtime::PackedFunc</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_override</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Register a specialized function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tags</parametername>
</parameternamelist>
<parameterdescription>
<para>The tags for this specialization </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The specialized function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow_override</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, this call may override previously registered tags. If false, an error will be logged if the call would override previously registered tags. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/generic_func.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1GenericFunc_1a1db58ce5213c9913379b42f3126a01b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">runtime::TVMRetValue</ref></type>
        <definition>runtime::TVMRetValue tvm::GenericFunc::operator()</definition>
        <argsstring>(Args &amp;&amp;...args) const </argsstring>
        <name>operator()</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Call generic function by directly passing in unpacked format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments to be passed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to be passed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<programlisting><codeline><highlight class="normal">//<sp/>Example<sp/>code<sp/>on<sp/>how<sp/>to<sp/>call<sp/>generic<sp/>function</highlight></codeline>
<codeline><highlight class="normal">void<sp/>CallGeneirc(GenericFunc<sp/>f)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>call<sp/>like<sp/>normal<sp/>functions<sp/>by<sp/>pass<sp/>in<sp/>arguments</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>return<sp/>value<sp/>is<sp/>automatically<sp/>converted<sp/>back</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>rvalue<sp/>=<sp/>f(1,<sp/>2.0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/generic_func.h" line="83" column="1" bodyfile="include/tvm/target/generic_func.h" bodystart="124" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1GenericFunc_1a640deb0864ed3a59a0f2921de076a369" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::GenericFunc::CallPacked</definition>
        <argsstring>(runtime::TVMArgs args, runtime::TVMRetValue *ret) const </argsstring>
        <name>CallPacked</name>
        <param>
          <type><ref refid="classtvm_1_1runtime_1_1TVMArgs" kindref="compound">runtime::TVMArgs</ref></type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="classtvm_1_1runtime_1_1TVMRetValue" kindref="compound">runtime::TVMRetValue</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Invoke the relevant function for the current target context, set by set_target_context. Arguments are passed in packed format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to pass to the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>The return value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/generic_func.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1GenericFunc_1a4a04307dffa174f71cdfb08d1903dec2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1GenericFuncNode" kindref="compound">GenericFuncNode</ref> *</type>
        <definition>GenericFuncNode * tvm::GenericFunc::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>access the internal node container </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the pointer to the internal node container </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/generic_func.h" line="111" column="1" bodyfile="include/tvm/target/generic_func.h" bodystart="154" bodyend="156"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtvm_1_1GenericFunc_1a74a6f06af50db51c3ff42fd493c44826" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1GenericFunc" kindref="compound">GenericFunc</ref></type>
        <definition>static GenericFunc tvm::GenericFunc::Get</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>Get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Find or register the <ref refid="classtvm_1_1GenericFunc" kindref="compound">GenericFunc</ref> instance corresponding to the give name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the registered <ref refid="classtvm_1_1GenericFunc" kindref="compound">GenericFunc</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classtvm_1_1GenericFunc" kindref="compound">GenericFunc</ref> instance </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/generic_func.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1GenericFunc_1a909acecbf2f34f847a34e587a4570dce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void tvm::GenericFunc::RegisterGenericFunc</definition>
        <argsstring>(GenericFunc func, const std::string &amp;name)</argsstring>
        <name>RegisterGenericFunc</name>
        <param>
          <type><ref refid="classtvm_1_1GenericFunc" kindref="compound">GenericFunc</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Add a <ref refid="classtvm_1_1GenericFunc" kindref="compound">GenericFunc</ref> instance to the registry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classtvm_1_1GenericFunc" kindref="compound">GenericFunc</ref> instance </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the registered <ref refid="classtvm_1_1GenericFunc" kindref="compound">GenericFunc</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/target/generic_func.h" line="105" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic function that can be specialized on a per-target basis. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5179">
        <label>ObjectRef</label>
      </node>
      <node id="5178">
        <label>tvm::GenericFunc</label>
        <link refid="classtvm_1_1GenericFunc"/>
        <childnode refid="5179" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5181">
        <label>ObjectRef</label>
      </node>
      <node id="5180">
        <label>tvm::GenericFunc</label>
        <link refid="classtvm_1_1GenericFunc"/>
        <childnode refid="5181" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tvm/target/generic_func.h" line="43" column="1" bodyfile="include/tvm/target/generic_func.h" bodystart="43" bodyend="121"/>
    <listofallmembers>
      <member refid="classtvm_1_1GenericFunc_1a640deb0864ed3a59a0f2921de076a369" prot="public" virt="non-virtual"><scope>tvm::GenericFunc</scope><name>CallPacked</name></member>
      <member refid="classtvm_1_1GenericFunc_1adb9e6551f7f52018f1641198bd08574f" prot="public" virt="non-virtual"><scope>tvm::GenericFunc</scope><name>ContainerType</name></member>
      <member refid="classtvm_1_1GenericFunc_1ae7363acf2a4a41ca5edb48a3f3537ba1" prot="public" virt="non-virtual"><scope>tvm::GenericFunc</scope><name>GenericFunc</name></member>
      <member refid="classtvm_1_1GenericFunc_1a355b52473c166484b944131937671d5f" prot="public" virt="non-virtual"><scope>tvm::GenericFunc</scope><name>GenericFunc</name></member>
      <member refid="classtvm_1_1GenericFunc_1a74a6f06af50db51c3ff42fd493c44826" prot="public" virt="non-virtual"><scope>tvm::GenericFunc</scope><name>Get</name></member>
      <member refid="classtvm_1_1GenericFunc_1a1fd6b9bc3f72bb2b64e602de3982929d" prot="private" virt="non-virtual"><scope>tvm::GenericFunc</scope><name>Manager</name></member>
      <member refid="classtvm_1_1GenericFunc_1a1db58ce5213c9913379b42f3126a01b0" prot="public" virt="non-virtual"><scope>tvm::GenericFunc</scope><name>operator()</name></member>
      <member refid="classtvm_1_1GenericFunc_1a4a04307dffa174f71cdfb08d1903dec2" prot="public" virt="non-virtual"><scope>tvm::GenericFunc</scope><name>operator-&gt;</name></member>
      <member refid="classtvm_1_1GenericFunc_1a2a5ef71cd38881b0ef73efa8f0b5fdc8" prot="public" virt="non-virtual"><scope>tvm::GenericFunc</scope><name>register_func</name></member>
      <member refid="classtvm_1_1GenericFunc_1a909acecbf2f34f847a34e587a4570dce" prot="public" virt="non-virtual"><scope>tvm::GenericFunc</scope><name>RegisterGenericFunc</name></member>
      <member refid="classtvm_1_1GenericFunc_1a97c34a40c5059bdda64494d61f50602d" prot="public" virt="non-virtual"><scope>tvm::GenericFunc</scope><name>set_default</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
