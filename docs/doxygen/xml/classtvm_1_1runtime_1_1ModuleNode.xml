<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1runtime_1_1ModuleNode" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>tvm::runtime::ModuleNode</compoundname>
    <basecompoundref refid="classtvm_1_1runtime_1_1Object" prot="public" virt="non-virtual">tvm::runtime::Object</basecompoundref>
    <derivedcompoundref refid="classtvm_1_1runtime_1_1vm_1_1Executable" prot="public" virt="non-virtual">tvm::runtime::vm::Executable</derivedcompoundref>
    <derivedcompoundref refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine" prot="public" virt="non-virtual">tvm::runtime::vm::VirtualMachine</derivedcompoundref>
    <includes refid="runtime_2module_8h" local="no">module.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1ModuleNode_1a56e23ef9427bd055c4868135cc1f38bd" prot="public" static="yes" mutable="no">
        <type>constexpr const uint32_t</type>
        <definition>constexpr const uint32_t tvm::runtime::ModuleNode::_type_index</definition>
        <argsstring></argsstring>
        <name>_type_index</name>
        <initializer>= TypeIndex::kRuntimeModule</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="196" column="1" bodyfile="include/tvm/runtime/module.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1ModuleNode_1a9346e3758203ca87d500e65de0445e01" prot="public" static="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* tvm::runtime::ModuleNode::_type_key</definition>
        <argsstring></argsstring>
        <name>_type_key</name>
        <initializer>= &quot;runtime.Module&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="197" column="1" bodyfile="include/tvm/runtime/module.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtvm_1_1runtime_1_1ModuleNode_1a21f639900c480510650969df9c74d17d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Module</definition>
        <argsstring></argsstring>
        <name>Module</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="203" column="1" bodyfile="include/tvm/runtime/module.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtvm_1_1runtime_1_1ModuleNode_1a2b490c1acecd166b5824e4e96f17c64e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ModuleInternal</definition>
        <argsstring></argsstring>
        <name>ModuleInternal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="204" column="1" bodyfile="include/tvm/runtime/module.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1ModuleNode_1af05db5c6d76f9b4dbf0631815170c5a7" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">Module</ref> &gt;</type>
        <definition>std::vector&lt;Module&gt; tvm::runtime::ModuleNode::imports_</definition>
        <argsstring></argsstring>
        <name>imports_</name>
        <briefdescription>
<para>The modules this module depend on. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="206" column="1" bodyfile="include/tvm/runtime/module.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtvm_1_1runtime_1_1ModuleNode_1abdd755bbe8892b8ef2fe4c063ab3a086" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;std::string, std::shared_ptr&lt;PackedFunc&gt; &gt; tvm::runtime::ModuleNode::import_cache_</definition>
        <argsstring></argsstring>
        <name>import_cache_</name>
        <briefdescription>
<para>Cache used by GetImport. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="211" column="1" bodyfile="include/tvm/runtime/module.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1runtime_1_1ModuleNode_1add6c8e6967c6906ea5346b2ccd30afb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual tvm::runtime::ModuleNode::~ModuleNode</definition>
        <argsstring>()</argsstring>
        <name>~ModuleNode</name>
        <briefdescription>
<para>virtual destructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="117" column="1" bodyfile="include/tvm/runtime/module.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1ModuleNode_1a5834549180e1c668e7126562cea9a557" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const char *</type>
        <definition>virtual const char* tvm::runtime::ModuleNode::type_key</definition>
        <argsstring>() const =0</argsstring>
        <name>type_key</name>
        <reimplementedby refid="classtvm_1_1runtime_1_1vm_1_1Executable_1aef4f3663ee57fcbdf2d775f4dbbe79dc">type_key</reimplementedby>
        <reimplementedby refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a00f035566a720dbac56f5dea042fb0ec">type_key</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The per module type key. </para></simplesect>
<simplesect kind="note"><para>This key is used to for serializing custom modules. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1ModuleNode_1af16bc90e6265eb5492b028308dbb1a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref></type>
        <definition>virtual PackedFunc tvm::runtime::ModuleNode::GetFunction</definition>
        <argsstring>(const std::string &amp;name, const ObjectPtr&lt; Object &gt; &amp;sptr_to_self)=0</argsstring>
        <name>GetFunction</name>
        <reimplementedby refid="classtvm_1_1runtime_1_1vm_1_1Executable_1af052de1610aae050d4363b6625265e86">GetFunction</reimplementedby>
        <reimplementedby refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine_1a8d1e7cdc6412eae8dea9c2c08c7f48ec">GetFunction</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classtvm_1_1runtime_1_1ObjectPtr" kindref="compound">ObjectPtr</ref>&lt; <ref refid="classtvm_1_1runtime_1_1Object" kindref="compound">Object</ref> &gt; &amp;</type>
          <declname>sptr_to_self</declname>
        </param>
        <briefdescription>
<para>Get a <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> from module. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> may not be fully initialized, there might still be first time running overhead when executing the function on certain devices. For benchmarking, use prepare to eliminate</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sptr_to_self</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classtvm_1_1runtime_1_1ObjectPtr" kindref="compound">ObjectPtr</ref> that points to this module node.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PackedFunc(nullptr) when it is not available.</para></simplesect>
<simplesect kind="note"><para>The function will always remain valid. If the function need resource from the module(e.g. late linking), it should capture sptr_to_self. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1ModuleNode_1ad06785ce4a9daf8602748f1b9cff5b90" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void tvm::runtime::ModuleNode::SaveToFile</definition>
        <argsstring>(const std::string &amp;file_name, const std::string &amp;format)</argsstring>
        <name>SaveToFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Save the module to file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The file to be saved to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format of the file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1ModuleNode_1acd613ea7faf2fc100d1e8b0fd80020c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void tvm::runtime::ModuleNode::SaveToBinary</definition>
        <argsstring>(dmlc::Stream *stream)</argsstring>
        <name>SaveToBinary</name>
        <param>
          <type>dmlc::Stream *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Save the module to binary stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The binary stream to save to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>It is recommended to implement this for device modules, but not necessarily host modules. We can use this to do AOT loading of bundled device functions. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1ModuleNode_1a73ac521892f4263554116261303e7e44" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string tvm::runtime::ModuleNode::GetSource</definition>
        <argsstring>(const std::string &amp;format=&quot;&quot;)</argsstring>
        <name>GetSource</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Get the source code of module, when available. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format of the source code, can be empty by default. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Possible source code when available. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1ModuleNode_1abd6d000714e0ed2b3b2f435ea5bd9a43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref></type>
        <definition>PackedFunc tvm::runtime::ModuleNode::GetFunction</definition>
        <argsstring>(const std::string &amp;name, bool query_imports=false)</argsstring>
        <name>GetFunction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>query_imports</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get packed function from current module by name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query_imports</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether also query dependency modules. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result function. This function will return PackedFunc(nullptr) if function do not exist. </para></simplesect>
<simplesect kind="note"><para>Implemented in packed_func.cc </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1ModuleNode_1a79b98521b484d1c672b7ce2ae2aed2b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tvm::runtime::ModuleNode::Import</definition>
        <argsstring>(Module other)</argsstring>
        <name>Import</name>
        <param>
          <type><ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">Module</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Import another module into this module. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The module to be imported.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Cyclic dependency is not allowed among modules, An error will be thrown when cyclic dependency is detected. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1ModuleNode_1aa2820340181ff4a9eaa149f89ac706ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classtvm_1_1runtime_1_1PackedFunc" kindref="compound">PackedFunc</ref> *</type>
        <definition>const PackedFunc* tvm::runtime::ModuleNode::GetFuncFromEnv</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>GetFuncFromEnv</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a function from current environment The environment includes all the imports as well as Global functions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1ModuleNode_1abb10abf603900cbd0bfd51eeb44eb949" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classtvm_1_1runtime_1_1Module" kindref="compound">Module</ref> &gt; &amp;</type>
        <definition>const std::vector&lt;Module&gt;&amp; tvm::runtime::ModuleNode::imports</definition>
        <argsstring>() const </argsstring>
        <name>imports</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The module it imports from </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="191" column="1" bodyfile="include/tvm/runtime/module.h" bodystart="191" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1runtime_1_1ModuleNode_1ac44750d06e11a275b10072b982ef4b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tvm::runtime::ModuleNode::TVM_DECLARE_FINAL_OBJECT_INFO</definition>
        <argsstring>(ModuleNode, Object)</argsstring>
        <name>TVM_DECLARE_FINAL_OBJECT_INFO</name>
        <param>
          <type><ref refid="classtvm_1_1runtime_1_1ModuleNode" kindref="compound">ModuleNode</ref></type>
        </param>
        <param>
          <type><ref refid="classtvm_1_1runtime_1_1Object" kindref="compound">Object</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/runtime/module.h" line="200" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base container of module. </para>    </briefdescription>
    <detaileddescription>
<para>Please subclass <ref refid="classtvm_1_1runtime_1_1ModuleNode" kindref="compound">ModuleNode</ref> to create a specific runtime module.</para><para><programlisting><codeline><highlight class="normal">class<sp/>MyModuleNode<sp/>:<sp/>public<sp/>ModuleNode<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>implement<sp/>the<sp/>interface</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>use<sp/>make_object<sp/>to<sp/>create<sp/>a<sp/>specific</highlight></codeline>
<codeline><highlight class="normal">//<sp/>instace<sp/>of<sp/>MyModuleNode.</highlight></codeline>
<codeline><highlight class="normal">Module<sp/>CreateMyModule()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ObjectPtr&lt;MyModuleNode&gt;<sp/>n<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tvm::runtime::make_object&lt;MyModuleNode&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>Module(n);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="5783">
        <label>tvm::runtime::Object</label>
        <link refid="classtvm_1_1runtime_1_1Object"/>
      </node>
      <node id="5785">
        <label>tvm::runtime::vm::VirtualMachine</label>
        <link refid="classtvm_1_1runtime_1_1vm_1_1VirtualMachine"/>
        <childnode refid="5782" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5784">
        <label>tvm::runtime::vm::Executable</label>
        <link refid="classtvm_1_1runtime_1_1vm_1_1Executable"/>
        <childnode refid="5782" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5782">
        <label>tvm::runtime::ModuleNode</label>
        <link refid="classtvm_1_1runtime_1_1ModuleNode"/>
        <childnode refid="5783" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5787">
        <label>tvm::runtime::Object</label>
        <link refid="classtvm_1_1runtime_1_1Object"/>
        <childnode refid="5787" relation="usage">
          <edgelabel>#deleter_</edgelabel>
        </childnode>
      </node>
      <node id="5786">
        <label>tvm::runtime::ModuleNode</label>
        <link refid="classtvm_1_1runtime_1_1ModuleNode"/>
        <childnode refid="5787" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tvm/runtime/module.h" line="114" column="1" bodyfile="include/tvm/runtime/module.h" bodystart="114" bodyend="212"/>
    <listofallmembers>
      <member refid="classtvm_1_1runtime_1_1Object_1a5fbebc47be111ecc1d5869bcc0476e21" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>_GetOrAllocRuntimeTypeIndex</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a14b234a745215da158b2386bbb34bd70" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>_type_child_slots</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a05ece7bcb6bf73e88765c1f193a489ce" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>_type_child_slots_can_overflow</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a55cb618bd4bbcd49317b35ea8e2996be" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>_type_final</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a92fe62494027b70af1f7696d611c21b6" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>_type_has_method_sequal_reduce</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ac97054694d03dc5eac58315fb569ef88" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>_type_has_method_shash_reduce</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a74e9f076b50b8b335b4a321e9b0bf03c" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>_type_has_method_visit_attrs</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1a56e23ef9427bd055c4868135cc1f38bd" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>_type_index</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1a9346e3758203ca87d500e65de0445e01" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>_type_key</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a70fb5361147634605d6595bb89381f03" prot="protected" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>DecRef</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1af4407d2b59132e803ff791482dbe0145" prot="protected" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>deleter_</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a9e84841ca982bff376a978ade0132631" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>FDeleter</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1aa2820340181ff4a9eaa149f89ac706ec" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>GetFuncFromEnv</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1af16bc90e6265eb5492b028308dbb1a25" prot="public" virt="pure-virtual"><scope>tvm::runtime::ModuleNode</scope><name>GetFunction</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1abd6d000714e0ed2b3b2f435ea5bd9a43" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>GetFunction</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a726972ff315c446192df94027ddea032" prot="protected" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>GetOrAllocRuntimeTypeIndex</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1a73ac521892f4263554116261303e7e44" prot="public" virt="virtual"><scope>tvm::runtime::ModuleNode</scope><name>GetSource</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a9581610ea91e0e38f57edc82e264a1b0" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>GetTypeKey</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ac9a7d8d3d562803c9cf91271c462b61d" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>GetTypeKeyHash</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1a79b98521b484d1c672b7ce2ae2aed2b5" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>Import</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1abdd755bbe8892b8ef2fe4c063ab3a086" prot="private" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>import_cache_</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1abb10abf603900cbd0bfd51eeb44eb949" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>imports</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1af05db5c6d76f9b4dbf0631815170c5a7" prot="protected" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>imports_</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ac9e5eed7719e322117bde996a171e33a" prot="protected" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>IncRef</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1af1359ebff2c328ff0bb80083937c95dd" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>IsInstance</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1a21f639900c480510650969df9c74d17d" prot="protected" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>Module</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1a2b490c1acecd166b5824e4e96f17c64e" prot="protected" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>ModuleInternal</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a133436a9ec5c4a768b94102bf95a660b" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>Object</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ab7968feb6ad38ecaffc320e13819d826" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>Object</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1aa1612f69ea5b4225d4cda759cd517323" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>Object</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a69c32fbd96181f5c21d2c878ab285e4f" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>operator=</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ae341e561272ff43cdcbc927bc29ac50d" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>operator=</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a0d492efee331e2239a093f4b2017c10f" prot="protected" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>ref_counter_</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a55549a6c23987890246248682560a03d" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>RefCounterType</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1ad94d79729ac85aa7c976e23d39066383" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>RuntimeTypeIndex</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1acd613ea7faf2fc100d1e8b0fd80020c3" prot="public" virt="virtual"><scope>tvm::runtime::ModuleNode</scope><name>SaveToBinary</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1ad06785ce4a9daf8602748f1b9cff5b90" prot="public" virt="virtual"><scope>tvm::runtime::ModuleNode</scope><name>SaveToFile</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1ac44750d06e11a275b10072b982ef4b13" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>TVM_DECLARE_FINAL_OBJECT_INFO</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a594c0d786dbc567ff6774ab11b45958a" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>type_index</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a4bfc2586cb55f2af47728187b3256255" prot="protected" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>type_index_</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1a5834549180e1c668e7126562cea9a557" prot="public" virt="pure-virtual"><scope>tvm::runtime::ModuleNode</scope><name>type_key</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a817ba6c23b7ee1821c48a75edf255a30" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>TypeIndex2Key</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a6ee32a02dd44257da105fbbe5d9c8622" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>TypeIndex2KeyHash</name></member>
      <member refid="classtvm_1_1runtime_1_1Object_1a6841f97e06e6614dd7e82c6dd41b818a" prot="public" virt="non-virtual"><scope>tvm::runtime::ModuleNode</scope><name>TypeKey2Index</name></member>
      <member refid="classtvm_1_1runtime_1_1ModuleNode_1add6c8e6967c6906ea5346b2ccd30afb4" prot="public" virt="virtual"><scope>tvm::runtime::ModuleNode</scope><name>~ModuleNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
