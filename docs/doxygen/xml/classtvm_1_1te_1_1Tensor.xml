<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1te_1_1Tensor" kind="class" language="C++" prot="public">
    <compoundname>tvm::te::Tensor</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ObjectRef</basecompoundref>
    <includes refid="tensor_8h" local="no">tensor.h</includes>
    <innerclass refid="classtvm_1_1te_1_1Tensor_1_1Slice" prot="public">tvm::te::Tensor::Slice</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtvm_1_1te_1_1Tensor_1a79078835ab113994887e66878e2a87ab" prot="public" static="no">
        <type><ref refid="classtvm_1_1te_1_1TensorNode" kindref="compound">TensorNode</ref></type>
        <definition>using tvm::te::Tensor::ContainerType =  TensorNode</definition>
        <argsstring></argsstring>
        <name>ContainerType</name>
        <briefdescription>
<para>specify container node </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/tensor.h" line="139" column="1" bodyfile="include/tvm/te/tensor.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1te_1_1Tensor_1a23a2f5549bdcd66eb210fd71813d6051" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::te::Tensor::Tensor</definition>
        <argsstring>()</argsstring>
        <name>Tensor</name>
        <briefdescription>
<para>default constructor, used internally </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/tensor.h" line="55" column="1" bodyfile="include/tvm/te/tensor.h" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Tensor_1a6d619c9a463a0ad05bb5bc27189d1230" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::te::Tensor::Tensor</definition>
        <argsstring>(ObjectPtr&lt; Object &gt; n)</argsstring>
        <name>Tensor</name>
        <param>
          <type>ObjectPtr&lt; Object &gt;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/tensor.h" line="56" column="1" bodyfile="include/tvm/te/tensor.h" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Tensor_1a725bede99576a444220c7c46473edbba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtvm_1_1te_1_1TensorNode" kindref="compound">TensorNode</ref> *</type>
        <definition>const TensorNode * tvm::te::Tensor::operator-&gt;</definition>
        <argsstring>() const </argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>access the internal node container </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the pointer to the internal node container </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/tensor.h" line="61" column="1" bodyfile="include/tvm/te/tensor.h" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Tensor_1a15b163083896422fbbf6a1ad972b461e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::te::Tensor::operator==</definition>
        <argsstring>(const Tensor &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>check if two tensors equals each other. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>tensor to be checked. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the two tensors equals each other. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/tensor.h" line="67" column="1" bodyfile="include/tvm/te/tensor.h" bodystart="202" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Tensor_1aa9247465fac8685c9b816359c144a32d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::te::Tensor::operator!=</definition>
        <argsstring>(const Tensor &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>check if two tensors are different. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>tensor to be checked. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the two tensors are different. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/tensor.h" line="73" column="1" bodyfile="include/tvm/te/tensor.h" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Tensor_1abe7e5dcf5965fa514ba2a78b2f71a871" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tvm::te::Tensor::ndim</definition>
        <argsstring>() const </argsstring>
        <name>ndim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The dimension of the tensor </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/tensor.h" line="75" column="1" bodyfile="include/tvm/te/tensor.h" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Tensor_1a2c58dbdca81f9326dc097d2dfa932c13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::te::Tensor::operator()</definition>
        <argsstring>(Args &amp;&amp;...args) const </argsstring>
        <name>operator()</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Take elements from the tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the result expression representing tensor read. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/tensor.h" line="82" column="1" bodyfile="include/tvm/te/tensor.h" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Tensor_1aef881cbdd900afba307d07372e6d0710" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::te::Tensor::operator()</definition>
        <argsstring>(Array&lt; PrimExpr &gt; indices) const </argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref> &gt;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>Take elements from the tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>the indices. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the result expression representing tensor read. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/tensor.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Tensor_1a2833a614926eca85a2e8bd4c9af667b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
        <definition>PrimExpr tvm::te::Tensor::operator()</definition>
        <argsstring>(Array&lt; Var &gt; indices) const </argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="classtvm_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="classtvm_1_1tir_1_1Var" kindref="compound">Var</ref> &gt;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>Take elements from the tensor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>the indices. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the result expression representing tensor read. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/tensor.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1te_1_1Tensor_1a2186a1bbc39673d9e39eafe7a01fed91" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1te_1_1Tensor_1_1Slice" kindref="compound">Slice</ref></type>
        <definition>Slice tvm::te::Tensor::operator[]</definition>
        <argsstring>(PrimExpr i) const </argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classtvm_1_1PrimExpr" kindref="compound">PrimExpr</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>get i-th slice from the current <ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the coordinate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the subsequent slice. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/te/tensor.h" line="135" column="1" bodyfile="include/tvm/te/tensor.h" bodystart="135" bodyend="137"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classtvm_1_1te_1_1Tensor" kindref="compound">Tensor</ref> structure representing a possible input, or intermediate computation result. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="7143">
        <label>ObjectRef</label>
      </node>
      <node id="7142">
        <label>tvm::te::Tensor</label>
        <link refid="classtvm_1_1te_1_1Tensor"/>
        <childnode refid="7143" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7145">
        <label>ObjectRef</label>
      </node>
      <node id="7144">
        <label>tvm::te::Tensor</label>
        <link refid="classtvm_1_1te_1_1Tensor"/>
        <childnode refid="7145" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tvm/te/tensor.h" line="52" column="1" bodyfile="include/tvm/te/tensor.h" bodystart="52" bodyend="140"/>
    <listofallmembers>
      <member refid="classtvm_1_1te_1_1Tensor_1a79078835ab113994887e66878e2a87ab" prot="public" virt="non-virtual"><scope>tvm::te::Tensor</scope><name>ContainerType</name></member>
      <member refid="classtvm_1_1te_1_1Tensor_1abe7e5dcf5965fa514ba2a78b2f71a871" prot="public" virt="non-virtual"><scope>tvm::te::Tensor</scope><name>ndim</name></member>
      <member refid="classtvm_1_1te_1_1Tensor_1aa9247465fac8685c9b816359c144a32d" prot="public" virt="non-virtual"><scope>tvm::te::Tensor</scope><name>operator!=</name></member>
      <member refid="classtvm_1_1te_1_1Tensor_1a2c58dbdca81f9326dc097d2dfa932c13" prot="public" virt="non-virtual"><scope>tvm::te::Tensor</scope><name>operator()</name></member>
      <member refid="classtvm_1_1te_1_1Tensor_1aef881cbdd900afba307d07372e6d0710" prot="public" virt="non-virtual"><scope>tvm::te::Tensor</scope><name>operator()</name></member>
      <member refid="classtvm_1_1te_1_1Tensor_1a2833a614926eca85a2e8bd4c9af667b0" prot="public" virt="non-virtual"><scope>tvm::te::Tensor</scope><name>operator()</name></member>
      <member refid="classtvm_1_1te_1_1Tensor_1a725bede99576a444220c7c46473edbba" prot="public" virt="non-virtual"><scope>tvm::te::Tensor</scope><name>operator-&gt;</name></member>
      <member refid="classtvm_1_1te_1_1Tensor_1a15b163083896422fbbf6a1ad972b461e" prot="public" virt="non-virtual"><scope>tvm::te::Tensor</scope><name>operator==</name></member>
      <member refid="classtvm_1_1te_1_1Tensor_1a2186a1bbc39673d9e39eafe7a01fed91" prot="public" virt="non-virtual"><scope>tvm::te::Tensor</scope><name>operator[]</name></member>
      <member refid="classtvm_1_1te_1_1Tensor_1a23a2f5549bdcd66eb210fd71813d6051" prot="public" virt="non-virtual"><scope>tvm::te::Tensor</scope><name>Tensor</name></member>
      <member refid="classtvm_1_1te_1_1Tensor_1a6d619c9a463a0ad05bb5bc27189d1230" prot="public" virt="non-virtual"><scope>tvm::te::Tensor</scope><name>Tensor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
