<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1Op" kind="class" language="C++" prot="public">
    <compoundname>tvm::Op</compoundname>
    <basecompoundref refid="classtvm_1_1RelayExpr" prot="public" virt="non-virtual">tvm::RelayExpr</basecompoundref>
    <includes refid="ir_2op_8h" local="no">op.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtvm_1_1Op_1a03bdb10e7fe5aac4e638523ab030c1e4" prot="public" static="no">
        <type><ref refid="classtvm_1_1OpNode" kindref="compound">OpNode</ref></type>
        <definition>using tvm::Op::ContainerType =  OpNode</definition>
        <argsstring></argsstring>
        <name>ContainerType</name>
        <briefdescription>
<para>specify container node </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/op.h" line="191" column="1" bodyfile="include/tvm/ir/op.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1Op_1afde3bc925d4d4c7ea09d4da50fc32c66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::Op::Op</definition>
        <argsstring>()</argsstring>
        <name>Op</name>
        <briefdescription>
<para>default constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/op.h" line="159" column="1" bodyfile="include/tvm/ir/op.h" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Op_1abaafec14f5f05cc8bd3cdbf99eeb53d5" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tvm::Op::Op</definition>
        <argsstring>(ObjectPtr&lt; Object &gt; n)</argsstring>
        <name>Op</name>
        <param>
          <type>ObjectPtr&lt; Object &gt;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>constructor from node pointer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/op.h" line="161" column="1" bodyfile="include/tvm/ir/op.h" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Op_1adecc41ad59962134dce22a8211ee19f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtvm_1_1OpNode" kindref="compound">OpNode</ref> *</type>
        <definition>const OpNode * tvm::Op::operator-&gt;</definition>
        <argsstring>() const </argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>access the internal node container </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the pointer to the internal node container </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/op.h" line="166" column="1" bodyfile="include/tvm/ir/op.h" bodystart="438" bodyend="440"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtvm_1_1Op_1ab1d0bfd024cedf156bf59cccfc29bd59" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtvm_1_1OpMap" kindref="compound">OpMap</ref>&lt; ValueType &gt;</type>
        <definition>OpMap&lt; ValueType &gt; tvm::Op::GetAttr</definition>
        <argsstring>(const std::string &amp;attr_name)</argsstring>
        <name>GetAttr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>attr_name</declname>
        </param>
        <briefdescription>
<para>Get additional registered attribute about operators. If nothing has been registered, an empty <ref refid="classtvm_1_1OpMap" kindref="compound">OpMap</ref> will be returned. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the attribute. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <ref refid="classtvm_1_1OpMap" kindref="compound">OpMap</ref> of specified attr_name. </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the attribute. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/op.h" line="175" column="1" bodyfile="include/tvm/ir/op.h" bodystart="443" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Op_1a51002130d653fea8a25d4080a84037f6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tvm::Op::HasAttr</definition>
        <argsstring>(const std::string &amp;attr_name)</argsstring>
        <name>HasAttr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>attr_name</declname>
        </param>
        <briefdescription>
<para>Checks if an attr is present in the registry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attr_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the attribute. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool True if the attr is present. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/op.h" line="181" column="1" bodyfile="include/tvm/ir/op.h" bodystart="447" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Op_1a0d3633a44d1d1b210520b72056d1e449" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classtvm_1_1Op" kindref="compound">Op</ref> &amp;</type>
        <definition>static const Op&amp; tvm::Op::Get</definition>
        <argsstring>(const std::string &amp;op_name)</argsstring>
        <name>Get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>op_name</declname>
        </param>
        <briefdescription>
<para>Get an <ref refid="classtvm_1_1Op" kindref="compound">Op</ref> for a given operator name. Will raise an error if the op has not been registered. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the operator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a <ref refid="classtvm_1_1Op" kindref="compound">Op</ref>, valid throughout program lifetime. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/op.h" line="188" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classtvm_1_1Op_1a3f51cbe0943f9104d193236d0f8ad36c" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classtvm_1_1GenericOpMap" kindref="compound">GenericOpMap</ref> &amp;</type>
        <definition>static const GenericOpMap&amp; tvm::Op::GetGenericAttr</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>GetGenericAttr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get generic attrmap given attr name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to <ref refid="classtvm_1_1GenericOpMap" kindref="compound">GenericOpMap</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/op.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1Op_1a9bc1e7c78194e790206db160516d8919" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool tvm::Op::HasGenericAttr</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>HasGenericAttr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Checks if the key is present in the registry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The attribute key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool True if the key is present </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/ir/op.h" line="205" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Managed reference class to <ref refid="classtvm_1_1OpNode" kindref="compound">OpNode</ref>. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classtvm_1_1OpNode" kindref="compound">OpNode</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="5930">
        <label>ObjectRef</label>
      </node>
      <node id="5928">
        <label>tvm::RelayExpr</label>
        <link refid="classtvm_1_1RelayExpr"/>
        <childnode refid="5929" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5929">
        <label>tvm::BaseExpr</label>
        <link refid="classtvm_1_1BaseExpr"/>
        <childnode refid="5930" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5927">
        <label>tvm::Op</label>
        <link refid="classtvm_1_1Op"/>
        <childnode refid="5928" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5934">
        <label>ObjectRef</label>
      </node>
      <node id="5932">
        <label>tvm::RelayExpr</label>
        <link refid="classtvm_1_1RelayExpr"/>
        <childnode refid="5933" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5933">
        <label>tvm::BaseExpr</label>
        <link refid="classtvm_1_1BaseExpr"/>
        <childnode refid="5934" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5931">
        <label>tvm::Op</label>
        <link refid="classtvm_1_1Op"/>
        <childnode refid="5932" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/tvm/ir/op.h" line="156" column="1" bodyfile="include/tvm/ir/op.h" bodystart="156" bodyend="206"/>
    <listofallmembers>
      <member refid="classtvm_1_1Op_1a03bdb10e7fe5aac4e638523ab030c1e4" prot="public" virt="non-virtual"><scope>tvm::Op</scope><name>ContainerType</name></member>
      <member refid="classtvm_1_1Op_1a0d3633a44d1d1b210520b72056d1e449" prot="public" virt="non-virtual"><scope>tvm::Op</scope><name>Get</name></member>
      <member refid="classtvm_1_1Op_1ab1d0bfd024cedf156bf59cccfc29bd59" prot="public" virt="non-virtual"><scope>tvm::Op</scope><name>GetAttr</name></member>
      <member refid="classtvm_1_1Op_1a3f51cbe0943f9104d193236d0f8ad36c" prot="private" virt="non-virtual"><scope>tvm::Op</scope><name>GetGenericAttr</name></member>
      <member refid="classtvm_1_1Op_1a51002130d653fea8a25d4080a84037f6" prot="public" virt="non-virtual"><scope>tvm::Op</scope><name>HasAttr</name></member>
      <member refid="classtvm_1_1Op_1a9bc1e7c78194e790206db160516d8919" prot="private" virt="non-virtual"><scope>tvm::Op</scope><name>HasGenericAttr</name></member>
      <member refid="classtvm_1_1Op_1afde3bc925d4d4c7ea09d4da50fc32c66" prot="public" virt="non-virtual"><scope>tvm::Op</scope><name>Op</name></member>
      <member refid="classtvm_1_1Op_1abaafec14f5f05cc8bd3cdbf99eeb53d5" prot="public" virt="non-virtual"><scope>tvm::Op</scope><name>Op</name></member>
      <member refid="classtvm_1_1Op_1adecc41ad59962134dce22a8211ee19f2" prot="public" virt="non-virtual"><scope>tvm::Op</scope><name>operator-&gt;</name></member>
      <member refid="classtvm_1_1RelayExpr_1aaeb30fa197e3d25cd7897f3ac4dcef9d" prot="public" virt="non-virtual"><scope>tvm::Op</scope><name>TVM_DEFINE_OBJECT_REF_METHODS</name></member>
      <member refid="classtvm_1_1BaseExpr_1aa513c6abed6e5b76c7fc9441649b3e4c" prot="public" virt="non-virtual" ambiguityscope="tvm::BaseExpr::"><scope>tvm::Op</scope><name>TVM_DEFINE_OBJECT_REF_METHODS</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
