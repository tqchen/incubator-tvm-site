<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4" kind="class" language="C++" prot="public">
    <compoundname>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</compoundname>
    <includes refid="relay_2expr__functor_8h" local="no">expr_functor.h</includes>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a91e421be6797f2c873054e73d3a5f65a" prot="private" static="no">
        <type><ref refid="classtvm_1_1relay_1_1ExprFunctor" kindref="compound">ExprFunctor</ref>&lt; R(const <ref refid="namespacetvm_1_1relay_1a5b84e3790f89bb3fad5c7911eeb99531" kindref="member">Expr</ref> &amp;n, Args...)&gt;</type>
        <definition>using tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::TSelf =  ExprFunctor&lt;R(const Expr&amp; n, Args...)&gt;</definition>
        <argsstring></argsstring>
        <name>TSelf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="70" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a7ce958b24d9386a4748c74f3fa71ddce" prot="private" static="no">
        <type><ref refid="classtvm_1_1NodeFunctor" kindref="compound">tvm::NodeFunctor</ref>&lt; R(const ObjectRef &amp;n, <ref refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4" kindref="compound">TSelf</ref> *self, Args...)&gt;</type>
        <definition>using tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::FType =  tvm::NodeFunctor&lt;R(const ObjectRef&amp; n, TSelf* self, Args...)&gt;</definition>
        <argsstring></argsstring>
        <name>FType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="71" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a4558886f7f179396ee11b5fe91927793" prot="public" static="no">
        <type>R</type>
        <definition>using tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::result_type =  R</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <briefdescription>
<para>the result type of this functor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="75" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1ae79b1dffcf943b65cc439b8a9f4697a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::~ExprFunctor</definition>
        <argsstring>()</argsstring>
        <name>~ExprFunctor</name>
        <briefdescription>
<para>virtual destructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="77" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a1d1f97a992335d11f080a7c095d60011" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>R</type>
        <definition>R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::operator()</definition>
        <argsstring>(const Expr &amp;n, Args...args)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="namespacetvm_1_1relay_1a5b84e3790f89bb3fad5c7911eeb99531" kindref="member">Expr</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Same as call. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The expression node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the call </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="84" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1aa256ca2ead1de49b1b4b867dde835514" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr</definition>
        <argsstring>(const Expr &amp;n, Args...args)</argsstring>
        <name>VisitExpr</name>
        <param>
          <type>const <ref refid="namespacetvm_1_1relay_1a5b84e3790f89bb3fad5c7911eeb99531" kindref="member">Expr</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>The functor call. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The expression node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional arguments. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the call </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="93" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a045072329e79fa39647597bf45e064e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const ConstantNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1relay_1_1ConstantNode" kindref="compound">ConstantNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="99" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="99" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a2a377d6f9a5721920cf704b60553e7ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const TupleNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1relay_1_1TupleNode" kindref="compound">TupleNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="101" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="101" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1abbc94edb62804de97890effaf22b183a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const VarNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1relay_1_1VarNode" kindref="compound">VarNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="103" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="103" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1abdf289c25698ddb88156932d6bed6a74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const GlobalVarNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="namespacetvm_1_1relay_1afe7144195dbbc914183189444ef6a347" kindref="member">GlobalVarNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="105" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="105" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a09a9c1f906e909919b4cacf4b5659c0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const FunctionNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1relay_1_1FunctionNode" kindref="compound">FunctionNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="107" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="107" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a01944342a92438a13418ab39135ef23a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const CallNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1relay_1_1CallNode" kindref="compound">CallNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="109" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a19256b27e03264c09868bd5cdfb93f3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const LetNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1relay_1_1LetNode" kindref="compound">LetNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="110" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1af221c096d7aff8314f914fcb085cf423" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const IfNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1relay_1_1IfNode" kindref="compound">IfNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="111" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="111" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a0e7ea6a2c4ecc8ba4381837e5466e9a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const OpNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="namespacetvm_1_1relay_1ac9d4f2cf78a48659817a88d890e1d142" kindref="member">OpNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="113" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="113" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a43baf8c1149f7c54d59526aba017f658" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const TupleGetItemNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1relay_1_1TupleGetItemNode" kindref="compound">TupleGetItemNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="115" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1ac1b7b83be73f45d30d7d20e76212a944" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const RefCreateNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1relay_1_1RefCreateNode" kindref="compound">RefCreateNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="116" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a36a41b449a6c40291527bb51797b71db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const RefReadNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1relay_1_1RefReadNode" kindref="compound">RefReadNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="117" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a9f5d2e1833e515dce36d29ef2781cc1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const RefWriteNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1relay_1_1RefWriteNode" kindref="compound">RefWriteNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="118" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a0ee67c9fda21cc04e2b47be9846acb29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const ConstructorNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="namespacetvm_1_1relay_1a6b95f70a9b44cc1c96593201594d1345" kindref="member">ConstructorNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="119" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1ae250830a2b91d5763c7c14ce65047bbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExpr_</definition>
        <argsstring>(const MatchNode *op, Args...args)</argsstring>
        <name>VisitExpr_</name>
        <param>
          <type>const <ref refid="classtvm_1_1relay_1_1MatchNode" kindref="compound">MatchNode</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="120" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1ab35a37c57578e32a8c873cdfe9e31a0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>R</type>
        <definition>virtual R tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::VisitExprDefault_</definition>
        <argsstring>(const Object *op, Args...)</argsstring>
        <name>VisitExprDefault_</name>
        <param>
          <type>const Object *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Args...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="121" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="121" bodyend="124"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a845db49e841686e50e9d6be5097659f7" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtvm_1_1NodeFunctor" kindref="compound">FType</ref></type>
        <definition>static FType tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;::InitVTable</definition>
        <argsstring>()</argsstring>
        <name>InitVTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/tvm/relay/expr_functor.h" line="128" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="128" bodyend="147"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4986">
        <label>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</label>
        <link refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4"/>
      </node>
    </collaborationgraph>
    <location file="include/tvm/relay/expr_functor.h" line="68" column="1" bodyfile="include/tvm/relay/expr_functor.h" bodystart="68" bodyend="148"/>
    <listofallmembers>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a7ce958b24d9386a4748c74f3fa71ddce" prot="private" virt="non-virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>FType</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a845db49e841686e50e9d6be5097659f7" prot="private" virt="non-virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>InitVTable</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a1d1f97a992335d11f080a7c095d60011" prot="public" virt="non-virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>operator()</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a4558886f7f179396ee11b5fe91927793" prot="public" virt="non-virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>result_type</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a91e421be6797f2c873054e73d3a5f65a" prot="private" virt="non-virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>TSelf</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1aa256ca2ead1de49b1b4b867dde835514" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a045072329e79fa39647597bf45e064e9" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a2a377d6f9a5721920cf704b60553e7ea" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1abbc94edb62804de97890effaf22b183a" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1abdf289c25698ddb88156932d6bed6a74" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a09a9c1f906e909919b4cacf4b5659c0c" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a01944342a92438a13418ab39135ef23a" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a19256b27e03264c09868bd5cdfb93f3f" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1af221c096d7aff8314f914fcb085cf423" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a0e7ea6a2c4ecc8ba4381837e5466e9a1" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a43baf8c1149f7c54d59526aba017f658" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1ac1b7b83be73f45d30d7d20e76212a944" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a36a41b449a6c40291527bb51797b71db" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a9f5d2e1833e515dce36d29ef2781cc1f" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1a0ee67c9fda21cc04e2b47be9846acb29" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1ae250830a2b91d5763c7c14ce65047bbe" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExpr_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1ab35a37c57578e32a8c873cdfe9e31a0f" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>VisitExprDefault_</name></member>
      <member refid="classtvm_1_1relay_1_1ExprFunctor_3_01R_07const_01Expr_01_6n_00_01Args_8_8_8_08_4_1ae79b1dffcf943b65cc439b8a9f4697a2" prot="public" virt="virtual"><scope>tvm::relay::ExprFunctor&lt; R(const Expr &amp;n, Args...)&gt;</scope><name>~ExprFunctor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
